"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkearthquest"] = self["webpackChunkearthquest"] || []).push([["main"],{

/***/ "./node_modules/css-loader/dist/cjs.js!./src/css/canvas.css":
/*!******************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/css/canvas.css ***!
  \******************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/noSourceMaps.js */ \"./node_modules/css-loader/dist/runtime/noSourceMaps.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"body {\\n    margin: 0px;\\n    padding: 10px;\\n    overflow: hidden;\\n}\\n.canvas-container {\\n    width: 100%;\\n    height: 100vh;\\n    margin: 0px;\\n}\\n.canvas {\\n    background-color: lightgray;\\n    margin:auto;\\n    display: flex;\\n}\", \"\"]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://earthquest/./src/css/canvas.css?./node_modules/css-loader/dist/cjs.js");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};\n\n//# sourceURL=webpack://earthquest/./node_modules/css-loader/dist/runtime/api.js?");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/noSourceMaps.js":
/*!**************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/noSourceMaps.js ***!
  \**************************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = function (i) {\n  return i[1];\n};\n\n//# sourceURL=webpack://earthquest/./node_modules/css-loader/dist/runtime/noSourceMaps.js?");

/***/ }),

/***/ "./src/assets/IsometricTile.png":
/*!**************************************!*\
  !*** ./src/assets/IsometricTile.png ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"f3b9765d0231c883f6998a9bb158b677.png\");\n\n//# sourceURL=webpack://earthquest/./src/assets/IsometricTile.png?");

/***/ }),

/***/ "./src/assets/characters.png":
/*!***********************************!*\
  !*** ./src/assets/characters.png ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"57fb7c7df25fec5ec5e0e1b57e75f9cc.png\");\n\n//# sourceURL=webpack://earthquest/./src/assets/characters.png?");

/***/ }),

/***/ "./src/assets/font.png":
/*!*****************************!*\
  !*** ./src/assets/font.png ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"e5c4511cc414342cf3f7d351c0f0210e.png\");\n\n//# sourceURL=webpack://earthquest/./src/assets/font.png?");

/***/ }),

/***/ "./src/assets/menu.png":
/*!*****************************!*\
  !*** ./src/assets/menu.png ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"c45521d4e86f14291cad208bdeaec1e7.png\");\n\n//# sourceURL=webpack://earthquest/./src/assets/menu.png?");

/***/ }),

/***/ "./src/css/canvas.css":
/*!****************************!*\
  !*** ./src/css/canvas.css ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ \"./node_modules/style-loader/dist/runtime/styleDomAPI.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertBySelector.js */ \"./node_modules/style-loader/dist/runtime/insertBySelector.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ \"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ \"./node_modules/style-loader/dist/runtime/insertStyleElement.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ \"./node_modules/style-loader/dist/runtime/styleTagTransform.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_canvas_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js!./canvas.css */ \"./node_modules/css-loader/dist/cjs.js!./src/css/canvas.css\");\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());\noptions.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());\n\n      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, \"head\");\n    \noptions.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());\noptions.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_canvas_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"], options);\n\n\n\n\n       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_canvas_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"] && _node_modules_css_loader_dist_cjs_js_canvas_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals ? _node_modules_css_loader_dist_cjs_js_canvas_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals : undefined);\n\n\n//# sourceURL=webpack://earthquest/./src/css/canvas.css?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {

eval("\n\nvar stylesInDOM = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n\n  return updater;\n}\n\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};\n\n//# sourceURL=webpack://earthquest/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {

eval("\n\nvar memo = {};\n/* istanbul ignore next  */\n\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n\n    memo[target] = styleTarget;\n  }\n\n  return memo[target];\n}\n/* istanbul ignore next  */\n\n\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n\n  target.appendChild(style);\n}\n\nmodule.exports = insertBySelector;\n\n//# sourceURL=webpack://earthquest/./node_modules/style-loader/dist/runtime/insertBySelector.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {

eval("\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\n\nmodule.exports = insertStyleElement;\n\n//# sourceURL=webpack://earthquest/./node_modules/style-loader/dist/runtime/insertStyleElement.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce =  true ? __webpack_require__.nc : 0;\n\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\n\nmodule.exports = setAttributesWithoutAttributes;\n\n//# sourceURL=webpack://earthquest/./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n\n  var needLayer = typeof obj.layer !== \"undefined\";\n\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n\n  css += obj.css;\n\n  if (needLayer) {\n    css += \"}\";\n  }\n\n  if (obj.media) {\n    css += \"}\";\n  }\n\n  if (obj.supports) {\n    css += \"}\";\n  }\n\n  var sourceMap = obj.sourceMap;\n\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  options.styleTagTransform(css, styleElement, options.options);\n}\n\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n\n  styleElement.parentNode.removeChild(styleElement);\n}\n/* istanbul ignore next  */\n\n\nfunction domAPI(options) {\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\n\nmodule.exports = domAPI;\n\n//# sourceURL=webpack://earthquest/./node_modules/style-loader/dist/runtime/styleDomAPI.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {

eval("\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\n\nmodule.exports = styleTagTransform;\n\n//# sourceURL=webpack://earthquest/./node_modules/style-loader/dist/runtime/styleTagTransform.js?");

/***/ }),

/***/ "./src/components/Component.ts":
/*!*************************************!*\
  !*** ./src/components/Component.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Component = void 0;\n/**\n * A component is something that is part of the game engine and has a reference\n * to the game engine and all the subsystems like text managers, collision and raise events.\n */\nclass Component {\n    /**\n     * Give components easier access to gl\n     */\n    get gl() {\n        return this.eng.gl;\n    }\n    constructor(eng) {\n        this.eng = eng;\n    }\n}\nexports.Component = Component;\n\n\n//# sourceURL=webpack://earthquest/./src/components/Component.ts?");

/***/ }),

/***/ "./src/components/PlayerController.ts":
/*!********************************************!*\
  !*** ./src/components/PlayerController.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PlayerController = exports.MoveDirection = void 0;\nconst Curve_1 = __webpack_require__(/*! ../math/Curve */ \"./src/math/Curve.ts\");\nconst Sprite_1 = __webpack_require__(/*! ../graphics/Sprite */ \"./src/graphics/Sprite.ts\");\nconst UserAction_1 = __webpack_require__(/*! ../core/UserAction */ \"./src/core/UserAction.ts\");\nconst SpriteController_1 = __webpack_require__(/*! ../graphics/SpriteController */ \"./src/graphics/SpriteController.ts\");\nconst vec2_1 = __importDefault(__webpack_require__(/*! ../math/vec2 */ \"./src/math/vec2.ts\"));\nconst TileComponent_1 = __webpack_require__(/*! ./TileComponent */ \"./src/components/TileComponent.ts\");\nconst vec3_1 = __importDefault(__webpack_require__(/*! ../math/vec3 */ \"./src/math/vec3.ts\"));\nvar MoveDirection;\n(function (MoveDirection) {\n    MoveDirection[MoveDirection[\"None\"] = 0] = \"None\";\n    MoveDirection[MoveDirection[\"N\"] = 1] = \"N\";\n    MoveDirection[MoveDirection[\"E\"] = 2] = \"E\";\n    MoveDirection[MoveDirection[\"S\"] = 4] = \"S\";\n    MoveDirection[MoveDirection[\"W\"] = 8] = \"W\";\n})(MoveDirection = exports.MoveDirection || (exports.MoveDirection = {}));\n/**\n * Controls the player sprite.\n */\nclass PlayerController extends TileComponent_1.TileComponent {\n    get id() {\n        return 'player';\n    }\n    get type() {\n        return 'player';\n    }\n    get height() {\n        return this._playerHeight;\n    }\n    set slopVector(val) {\n        this._slopVector = val;\n    }\n    get slopVector() {\n        return this._slopVector;\n    }\n    constructor(eng) {\n        super(eng);\n        this._walkDirection = MoveDirection.S;\n        this._walking = false;\n        this._speed = 3.0; // tiles per second\n        this._sprites = ['ness.down.step.left', 'ness.down.step.right'];\n        this._spriteFlip = false;\n        this._playerHeight = 0;\n        this._slopVector = new vec2_1.default([0, 0]);\n    }\n    initialize(spriteSheet, characterData) {\n        this._spriteController = new SpriteController_1.SpritController(this.eng);\n        this._spriteController.initialize(spriteSheet, characterData);\n        this._spriteController.scale(2);\n        this._spriteController.setSprite('ness.left.stand');\n        // set the position of the sprite in the center of the screen\n        this.setTilePosition(4, 5, 1);\n        this._spriteController.commitToBuffer();\n        this._walkAnimation = new Curve_1.Curve();\n        this._walkAnimation\n            .points([\n            { p: 1, t: 0 },\n            { p: 0, t: 150 },\n            { p: 1, t: 300 },\n        ])\n            .repeat(-1);\n        console.info('sprite list ', this._spriteController.getSpriteList());\n    }\n    /**\n     * Handles user input. The logic goes through a chain of command.\n     * @param action the action from keyboard or gamepad\n     * @returns True if the action was handled else false\n     */\n    handleUserAction(action) {\n        const wasWalking = this._walking;\n        //console.debug('action ' + action + ' was walking ' + wasWalking);\n        this._walkDirection = MoveDirection.None;\n        this._walking = false;\n        if ((action & UserAction_1.UserAction.Left) > 0) {\n            this._walkDirection = this._walkDirection | MoveDirection.W;\n            this._walking = true;\n        }\n        if ((action & UserAction_1.UserAction.Right) > 0) {\n            this._walkDirection = this._walkDirection | MoveDirection.E;\n            this._walking = true;\n        }\n        if ((action & UserAction_1.UserAction.Up) > 0) {\n            this._walkDirection = this._walkDirection | MoveDirection.N;\n            this._walking = true;\n        }\n        if ((action & UserAction_1.UserAction.Down) > 0) {\n            this._walkDirection = this._walkDirection | MoveDirection.S;\n            this._walking = true;\n        }\n        // We are now walking start the animations\n        if (!wasWalking && this._walking) {\n            this._walkAnimation.start(true);\n        }\n        else if (!this._walking) {\n            this._walkAnimation.pause(0);\n        }\n        return true;\n    }\n    update(dt) {\n        this._spriteController.update(dt);\n        this._walkAnimation.update(dt);\n        this.walkAnimation(dt, this._walkDirection);\n    }\n    walkAnimation(dt, direction) {\n        const dir = new vec2_1.default([0, 0]);\n        // check multiple angle movements first so the else statements work correctly\n        if ((direction & MoveDirection.S) > 0 &&\n            (direction & MoveDirection.W) > 0) {\n            this._sprites = ['ness.down.left.stand', 'ness.down.left.step'];\n            this._spriteFlip = false;\n            dir.x = -1;\n            dir.y = -1;\n        }\n        else if ((direction & MoveDirection.S) > 0 &&\n            (direction & MoveDirection.E) > 0) {\n            this._sprites = ['ness.down.left.stand', 'ness.down.left.step'];\n            this._spriteFlip = true;\n            dir.x = 1;\n            dir.y = -1;\n        }\n        else if ((direction & MoveDirection.N) > 0 &&\n            (direction & MoveDirection.W) > 0) {\n            this._sprites = ['ness.up.left.stand', 'ness.up.left.step'];\n            this._spriteFlip = false;\n            dir.x = -1;\n            dir.y = 1;\n        }\n        else if ((direction & MoveDirection.N) > 0 &&\n            (direction & MoveDirection.E) > 0) {\n            this._sprites = ['ness.up.left.stand', 'ness.up.left.step'];\n            this._spriteFlip = true;\n            dir.x = 1;\n            dir.y = 1;\n        }\n        else if ((direction & MoveDirection.E) > 0) {\n            this._sprites = ['ness.left.stand', 'ness.left.step'];\n            this._spriteFlip = true;\n            dir.x = 1;\n        }\n        else if ((direction & MoveDirection.W) > 0) {\n            this._sprites = ['ness.left.stand', 'ness.left.step'];\n            this._spriteFlip = false;\n            dir.x = -1;\n        }\n        else if ((direction & MoveDirection.S) > 0) {\n            this._sprites = ['ness.down.step.left', 'ness.down.step.right'];\n            this._spriteFlip = false;\n            dir.y = -1;\n        }\n        else if ((direction & MoveDirection.N) > 0) {\n            this._sprites = ['ness.up.step', 'ness.up.step'];\n            this._spriteFlip = false;\n            if (this._walkAnimation.getValue() == 0) {\n                this._spriteFlip = true;\n            }\n            dir.y = 1;\n        }\n        // only move if we are walking\n        if (this._walking) {\n            const moveVector = new vec3_1.default(dir.x * (dt / 1000.0) * this._speed, dir.y * (dt / 1000.0) * this._speed, vec2_1.default.dot(dir, this._slopVector));\n            // convert movement vector from screen space to tile space\n            const tileVector = this.eng.tileManger.screenVectorToTileSpace(moveVector);\n            console.debug('slop ' + moveVector.z, ' slop vector: ' +\n                this._slopVector.toString() +\n                ' dir ' +\n                dir.toString());\n            // screen space converted to tile space for x and y position (ground plane)\n            // then use the movement dot of the slope vector which will allow the player for\n            // move up and down on stairs and slops\n            this.OffsetTilePosition(tileVector.x, tileVector.y, vec2_1.default.dot(dir, this._slopVector));\n        }\n        // toggle and animation. This can happen when not walking too.\n        if (this._walkAnimation.getValue() == 0) {\n            this._spriteController.setFlip(this._spriteFlip ? Sprite_1.SpriteFlip.XFlip : Sprite_1.SpriteFlip.None);\n            this._spriteController.setSprite(this._sprites[0], true);\n        }\n        else if (this._walkAnimation.getValue() == 1) {\n            this._spriteController.setFlip(this._spriteFlip ? Sprite_1.SpriteFlip.XFlip : Sprite_1.SpriteFlip.None);\n            this._spriteController.setSprite(this._sprites[1], true);\n        }\n    }\n}\nexports.PlayerController = PlayerController;\n\n\n//# sourceURL=webpack://earthquest/./src/components/PlayerController.ts?");

/***/ }),

/***/ "./src/components/Scene.ts":
/*!*********************************!*\
  !*** ./src/components/Scene.ts ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Scene = void 0;\nconst TextManager_1 = __webpack_require__(/*! ../systems/TextManager */ \"./src/systems/TextManager.ts\");\nconst FpsController_1 = __webpack_require__(/*! ../core/FpsController */ \"./src/core/FpsController.ts\");\nconst Texture_1 = __webpack_require__(/*! ../graphics/Texture */ \"./src/graphics/Texture.ts\");\nconst characters_png_1 = __importDefault(__webpack_require__(/*! ../assets/characters.png */ \"./src/assets/characters.png\"));\nconst characters_json_1 = __importDefault(__webpack_require__(/*! ../assets/characters.json */ \"./src/assets/characters.json\"));\nconst font_png_1 = __importDefault(__webpack_require__(/*! ../assets/font.png */ \"./src/assets/font.png\"));\nconst font_json_1 = __importDefault(__webpack_require__(/*! ../assets/font.json */ \"./src/assets/font.json\"));\nconst vec2_1 = __importDefault(__webpack_require__(/*! ../math/vec2 */ \"./src/math/vec2.ts\"));\nconst vec4_1 = __importDefault(__webpack_require__(/*! ../math/vec4 */ \"./src/math/vec4.ts\"));\nconst Ground_1 = __webpack_require__(/*! ../environment/Ground */ \"./src/environment/Ground.ts\");\nconst PlayerController_1 = __webpack_require__(/*! ./PlayerController */ \"./src/components/PlayerController.ts\");\nconst Component_1 = __webpack_require__(/*! ./Component */ \"./src/components/Component.ts\");\nconst CreateSimpleAnimationClip_1 = __webpack_require__(/*! ../utilities/CreateSimpleAnimationClip */ \"./src/utilities/CreateSimpleAnimationClip.ts\");\nconst DialogMenu_1 = __webpack_require__(/*! ../menus/DialogMenu */ \"./src/menus/DialogMenu.ts\");\nconst level1_json_1 = __importDefault(__webpack_require__(/*! ../assets/level1.json */ \"./src/assets/level1.json\"));\n/**\n * Sample scene\n */\nclass Scene extends Component_1.Component {\n    //readonly spriteDebugger: SpriteDebugger;\n    /**\n     * Constructor\n     * @param {WebGL2RenderingContext} gl The render context\n     */\n    constructor(eng) {\n        super(eng);\n        this.fps = new FpsController_1.FpsController(eng);\n        this.spriteSheetTexture = new Texture_1.Texture(this.gl);\n        this.textManager = new TextManager_1.TextManager(eng);\n        this.ground = new Ground_1.Ground(eng, level1_json_1.default);\n        this.player = new PlayerController_1.PlayerController(eng);\n        //this.spriteDebugger = new SpriteDebugger(eng);\n        this.dialog = new DialogMenu_1.DialogMenu(eng);\n    }\n    /**\n     * Sets up the scene\n     */\n    async initialize() {\n        console.log('init scene');\n        CreateSimpleAnimationClip_1.CreateSimpleAnimationClip.create(characters_json_1.default);\n        // Browsers copy pixels from the loaded image in top-to-bottom order —\n        // from the top-left corner; but WebGL wants the pixels in bottom-to-top\n        // order — starting from the bottom-left corner. So in order to prevent\n        // the resulting image texture from having the wrong orientation when\n        // rendered, we need to make the following call, to cause the pixels to\n        // be flipped into the bottom-to-top order that WebGL expects.\n        // See jameshfisher.com/2020/10/22/why-is-my-webgl-texture-upside-down\n        // NOTE, this must be done before any textures are loaded\n        this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, true);\n        this.gl.enable(this.gl.CULL_FACE);\n        this.gl.cullFace(this.gl.BACK);\n        await this.spriteSheetTexture.loadImage(characters_png_1.default);\n        this.ground.initialize();\n        this.player.initialize(this.spriteSheetTexture, characters_json_1.default);\n        //this.spriteDebugger.initialize(this.spriteSheetTexture, CharacterData);\n        await this.dialog.initialize();\n        await this.textManager.initialize(font_png_1.default, font_json_1.default);\n        this.textManager.setTextBlock({\n            id: 'welcomeText',\n            text: 'Earth Quest',\n            position: new vec2_1.default([-800, 600]),\n            color: new vec4_1.default([1, 0, 0, 0.5]),\n            depth: 0,\n            scale: 0.5,\n        });\n    }\n    /**\n     * Handles user input. The logic goes through a chain of commands\n     *    1) Main menu\n     *    2) pause menu\n     *    3) battle menu\n     *    4) dialog menu\n     *    5) player in the environment\n     * @param action the action from keyboard or gamepad\n     * @returns True if the action was handled else false\n     */\n    handleUserAction(action) {\n        //console.debug('user action ', action);\n        // handle main menu, pause menu, battles menu, dialog menu, environment\n        return (this.dialog.handleUserAction(action) ||\n            //this.spriteDebugger.handleUserAction(action) ||\n            this.player.handleUserAction(action));\n    }\n    /**\n     * Called for each frame.\n     * @param {float} dt delta time from the last frame\n     */\n    update(dt) {\n        this.fps.update(dt);\n        this.gl.enable(this.gl.BLEND);\n        this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n        this.gl.clearColor(0.3, 0.3, 0.3, 1.0); // Clear to black, fully opaque\n        this.gl.clearDepth(1.0); // Clear everything\n        this.gl.enable(this.gl.DEPTH_TEST); // Enable depth testing\n        this.gl.depthFunc(this.gl.LEQUAL); // Near things obscure far things\n        // Clear the canvas before we start drawing on it.\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n        // update the texture manager\n        this.textManager.update(dt);\n        this.ground.update(dt);\n        this.player.update(dt);\n        //this.spriteDebugger.update(dt);\n        this.dialog.update(dt);\n    }\n    resize(width, height) { }\n    dispose() {\n        console.log('dispose');\n    }\n}\nexports.Scene = Scene;\n\n\n//# sourceURL=webpack://earthquest/./src/components/Scene.ts?");

/***/ }),

/***/ "./src/components/TileComponent.ts":
/*!*****************************************!*\
  !*** ./src/components/TileComponent.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TileComponent = void 0;\nconst vec3_1 = __importDefault(__webpack_require__(/*! ../math/vec3 */ \"./src/math/vec3.ts\"));\nconst Component_1 = __webpack_require__(/*! ./Component */ \"./src/components/Component.ts\");\n/**\n * A tile component is a component that controls a single tile.\n * The visual sprite might be part of a spriteBatch or a single sprite.\n * This is up to the implementation. This class has functions that\n * allow the implementation to handle collision detection and response and\n * update state of other tiles as needed via the {@link Ground}.\n */\nclass TileComponent extends Component_1.Component {\n    /**\n     * This is the tile height index. Subtract one because\n     * the tile is one level above the cell it is on.\n     */\n    get tileHeightIndex() {\n        return this._tileIndex.z - 1;\n    }\n    /**\n     * Get the tile index\n     */\n    get tileIndex() {\n        return this._tileIndex;\n    }\n    /**\n     * Get the height offset in tile space\n     */\n    get tileHeight() {\n        return this._tilePosition.z;\n    }\n    /**\n     * get the tile position\n     */\n    get tilePosition() {\n        return this._tilePosition;\n    }\n    constructor(eng) {\n        super(eng);\n        this._tileIndex = new vec3_1.default([0, 0, 0]);\n        this._tilePosition = new vec3_1.default([0, 0, 0]);\n    }\n    /**\n     * Set the position in tile space. This will recalculate the tile position\n     * and set the sprite position.\n     * @param i\n     * @param j\n     * @param k\n     */\n    setTilePosition(i, j, k) {\n        this._tilePosition.x = i;\n        this._tilePosition.y = j;\n        this._tilePosition.z = k;\n        this._tileIndex.x = Math.floor(this._tilePosition.x);\n        this._tileIndex.y = Math.floor(this._tilePosition.y);\n        this._tileIndex.z = Math.floor(this._tilePosition.z);\n        this.updateSpritePosition();\n    }\n    /**\n     * Can this tile be accessed by the given component. This happens when a player tries to move to a tile.\n     * It can also happen when an NPC tile tries to access a another tile\n     * @param tileComponent\n     * @returns\n     */\n    canAccessTile(tileComponent) {\n        return false;\n    }\n    /**\n     * Called when a tile tries to enter this tile. This happens after canAccessTile returns true\n     * @param tileComponent\n     */\n    onEnter(tileComponent) {\n        //NOP\n    }\n    /**\n     * Exit a this tile\n     * @param tileComponent\n     */\n    onExit(tileComponent) {\n        //NOP\n    }\n    /**\n     * Moves the tile by a given amount\n     * @param i\n     * @param j\n     * @param k\n     */\n    OffsetTilePosition(i, j, k) {\n        console.debug('before moving in dir ' +\n            i.toFixed(5) +\n            ', ' +\n            j.toFixed(5) +\n            ', ' +\n            k.toFixed(5));\n        const tileX = Math.floor(this._tilePosition.x);\n        const tileY = Math.floor(this._tilePosition.y);\n        const tileZ = Math.floor(this._tilePosition.z);\n        const floorHeight = tileZ - 1;\n        const fractionI = this.tilePosition.x % 1;\n        const fractionJ = this.tilePosition.y % 1;\n        const dir = new vec3_1.default([i, j, k]);\n        const ground = this.eng.scene.ground;\n        // left\n        if (dir.x < 0 && fractionI < 0.25) {\n            // cancel x movement\n            if (!ground.canAccessTile(this, tileX - 1, tileY, floorHeight)) {\n                dir.x = 0;\n            }\n        }\n        // right\n        else if (dir.x > 0 && fractionI > 0.75) {\n            // cancel x movement\n            if (!ground.canAccessTile(this, tileX + 1, tileY, floorHeight)) {\n                dir.x = 0;\n            }\n        }\n        // down\n        if (dir.y < 0 && fractionJ < 0.25) {\n            // cancel y movement\n            if (!ground.canAccessTile(this, tileX, tileY - 1, floorHeight)) {\n                dir.y = 0;\n            }\n        }\n        // up\n        else if (dir.y > 0 && fractionJ > 0.75) {\n            // cancel y movement\n            if (!ground.canAccessTile(this, tileX, tileY + 1, floorHeight)) {\n                dir.y = 0;\n            }\n        }\n        // check corners\n        if (dir.x > 0 && dir.y > 0 && fractionJ > 0.75 && fractionI > 0.75) {\n            //top right\n            if (!ground.canAccessTile(this, tileX + 1, tileY + 1, floorHeight)) {\n                if (Math.abs(dir.x) > Math.abs(dir.y)) {\n                    dir.y = 0;\n                }\n                else {\n                    dir.x = 0;\n                }\n            }\n        }\n        else if (dir.x < 0 && dir.y > 0 && fractionJ < 0.25 && fractionI > 0.75) {\n            //top left\n            if (!ground.canAccessTile(this, tileX - 1, tileY + 1, floorHeight)) {\n                if (Math.abs(dir.x) > Math.abs(dir.y)) {\n                    dir.y = 0;\n                }\n                else {\n                    dir.x = 0;\n                }\n            }\n        }\n        else if (dir.x < 0 && dir.y < 0 && fractionJ < 0.25 && fractionI < 0.25) {\n            //bottom left\n            if (!ground.canAccessTile(this, tileX - 1, tileY - 1, floorHeight)) {\n                if (Math.abs(dir.x) > Math.abs(dir.y)) {\n                    dir.y = 0;\n                }\n                else {\n                    dir.x = 0;\n                }\n            }\n        }\n        else if (dir.x < 0 && dir.y > 0 && fractionJ < 0.25 && fractionI > 0.75) {\n            //bottom right\n            if (!ground.canAccessTile(this, tileX - 1, tileY + 1, floorHeight)) {\n                if (Math.abs(dir.x) > Math.abs(dir.y)) {\n                    dir.y = 0;\n                }\n                else {\n                    dir.x = 0;\n                }\n            }\n        }\n        // check if the player can access this tile\n        if (dir.length() > 0) {\n            console.debug('moving in dir ' + dir.toString());\n            this.moveToTilePosition(this._tilePosition.x + dir.x, this._tilePosition.y + dir.y, this._tilePosition.z + dir.z);\n        }\n    }\n    /**\n     * Sets the tile position to a new value\n     * @param i\n     * @param j\n     * @param k\n     */\n    moveToTilePosition(i, j, k) {\n        console.debug('tile ' + i.toFixed(5) + ', ' + j.toFixed(5) + ', ' + k.toFixed(5));\n        // we need this to be an int to lookup the tiles\n        const tileX = Math.floor(i);\n        const tileY = Math.floor(j);\n        const tileZ = Math.floor(k);\n        const floor = tileZ - 1;\n        // we moved off the last tile call on exit\n        if (this._tileIndex.x != tileX || this._tileIndex.y != tileY) {\n            this.eng.scene.ground.onExit(this, this._tileIndex.x, this._tileIndex.y, floor);\n        }\n        const screen = this.eng.tileManger.toScreenLoc(i, j, k);\n        // perform all state updates\n        this._tilePosition.x = i;\n        this._tilePosition.y = j;\n        this._tilePosition.z = k;\n        this._tileIndex.x = tileX;\n        this._tileIndex.y = tileY;\n        this._tileIndex.z = tileZ;\n        // enter a new tile\n        this.eng.scene.ground.onEnter(this, this._tileIndex.x, this._tileIndex.y, floor);\n        this.updateSpritePosition();\n    }\n    /**\n     * Updates the sprite's position\n     */\n    updateSpritePosition() {\n        // Get the screen depth using the tile index not position of this tile\n        const screenDepth = this.eng.tileManger.toScreenLoc(this._tileIndex.x, this._tileIndex.y, this._tileIndex.z);\n        // Get the screen position of this tile using the position\n        const screenPosition = this.eng.tileManger.toScreenLoc(this._tilePosition.x, this._tilePosition.y, this._tilePosition.z);\n        // move the player\n        this._spriteController.setSpritePosition(screenPosition.x, screenPosition.y, screenDepth.z, screenDepth.z, true);\n    }\n}\nexports.TileComponent = TileComponent;\n\n\n//# sourceURL=webpack://earthquest/./src/components/TileComponent.ts?");

/***/ }),

/***/ "./src/core/CanvasController.ts":
/*!**************************************!*\
  !*** ./src/core/CanvasController.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CanvasController = void 0;\n/**\n * This controller manages the canvas\n */\nclass CanvasController {\n    constructor(onResize) {\n        console.debug('starting...');\n        this.container = document.createElement('div');\n        this.container.classList.add('canvas-container');\n        const canvas = document.createElement('canvas');\n        canvas.width = 800;\n        canvas.height = 600;\n        canvas.classList.add('canvas');\n        this.container.append(canvas);\n        window.addEventListener('resize', (e) => {\n            if (onResize) {\n                onResize(canvas.clientWidth, canvas.clientHeight);\n            }\n        });\n        if (true) {\n            /** @type {WebGL2RenderingContext} render context from this canvas*/\n            // @ts-ignore\n            this.gl = WebGLDebugUtils.makeDebugContext(canvas.getContext('webgl2'), this.logGlError.bind(this), this.logGLCall.bind(this));\n        }\n        else {}\n        // Only continue if WebGL is available and working\n        if (this.gl === null) {\n            console.error('Unable to initialize WebGL2. Your browser or machine may not support it.');\n            return;\n        }\n    }\n    logGlError(error, functionName, args) {\n        console.error('GL error: ' +\n            error +\n            ' in gl.' +\n            functionName +\n            '(' +\n            // @ts-ignore\n            WebGLDebugUtils.glFunctionArgsToString(functionName, args) +\n            ')');\n    }\n    logGLCall(functionName, args) {\n        /*\n        console.log(\n          'gl.' +\n            functionName +\n            '(' +\n            // @ts-ignore\n            (WebGLDebugUtils as any).glFunctionArgsToString(functionName, args) +\n            ')'\n        );\n        */\n    }\n    /**\n     * Get the container element\n     * @returns\n     */\n    element() {\n        return this.container;\n    }\n}\nexports.CanvasController = CanvasController;\n\n\n//# sourceURL=webpack://earthquest/./src/core/CanvasController.ts?");

/***/ }),

/***/ "./src/core/Engine.ts":
/*!****************************!*\
  !*** ./src/core/Engine.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Engine = void 0;\nconst Scene_1 = __webpack_require__(/*! ../components/Scene */ \"./src/components/Scene.ts\");\nconst Editor_1 = __webpack_require__(/*! ../editor/Editor */ \"./src/editor/Editor.ts\");\nconst SpritePerspectiveShader_1 = __webpack_require__(/*! ../shaders/SpritePerspectiveShader */ \"./src/shaders/SpritePerspectiveShader.ts\");\nconst InputHandler_1 = __webpack_require__(/*! ./InputHandler */ \"./src/core/InputHandler.ts\");\nconst TileManager_1 = __webpack_require__(/*! ../systems/TileManager */ \"./src/systems/TileManager.ts\");\nconst UserAction_1 = __webpack_require__(/*! ./UserAction */ \"./src/core/UserAction.ts\");\n/**\n * This is the game engine class that ties all the sub systems together. Including\n * the scene, sound manager, and game play, etc.\n */\nclass Engine {\n    get width() {\n        return this.gl.canvas.width;\n    }\n    get height() {\n        return this.gl.canvas.height;\n    }\n    get editor() {\n        return this._editor;\n    }\n    constructor(gl) {\n        this.gl = gl;\n        this.scene = new Scene_1.Scene(this);\n        this.input = new InputHandler_1.InputHandler(this);\n        this.tileManger = new TileManager_1.TileManager(this);\n        this.spritePerspectiveShader = new SpritePerspectiveShader_1.SpritePerspectiveShader(this.gl, 'spritePerspectiveShader');\n    }\n    /**\n     * Create the editor\n     * @param parentContainer\n     */\n    createEditor(parentContainer) {\n        this._editor = new Editor_1.Editor(this, parentContainer);\n    }\n    async initialize() {\n        await this.scene.initialize();\n    }\n    update(dt) {\n        // handle gamepad polling\n        this.input.preUpdate(dt);\n        // handle input\n        if (this.input.action != UserAction_1.UserAction.None) {\n            this.scene.handleUserAction(this.input.action);\n        }\n        // update most of the game components\n        this.scene.update(dt);\n        // used to reset flags and update hold timers\n        this.input.postUpdate(dt);\n    }\n    resize(width, height) {\n        this.scene.resize(width, height);\n    }\n    dispose() {\n        this.scene.dispose();\n    }\n}\nexports.Engine = Engine;\n\n\n//# sourceURL=webpack://earthquest/./src/core/Engine.ts?");

/***/ }),

/***/ "./src/core/FpsController.ts":
/*!***********************************!*\
  !*** ./src/core/FpsController.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FpsController = void 0;\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\nconst vec2_1 = __importDefault(__webpack_require__(/*! ../math/vec2 */ \"./src/math/vec2.ts\"));\nconst vec4_1 = __importDefault(__webpack_require__(/*! ../math/vec4 */ \"./src/math/vec4.ts\"));\n/**\n * Shows the FPS\n */\nclass FpsController extends Component_1.Component {\n    constructor(eng) {\n        super(eng);\n        /** The frames per second (float) */\n        this.fps = 0;\n        /** Just a counter for displaying FPS to the console */\n        this.delayCounter = 0;\n        /** Show the FPS every second */\n        this.displayInterval = 1000;\n    }\n    /**\n     * Calculate the FPS\n     * @param {float} dt delta time in ms\n     */\n    update(dt) {\n        this.fps = 1000.0 / dt;\n        this.delayCounter += dt;\n        if (this.delayCounter >= this.displayInterval) {\n            //console.debug('ms ' + dt.toFixed(2) + ' FPS: ' + this.fps.toFixed(2));\n            this.eng.scene.textManager.setTextBlock({\n                id: 'FPS',\n                text: 'ms ' + dt.toFixed(2) + ' FPS: ' + this.fps.toFixed(2),\n                position: new vec2_1.default([250, 600]),\n                color: new vec4_1.default([0.1, 0.5, 0.3, 1.0]),\n                depth: -1,\n                scale: 0.5,\n            });\n            this.delayCounter = 0;\n        }\n    }\n}\nexports.FpsController = FpsController;\n\n\n//# sourceURL=webpack://earthquest/./src/core/FpsController.ts?");

/***/ }),

/***/ "./src/core/InputHandler.ts":
/*!**********************************!*\
  !*** ./src/core/InputHandler.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InputHandler = void 0;\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\nconst UserAction_1 = __webpack_require__(/*! ./UserAction */ \"./src/core/UserAction.ts\");\n/**\n * Translates keyboard and gamepad events to game actions\n */\nclass InputHandler extends Component_1.Component {\n    constructor(eng) {\n        super(eng);\n        this.action = UserAction_1.UserAction.None;\n        this.hasGamePad = 'getGamepads' in navigator;\n        if (this.hasGamePad) {\n            console.debug('Gamepad supported');\n            window.addEventListener('gamepadconnected', (e) => {\n                this.connectGamepad(e);\n            });\n            window.addEventListener('gamepaddisconnected', (e) => {\n                this.disconnectGamepad(e);\n            });\n        }\n        else {\n            console.warn('gamepad not supported!');\n        }\n        window.addEventListener('keydown', (e) => {\n            this.keydown(e);\n        });\n        window.addEventListener('keyup', (e) => {\n            this.keyup(e);\n        });\n        window.addEventListener('mousedown', (e) => {\n            console.debug('mouse ' + e.offsetX + ', ' + (e.target.height - e.offsetY));\n        });\n    }\n    keydown(e) {\n        //console.log('keyboard down', e);\n        if (e.key == 'ArrowRight') {\n            this.action = this.action | UserAction_1.UserAction.Right;\n        }\n        if (e.key == 'ArrowLeft') {\n            this.action = this.action | UserAction_1.UserAction.Left;\n        }\n        if (e.key == 'ArrowUp') {\n            this.action = this.action | UserAction_1.UserAction.Up;\n        }\n        if (e.key == 'ArrowDown') {\n            this.action = this.action | UserAction_1.UserAction.Down;\n        }\n        if (e.key == ' ') {\n            this.action = this.action | UserAction_1.UserAction.Action;\n        }\n        if (e.key == 'Enter') {\n            this.action = this.action | UserAction_1.UserAction.Menu;\n        }\n        if (e.key == 'Backspace') {\n            this.action = this.action | UserAction_1.UserAction.Cancel;\n        }\n    }\n    keyup(e) {\n        //console.log('keyboard up ', e);\n        if (e.key == 'ArrowRight') {\n            this.action = this.action & ~UserAction_1.UserAction.Right;\n            this.action = this.action | UserAction_1.UserAction.RightPressed;\n        }\n        if (e.key == 'ArrowLeft') {\n            this.action = this.action & ~UserAction_1.UserAction.Left;\n            this.action = this.action | UserAction_1.UserAction.LeftPressed;\n        }\n        if (e.key == 'ArrowUp') {\n            this.action = this.action & ~UserAction_1.UserAction.Up;\n            this.action = this.action | UserAction_1.UserAction.UpPressed;\n        }\n        if (e.key == 'ArrowDown') {\n            this.action = this.action & ~UserAction_1.UserAction.Down;\n            this.action = this.action | UserAction_1.UserAction.DownPressed;\n        }\n        if (e.key == ' ') {\n            this.action = this.action & ~UserAction_1.UserAction.Action;\n            this.action = this.action | UserAction_1.UserAction.ActionPressed;\n        }\n        if (e.key == 'Enter') {\n            this.action = this.action & ~UserAction_1.UserAction.Menu;\n            this.action = this.action | UserAction_1.UserAction.MenuPressed;\n        }\n        if (e.key == 'Backspace') {\n            this.action = this.action & ~UserAction_1.UserAction.Cancel;\n            this.action = this.action | UserAction_1.UserAction.CancelPressed;\n        }\n    }\n    preUpdate(dt) {\n        // Always call `navigator.getGamepads()` inside of\n        // the game loop, not outside.\n        const gamepads = navigator.getGamepads();\n        for (const gamepad of gamepads) {\n            // Disregard empty slots.\n            if (!gamepad) {\n                continue;\n            }\n            //TODO capture state from game pads\n        }\n    }\n    postUpdate(dt) {\n        // reset press actions\n        this.action = this.action & ~UserAction_1.UserAction.LeftPressed;\n        this.action = this.action & ~UserAction_1.UserAction.RightPressed;\n        this.action = this.action & ~UserAction_1.UserAction.UpPressed;\n        this.action = this.action & ~UserAction_1.UserAction.DownPressed;\n        this.action = this.action & ~UserAction_1.UserAction.ActionPressed;\n        this.action = this.action & ~UserAction_1.UserAction.CancelPressed;\n        this.action = this.action & ~UserAction_1.UserAction.MenuPressed;\n    }\n    connectGamepad(e) {\n        console.log('✅ 🎮 A gamepad was connected:', e.gamepad);\n    }\n    disconnectGamepad(e) {\n        console.debug('Gamepad disconnected', e.gamepad);\n    }\n}\nexports.InputHandler = InputHandler;\n\n\n//# sourceURL=webpack://earthquest/./src/core/InputHandler.ts?");

/***/ }),

/***/ "./src/core/UserAction.ts":
/*!********************************!*\
  !*** ./src/core/UserAction.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UserAction = void 0;\n/**\n * User input action.\n */\nvar UserAction;\n(function (UserAction) {\n    UserAction[UserAction[\"None\"] = 0] = \"None\";\n    UserAction[UserAction[\"Right\"] = 1] = \"Right\";\n    UserAction[UserAction[\"Left\"] = 2] = \"Left\";\n    UserAction[UserAction[\"Up\"] = 4] = \"Up\";\n    UserAction[UserAction[\"Down\"] = 8] = \"Down\";\n    UserAction[UserAction[\"UpRight\"] = 5] = \"UpRight\";\n    UserAction[UserAction[\"UpLeft\"] = 6] = \"UpLeft\";\n    UserAction[UserAction[\"DownRight\"] = 9] = \"DownRight\";\n    UserAction[UserAction[\"DownLeft\"] = 10] = \"DownLeft\";\n    UserAction[UserAction[\"Menu\"] = 16] = \"Menu\";\n    UserAction[UserAction[\"Action\"] = 32] = \"Action\";\n    UserAction[UserAction[\"Cancel\"] = 64] = \"Cancel\";\n    // press actions. This happens when the buttons is released\n    // and reset for the next frame.\n    UserAction[UserAction[\"RightPressed\"] = 128] = \"RightPressed\";\n    UserAction[UserAction[\"LeftPressed\"] = 256] = \"LeftPressed\";\n    UserAction[UserAction[\"UpPressed\"] = 512] = \"UpPressed\";\n    UserAction[UserAction[\"DownPressed\"] = 1024] = \"DownPressed\";\n    UserAction[UserAction[\"MenuPressed\"] = 2048] = \"MenuPressed\";\n    UserAction[UserAction[\"ActionPressed\"] = 4096] = \"ActionPressed\";\n    UserAction[UserAction[\"CancelPressed\"] = 8192] = \"CancelPressed\";\n})(UserAction = exports.UserAction || (exports.UserAction = {}));\n\n\n//# sourceURL=webpack://earthquest/./src/core/UserAction.ts?");

/***/ }),

/***/ "./src/editor/Editor.ts":
/*!******************************!*\
  !*** ./src/editor/Editor.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Editor = void 0;\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\nclass Editor extends Component_1.Component {\n    constructor(eng, parentContainer) {\n        super(eng);\n        this.parentContainer = parentContainer;\n        this.buildHtml();\n    }\n    buildHtml() { }\n}\nexports.Editor = Editor;\n\n\n//# sourceURL=webpack://earthquest/./src/editor/Editor.ts?");

/***/ }),

/***/ "./src/environment/Ground.ts":
/*!***********************************!*\
  !*** ./src/environment/Ground.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Ground = void 0;\nconst Texture_1 = __webpack_require__(/*! ../graphics/Texture */ \"./src/graphics/Texture.ts\");\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\nconst IsometricTile_png_1 = __importDefault(__webpack_require__(/*! ../assets/IsometricTile.png */ \"./src/assets/IsometricTile.png\"));\nconst IsometricTile_json_1 = __importDefault(__webpack_require__(/*! ../assets/IsometricTile.json */ \"./src/assets/IsometricTile.json\"));\nconst SpriteBatchController_1 = __webpack_require__(/*! ../graphics/SpriteBatchController */ \"./src/graphics/SpriteBatchController.ts\");\nconst vec2_1 = __importDefault(__webpack_require__(/*! ../math/vec2 */ \"./src/math/vec2.ts\"));\n/**\n * The ground class is the cell environment the player interacts with. Cells are block that\n * that different tile components interact with. Think of it as the world tile components live in.\n * This class is driven by Tile image data and LevelData.\n */\nclass Ground extends Component_1.Component {\n    constructor(eng, levelData) {\n        super(eng);\n        this._levelData = levelData;\n        this._spriteController = new SpriteBatchController_1.SpritBatchController(eng);\n    }\n    async initialize() {\n        const texture = new Texture_1.Texture(this.gl);\n        await texture.loadImage(IsometricTile_png_1.default);\n        this._spriteController.initialize(texture, IsometricTile_json_1.default);\n        console.debug(this._spriteController.getSpriteList());\n        this.buildLevel();\n    }\n    /**\n     * build the level from the level data\n     */\n    buildLevel() {\n        const scale = 2;\n        // loop over each height layer\n        for (let k = 0; k < this._levelData.cells.length; k++) {\n            // i is the columns that run from top right to bottom left\n            for (let i = 0; i < this._levelData.cells[k].length; i++) {\n                // j is the rows that run from top left to bottom right\n                for (let j = 0; j < this._levelData.cells[k][i].length; j++) {\n                    const cellId = this._levelData.ids[this._levelData.cells[k][i][j]];\n                    this._spriteController.activeSprite('tile_' + i + '_' + j + '_' + k);\n                    let spriteId = this.getCellType(i, j, k);\n                    this._spriteController.setSprite(spriteId);\n                    this._spriteController.scale(scale);\n                    const screen = this.eng.tileManger.toScreenLoc(i, j, k);\n                    this._spriteController.setSpritePosition(screen.x, screen.y, screen.z, screen.z);\n                }\n            }\n        }\n        this._spriteController.commitToBuffer();\n    }\n    /**\n     * Returns true if the cell is empty\n     * @param i\n     * @param j\n     * @param k\n     * @returns\n     */\n    isEmpty(i, j, k) {\n        try {\n            let typeIndex = this._levelData.cells[k][i][j] ?? 0;\n            return typeIndex == 0;\n        }\n        catch (e) {\n            //NOP\n        }\n        return true;\n    }\n    /**\n     * Gets the cells height by searching up and down until a tile is found\n     * @param i\n     * @param j\n     * @param k\n     * @returns\n     */\n    getCellHeight(i, j, k) {\n        let height = k;\n        try {\n            // if it is empty search down to zero\n            if (this.isEmpty(i, j, k) && k > 0) {\n                while (this.isEmpty(i, j, --k) && k > 0) {\n                    height = k;\n                }\n            }\n            else {\n                // else search up\n                while (!this.isEmpty(i, j, ++k)) {\n                    height = k;\n                }\n            }\n        }\n        catch (e) {\n            //NOP\n        }\n        return height;\n    }\n    /**\n     * Get the cell type. x y and z are int cells values\n     * @param i\n     * @param j\n     * @param k\n     */\n    getCellType(i, j, k) {\n        let type = 'empty';\n        try {\n            const typeIndex = this._levelData.cells[k][i][j] ?? 0;\n            type = this._levelData.ids[typeIndex] ?? 'empty';\n        }\n        catch (e) {\n            console.warn('invalid tile ' + i + ', ' + j + ',' + k);\n        }\n        return type;\n    }\n    /**\n     * Sets a cell type\n     * @param type The type of the cell\n     * @param i\n     * @param j\n     * @param k\n     */\n    setCellType(type, i, j, k) {\n        let index = 0;\n        const found = this._levelData.ids.find((t, i) => {\n            if (t == type) {\n                index = i;\n                return true;\n            }\n            else {\n                return false;\n            }\n        });\n        if (found) {\n            try {\n                this._levelData.cells[k][i][j] = index;\n                this._spriteController.activeSprite('tile_' + i + '_' + j + '_' + k);\n                this._spriteController.setSprite(found, true);\n            }\n            catch (e) {\n                console.warn('invalid tile ' + i + '_' + j + '_' + k);\n            }\n        }\n        else {\n            console.warn('cannot find cell type: ' + type);\n        }\n        return true;\n    }\n    /**\n     * Can the player access this tile\n     * @param x screen space\n     * @param y screen space\n     * @param z screen space\n     * @returns true if the player can access this cell\n     */\n    canAccessTile(tileComponent, i, j, k) {\n        let type = this.getCellType(i, j, k);\n        const height = this.getCellHeight(i, j, k);\n        // reset slop vector\n        this.eng.scene.player.slopVector = new vec2_1.default([0, 0]);\n        let AboveType = this.getCellType(i, j, k + 1);\n        if (AboveType == 'slop.left') {\n            console.debug('hit slop tile index: ' +\n                tileComponent.tileIndex.toString() +\n                ' tileComponent ');\n            if (tileComponent.tileIndex.x == i &&\n                tileComponent.tileIndex.y == j + 1) {\n                console.debug('facing sloping vector');\n                this.eng.scene.player.slopVector = new vec2_1.default([0, 0.1]);\n            }\n        }\n        // check tile height.\n        if (tileComponent.tileHeightIndex != height) {\n            return false;\n        }\n        // check for collision\n        if (type != 'tree' && type != 'empty') {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * When the player enters a cell\n     * @param x screen space\n     * @param y screen space\n     * @param z screen space\n     */\n    onEnter(tileComponent, i, j, k) {\n        let type = this.getCellType(i, j, k);\n        if (!type.includes('slop')) {\n            this.setCellType('block.highlight', i, j, k);\n        }\n        else {\n            console.debug('tile error ' + i + ', ' + j + ', ' + k);\n        }\n    }\n    /**\n     * Fired when a player exits a cell\n     * @param x\n     * @param y\n     * @param z\n     */\n    onExit(tileComponent, i, j, k) {\n        const type = this.getCellType(i, j, k);\n        if (type == 'block.highlight') {\n            this.setCellType('block', i, j, k);\n        }\n    }\n    /**\n     * Update the sprite controller and actions\n     * @param dt\n     */\n    update(dt) {\n        this._spriteController.update(dt);\n    }\n}\nexports.Ground = Ground;\n\n\n//# sourceURL=webpack://earthquest/./src/environment/Ground.ts?");

/***/ }),

/***/ "./src/graphics/GlBuffer.ts":
/*!**********************************!*\
  !*** ./src/graphics/GlBuffer.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GlBuffer = void 0;\n/**\n * Creates a buffer of a quad.\n */\nclass GlBuffer {\n    /** were the buffers created */\n    get buffersCreated() {\n        return this.vertArrayBuffer != 0;\n    }\n    /**\n     * Constructor\n     * @param {WebGL2RenderingContext} gl\n     */\n    constructor(gl) {\n        this.gl = gl;\n        this.vertBuffer = 0;\n        this.indexBuffer = 0;\n        this.indexCount = 0;\n        this.vertArrayBuffer = 0;\n    }\n    /**\n     * Creates the buffers\n     */\n    createBuffer() {\n        this.dispose();\n        // create vert array buffer\n        this.vertArrayBuffer = this.gl.createVertexArray();\n        // position buffer\n        this.vertBuffer = this.gl.createBuffer();\n        // index buffer\n        this.indexBuffer = this.gl.createBuffer();\n    }\n    /**\n     * Create the buffer\n     * @param quads A array of quads that will be added to this buffer\n     * @param isStatic Is this buffer static\n     * @returns\n     */\n    setBuffers(quads, isStatic = true, bufferIndex = 0) {\n        // Now create an array of positions for the square.\n        const verts = [];\n        const index = [];\n        // check if we have buffer\n        if (!this.vertBuffer || !this.indexBuffer) {\n            this.createBuffer();\n        }\n        // reset counters\n        this.indexCount = 0;\n        //               Building a quad\n        //\n        //    Pos[-1, 1]                Texture [0,1]\n        //   p0---------p1 (max)      p0 ---------p1 (max)\n        //   |        / |              |        / |\n        //   |      /   |              |      /   |\n        //   |    /     |              |    /     |\n        //   |  /       |              |  /       |\n        //   p3---------p2             p3---------p2\n        //  (min)                      (min)\n        //\n        let vertCount = 0;\n        quads.forEach((quad) => {\n            verts.push(quad.min[0], quad.min[1], quad.min[2]);\n            verts.push(quad.minTex[0], quad.maxTex[1]);\n            verts.push(quad.max[0], quad.min[1], quad.min[2]);\n            verts.push(quad.maxTex[0], quad.maxTex[1]);\n            verts.push(quad.max[0], quad.max[1], quad.max[2]);\n            verts.push(quad.maxTex[0], quad.minTex[1]);\n            verts.push(quad.min[0], quad.max[1], quad.max[2]);\n            verts.push(quad.minTex[0], quad.minTex[1]);\n            index.push(vertCount + 0);\n            index.push(vertCount + 1);\n            index.push(vertCount + 3);\n            index.push(vertCount + 1);\n            index.push(vertCount + 2);\n            index.push(vertCount + 3);\n            vertCount += 4;\n        });\n        // save the index count for rendering\n        this.indexCount = index.length;\n        // bind the array buffer\n        this.gl.bindVertexArray(this.vertArrayBuffer);\n        // Create a buffer for positions.\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(verts), isStatic ? this.gl.STATIC_DRAW : this.gl.DYNAMIC_DRAW, bufferIndex);\n        // in order for this to work the vertex shader will\n        // need to have position\n        //  vec3 aPos;\n        //  vec2 aTex;\n        //\n        const positionAttribute = 0;\n        const textureAttribute = 1;\n        // Tell WebGL how to pull out the positions from the position\n        // buffer into the vertexPosition attribute\n        {\n            const numComponents = 3; // position x, y, z\n            const type = this.gl.FLOAT;\n            const normalize = false;\n            const stride = 5 * 4; // pos(x,y,x) + tex(u,v) * 4 byte float\n            const offset = 0;\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertBuffer);\n            this.gl.vertexAttribPointer(positionAttribute, numComponents, type, normalize, stride, offset);\n            this.gl.enableVertexAttribArray(positionAttribute);\n        }\n        // Tell WebGL how to pull out the texture coordinates from\n        // the texture coordinate buffer into the textureCoord attribute.\n        {\n            const numComponents = 2;\n            const type = this.gl.FLOAT;\n            const normalize = false;\n            const stride = 5 * 4; // pos(x,y,x) + tex(u,v) * 4 byte float\n            const offset = 3 * 4; // start after the position\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertBuffer);\n            this.gl.vertexAttribPointer(textureAttribute, numComponents, type, normalize, stride, offset);\n            this.gl.enableVertexAttribArray(textureAttribute);\n        }\n        // index buffer\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(index), isStatic ? this.gl.STATIC_DRAW : this.gl.DYNAMIC_DRAW, bufferIndex);\n    }\n    /**\n     * Enable vertex attributes and element buffer\n     */\n    enable() {\n        if (!this.buffersCreated) {\n            console.error('buffers were not created!');\n        }\n        else {\n            // the vertex and index buffer are grouped with this so we only need\n            // to enable this array buffer\n            this.gl.bindVertexArray(this.vertArrayBuffer);\n        }\n    }\n    /**\n     * Clean up buffer\n     */\n    dispose() {\n        if (this.vertBuffer) {\n            this.gl.deleteBuffer(this.vertBuffer);\n            this.vertBuffer = 0;\n        }\n        if (this.indexBuffer) {\n            this.gl.deleteBuffer(this.indexBuffer);\n            this.indexBuffer = 0;\n        }\n        if (this.vertArrayBuffer) {\n            this.gl.deleteVertexArray(this.vertArrayBuffer);\n        }\n    }\n    draw() { }\n}\nexports.GlBuffer = GlBuffer;\n\n\n//# sourceURL=webpack://earthquest/./src/graphics/GlBuffer.ts?");

/***/ }),

/***/ "./src/graphics/ShaderController.ts":
/*!******************************************!*\
  !*** ./src/graphics/ShaderController.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ShaderController = void 0;\n/**\n * Manages one shader program\n */\nclass ShaderController {\n    /**\n     * Creates the shader controller\n     * @param {WebGL2RenderingContext} gl GL Context\n     * @param {string} shaderName The name of the shader. This is just a way to id different shader for debugging\n     */\n    constructor(gl, shaderName) {\n        this.gl = gl;\n        this.shaderName = shaderName;\n    }\n    /**\n     * Initialize a shader program, so WebGL knows how to draw our data\n     * @param {*} vsSource\n     * @param {*} fsSource\n     * @returns\n     */\n    initShaderProgram(vsSource, fsSource) {\n        const vertexShader = this._loadShader(this.gl.VERTEX_SHADER, vsSource);\n        const fragmentShader = this._loadShader(this.gl.FRAGMENT_SHADER, fsSource);\n        // Create the shader program\n        this.shaderProgram = this.gl.createProgram();\n        this.gl.attachShader(this.shaderProgram, vertexShader);\n        this.gl.attachShader(this.shaderProgram, fragmentShader);\n        // set the attribute locations\n        // not these must exist in the shader so that\n        // the buffer maps to the correct locations.\n        this.gl.bindAttribLocation(this.shaderProgram, 0, 'aPos');\n        this.gl.bindAttribLocation(this.shaderProgram, 1, 'aTex');\n        // link the program\n        this.gl.linkProgram(this.shaderProgram);\n        // needed for get program parameter\n        this.gl.useProgram(this.shaderProgram);\n        // If creating the shader program failed, alert\n        if (!this.gl.getProgramParameter(this.shaderProgram, this.gl.LINK_STATUS)) {\n            console.error(`Unable to initialize the shader program: ${this.gl.getProgramInfoLog(this.shaderProgram)}`);\n        }\n    }\n    /**\n     * Get a shader attribute location\n     * @param {string} name Name of the attribute\n     * @return {number} The attribute location\n     */\n    getAttribute(name) {\n        this.gl.useProgram(this.shaderProgram);\n        const loc = this.gl.getAttribLocation(this.shaderProgram, name);\n        if (loc === null) {\n            console.error('can not find attribute: ' + name + ' in shader ' + this.shaderName);\n        }\n        return loc;\n    }\n    /**\n     * Get a shader attribute location\n     * @param {string} name Name of the attribute\n     * @return {number} The attribute location\n     */\n    getUniform(name) {\n        this.gl.useProgram(this.shaderProgram);\n        const loc = this.gl.getUniformLocation(this.shaderProgram, name);\n        if (loc === null) {\n            console.error('can not find uniform: ' + name + ' in shader ' + this.shaderName);\n        }\n        return loc;\n    }\n    /**\n     * Sets a uniform for a vec4\n     * @param loc\n     * @param value\n     */\n    setVec4(loc, value) {\n        this.gl.uniform4f(loc, value.x, value.y, value.z, value.w);\n    }\n    /**\n     * Set the mat 4\n     * @param loc\n     * @param value\n     */\n    setMat4(loc, value) {\n        this.gl.uniformMatrix4fv(loc, false, value.getValues());\n    }\n    /**\n     * Sets a uniform for a vec3\n     * @param loc\n     * @param value\n     */\n    setVec3(loc, value) {\n        this.gl.uniform3f(loc, value.x, value.y, value.z);\n    }\n    /**\n     * Enable the shader\n     */\n    enable() {\n        // Tell WebGL to use our program when drawing\n        this.gl.useProgram(this.shaderProgram);\n    }\n    /**\n     * creates a shader of the given type, uploads the source and\n     * compiles it.\n     * @param {*} gl\n     * @param {*} type\n     * @param {*} source\n     * @returns\n     */\n    _loadShader(type, source) {\n        const shader = this.gl.createShader(type);\n        // Send the source to the shader object\n        this.gl.shaderSource(shader, source);\n        // Compile the shader program\n        this.gl.compileShader(shader);\n        // See if it compiled successfully\n        if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\n            const typeString = type == this.gl.VERTEX_SHADER ? 'vertex' : 'fragment';\n            console.error(`An error occurred compiling the ${typeString} shaders in ${this.shaderName}: ${this.gl.getShaderInfoLog(shader)}`);\n            this.gl.deleteShader(shader);\n            return null;\n        }\n        return shader;\n    }\n}\nexports.ShaderController = ShaderController;\n\n\n//# sourceURL=webpack://earthquest/./src/graphics/ShaderController.ts?");

/***/ }),

/***/ "./src/graphics/Sprite.ts":
/*!********************************!*\
  !*** ./src/graphics/Sprite.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Sprite = exports.SpriteFlip = void 0;\nconst mat2_1 = __importDefault(__webpack_require__(/*! ../math/mat2 */ \"./src/math/mat2.ts\"));\nconst vec2_1 = __importDefault(__webpack_require__(/*! ../math/vec2 */ \"./src/math/vec2.ts\"));\nconst MathConst = __importStar(__webpack_require__(/*! ../math/constants */ \"./src/math/constants.ts\"));\nvar SpriteFlip;\n(function (SpriteFlip) {\n    SpriteFlip[SpriteFlip[\"None\"] = 0] = \"None\";\n    SpriteFlip[SpriteFlip[\"XFlip\"] = 1] = \"XFlip\";\n    SpriteFlip[SpriteFlip[\"YFlip\"] = 2] = \"YFlip\";\n    SpriteFlip[SpriteFlip[\"Both\"] = 3] = \"Both\";\n})(SpriteFlip = exports.SpriteFlip || (exports.SpriteFlip = {}));\n/**\n * This is a utility class that is used to create a IQuadModel that\n * is used to create a GLBuffer.\n */\nclass Sprite {\n    get tag() {\n        return this._tag;\n    }\n    /**\n     * Get the position in pixels.\n     */\n    get position() {\n        return this._position;\n    }\n    get lowerDepth() {\n        return this._lowerDepth;\n    }\n    get upperDepth() {\n        return this._upperDepth;\n    }\n    get rotation() {\n        return this._spriteRotate;\n    }\n    getSpriteWidth() {\n        return this._spriteLoc.width * this._scale;\n    }\n    getSpriteHeight() {\n        return this._spriteLoc.height * this._scale;\n    }\n    get quad() {\n        return this._quad;\n    }\n    constructor(tag) {\n        this._tag = tag;\n        this.initialize({ width: 0, height: 0 }, 800, 600);\n    }\n    /**\n     * Setup the sprite with a sprite sheet and screen size. All calculations are done in\n     * pixels.\n     * @param spriteSheet\n     * @param screenWidth\n     * @param screenHeight\n     */\n    initialize(spriteSheetSize, screenWidth, screenHeight) {\n        this._quad = {\n            min: [-1, -1, -1],\n            max: [1, 1, 1],\n            minTex: [0, 0],\n            maxTex: [1, 1],\n        };\n        this._position = { x: 0, y: 0 };\n        this._spriteLoc = { x: 0, y: 0, width: 0, height: 0 };\n        this._spriteSheetSize = {\n            width: spriteSheetSize.width,\n            height: spriteSheetSize.height,\n        };\n        this._screenSize = { width: screenWidth, height: screenHeight };\n        this._spriteFlip = SpriteFlip.None;\n        this._spriteRotate = 0;\n        this._scale = 1.0;\n        this._lowerDepth = 0;\n        this._upperDepth = 0;\n        this._positionOffset = { x: 0, y: 0 };\n    }\n    /**\n     * This function is used to select a sprite from the sprite sheet\n     */\n    setSprite(opt) {\n        this._spriteLoc.x = opt.pixelXOffset;\n        this._spriteLoc.y = opt.pixelYOffset;\n        this._spriteLoc.width = opt.spriteWidth;\n        this._spriteLoc.height = opt.spriteHeight;\n        this.calculateQuad();\n    }\n    setSpriteFlip(spriteFlip) {\n        this._spriteFlip = spriteFlip ?? SpriteFlip.None;\n        this.calculateQuad();\n    }\n    setSpriteScale(scale = 1.0) {\n        this._scale = scale;\n        this.calculateQuad();\n    }\n    /**\n     * Sets an offset for the position based on what the image is.\n     * This allows sprites to be position in the cells correctly.\n     * @param x in pixels\n     * @param y in pixels\n     */\n    setSpritePositionOffset(x, y) {\n        this._positionOffset.x = x;\n        this._positionOffset.y = y;\n    }\n    /**\n     * Set the rotate of the sprite\n     * @param rotation rotation in degrees\n     */\n    setSpriteRotate(rotation = 1.0) {\n        this._spriteRotate = rotation;\n        this.calculateQuad();\n    }\n    /**\n     * Set  x and y in pixels and depth in screen space\n     * @param x\n     * @param y\n     * @param depth screen space [-1, 1]. 1 is far -1 is close\n     */\n    setPosition(x, y, lowerDepth, upperDepth) {\n        this._position.x = x;\n        this._position.y = y;\n        if (lowerDepth != undefined) {\n            this._lowerDepth = lowerDepth;\n        }\n        if (upperDepth != undefined) {\n            this._upperDepth = upperDepth;\n        }\n        this.calculateQuad();\n    }\n    /**\n     * Builds a IQuadModel\n     */\n    calculateQuad() {\n        const sheetW = this._spriteSheetSize.width;\n        const sheetH = this._spriteSheetSize.height;\n        let minX = this._spriteLoc.x / sheetW;\n        let minY = 1.0 - this._spriteLoc.y / sheetH;\n        let maxX = (this._spriteLoc.x + this._spriteLoc.width) / sheetW;\n        let maxY = 1.0 - (this._spriteLoc.y + this._spriteLoc.height) / sheetH;\n        if (this._spriteFlip == SpriteFlip.XFlip) {\n            this._quad.minTex = [maxX, minY];\n            this._quad.maxTex = [minX, maxY];\n        }\n        else if (this._spriteFlip == SpriteFlip.YFlip) {\n            this._quad.minTex = [minX, maxY];\n            this._quad.maxTex = [maxX, minY];\n        }\n        else if (this._spriteFlip == SpriteFlip.Both) {\n            this._quad.minTex = [maxX, maxY];\n            this._quad.maxTex = [minX, minY];\n        }\n        else {\n            this._quad.minTex = [minX, minY];\n            this._quad.maxTex = [maxX, maxY];\n        }\n        // convert to screen space, min is the top left corner\n        this._quad.min = [\n            this._position.x + this._positionOffset.x,\n            this._position.y + this._positionOffset.y,\n            this._lowerDepth,\n        ];\n        const spriteWidth = this._spriteLoc.width * this._scale;\n        const spriteHeight = this._spriteLoc.height * this._scale;\n        // max is the bottom right\n        this._quad.max = [\n            this._quad.min[0] + spriteWidth,\n            this._quad.min[1] + spriteHeight,\n            this._upperDepth,\n        ];\n        // if we have some rotation then apply it\n        if (!MathConst.equals(this._spriteRotate, 0.0)) {\n            let minTmp = new vec2_1.default([-this._quad.min[0], -this._quad.min[1]]);\n            let maxTmp = new vec2_1.default([-this._quad.max[0], -this._quad.max[1]]);\n            const rotation = new mat2_1.default();\n            rotation.setIdentity();\n            rotation.rotate(MathConst.toRadian(this._spriteRotate));\n            minTmp.multiplyMat2(rotation);\n            maxTmp.multiplyMat2(rotation);\n            this._quad.min[0] = minTmp.x + this._quad.min[0];\n            this._quad.min[1] = minTmp.y + this._quad.min[1];\n            this._quad.max[0] = maxTmp.x + this._quad.max[0];\n            this._quad.max[1] = maxTmp.y + this._quad.max[1];\n        }\n    }\n}\nexports.Sprite = Sprite;\n\n\n//# sourceURL=webpack://earthquest/./src/graphics/Sprite.ts?");

/***/ }),

/***/ "./src/graphics/SpriteBaseController.ts":
/*!**********************************************!*\
  !*** ./src/graphics/SpriteBaseController.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SpritBaseController = void 0;\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\nconst GlBuffer_1 = __webpack_require__(/*! ./GlBuffer */ \"./src/graphics/GlBuffer.ts\");\nconst mat4_1 = __importDefault(__webpack_require__(/*! ../math/mat4 */ \"./src/math/mat4.ts\"));\n/**\n * This class controls a sprite's position and scale\n * given a sprite sheet and some json data that holds the\n * sprite offset and size in pixels.\n */\nclass SpritBaseController extends Component_1.Component {\n    get rotation() {\n        return this.sprite.rotation;\n    }\n    get buffer() {\n        return this._buffer;\n    }\n    get selectedSpriteIndex() {\n        return this._selectedSpriteIndex;\n    }\n    get selectedSpriteId() {\n        return this._selectedSpriteId;\n    }\n    get spriteCount() {\n        return this._spriteData.length;\n    }\n    constructor(eng) {\n        super(eng);\n        this._spriteData = [];\n        this._selectedSpriteIndex = 0;\n    }\n    /**\n     * setup the sprite\n     * @param texture\n     * @param spriteData\n     */\n    initialize(texture, spriteData, defaultSprite) {\n        // save the data\n        this._spriteData = spriteData;\n        // create the gl buffers for this sprite\n        this._buffer = new GlBuffer_1.GlBuffer(this.gl);\n        // setup the shader for the sprite\n        this._spriteTexture = texture;\n    }\n    /**\n     * Gets the list of all the sprites\n     * @returns\n     */\n    getSpriteList() {\n        const idList = [];\n        this._spriteData.forEach((sprite) => idList.push(sprite.id));\n        return idList;\n    }\n    /**\n     * Sets the sprites position\n     * @param x in screen pixels\n     * @param y in screen pixels\n     * @param scale multiplied by the sprite width and height\n     * @param depth is depth buffer space (-1 to 1) 1 is far -1 is near\n     */\n    setSpritePosition(x, y, lowerDepth, upperDepth, commitToBuffer) {\n        this.sprite.setPosition(x, y, lowerDepth, upperDepth);\n        if (commitToBuffer) {\n            this.commitToBuffer();\n        }\n    }\n    scale(scale) {\n        this.sprite.setSpriteScale(scale);\n    }\n    flip(flipDirection) {\n        this.sprite.setSpriteFlip(flipDirection);\n    }\n    rotate(angle) {\n        this.sprite.setSpriteRotate(angle);\n    }\n    setFlip(flip, commitToBuffer) {\n        this.sprite.setSpriteFlip(flip);\n        if (commitToBuffer) {\n            this.commitToBuffer();\n        }\n    }\n    /**\n     * Select a sprite\n     * @param id the id in the sprite sheet\n     */\n    setSprite(id, commitToBuffer) {\n        // find the sprite of a given id\n        // if id is an number clamp the rang\n        if (typeof id === 'number') {\n            if (id >= this._spriteData.length) {\n                id = this._spriteData.length - 1;\n            }\n            else if (id < 0) {\n                id = 0;\n            }\n        }\n        let found = false;\n        for (let i = 0; i < this._spriteData.length; i++) {\n            const sprite = this._spriteData[i];\n            // does the id match or if the id is null just pick the first one or if id is a\n            // number does the index match\n            if (!id || sprite.id === id || i === id) {\n                this._selectedSpriteIndex = i;\n                this._selectedSpriteId = sprite.id;\n                const xOffset = sprite.offset ? sprite.offset[0] : 0;\n                const yOffset = sprite.offset ? sprite.offset[1] : 0;\n                this.sprite.setSpritePositionOffset(xOffset, yOffset);\n                this.sprite.setSprite({\n                    pixelXOffset: sprite.loc[0],\n                    pixelYOffset: sprite.loc[1],\n                    spriteWidth: sprite.loc[2],\n                    spriteHeight: sprite.loc[3],\n                });\n                if (commitToBuffer) {\n                    this.commitToBuffer();\n                }\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            console.error('cannot find sprite ' + id);\n        }\n    }\n    /**\n     * Calculates a projection\n     * @returns\n     */\n    calculateProjection() {\n        return mat4_1.default.orthographic(0, this.eng.width, 0, this.eng.height, 1, -1);\n    }\n    /**\n     * Draw the sprite\n     * @param dt\n     */\n    update(dt) {\n        if (!this._buffer.buffersCreated) {\n            console.error('buffers are not created. Call commitToBuffers() first.');\n        }\n        else {\n            this._buffer.enable();\n            this.eng.spritePerspectiveShader.setSpriteSheet(this._spriteTexture);\n            this.eng.spritePerspectiveShader.enable();\n            this.eng.spritePerspectiveShader.setProj(this.calculateProjection());\n            this.render();\n        }\n    }\n}\nexports.SpritBaseController = SpritBaseController;\n\n\n//# sourceURL=webpack://earthquest/./src/graphics/SpriteBaseController.ts?");

/***/ }),

/***/ "./src/graphics/SpriteBatchController.ts":
/*!***********************************************!*\
  !*** ./src/graphics/SpriteBatchController.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SpritBatchController = void 0;\nconst Sprite_1 = __webpack_require__(/*! ../graphics/Sprite */ \"./src/graphics/Sprite.ts\");\nconst SpriteBaseController_1 = __webpack_require__(/*! ./SpriteBaseController */ \"./src/graphics/SpriteBaseController.ts\");\n/**\n * This class controls a sprite's position and scale\n * given a sprite sheet and some json data that holds the\n * sprite offset and size in pixels.\n */\nclass SpritBatchController extends SpriteBaseController_1.SpritBaseController {\n    get sprite() {\n        return this.getSprite(this._activeSprite);\n    }\n    get selectedSpriteIndex() {\n        return this._selectedSpriteIndex;\n    }\n    get spriteCount() {\n        return this._spriteData.length;\n    }\n    constructor(eng) {\n        super(eng);\n        this._sprites = new Map();\n    }\n    /**\n     * setup the sprite\n     * @param texture\n     * @param spriteData\n     */\n    initialize(texture, spriteData, defaultSprite) {\n        super.initialize(texture, spriteData, defaultSprite);\n    }\n    /**\n     * A way of keeping track of our sprites\n     * @param id\n     * @returns\n     */\n    getSprite(id) {\n        let sprite = this._sprites.get(id);\n        if (!this._sprites.has(id)) {\n            // create new sprite and initialize it\n            sprite = new Sprite_1.Sprite(id);\n            sprite.initialize({\n                width: this._spriteTexture.width,\n                height: this._spriteTexture.height,\n            }, this.gl.canvas.width, this.gl.canvas.height);\n            this._sprites.set(id, sprite);\n        }\n        return sprite;\n    }\n    clearAllSprites() {\n        this._sprites.clear();\n    }\n    activeSprite(spriteId) {\n        this._activeSprite = spriteId;\n    }\n    commitToBuffer() {\n        const quads = [];\n        this._sprites.forEach((sprite) => {\n            quads.push(sprite.quad);\n        });\n        // update the buffer\n        this._buffer.setBuffers(quads, false);\n    }\n    render() {\n        const vertexCount = this._buffer.indexCount;\n        const type = this.gl.UNSIGNED_SHORT;\n        const offset = 0;\n        this.gl.drawElements(this.gl.TRIANGLES, vertexCount, type, offset);\n    }\n}\nexports.SpritBatchController = SpritBatchController;\n\n\n//# sourceURL=webpack://earthquest/./src/graphics/SpriteBatchController.ts?");

/***/ }),

/***/ "./src/graphics/SpriteController.ts":
/*!******************************************!*\
  !*** ./src/graphics/SpriteController.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SpritController = void 0;\nconst Sprite_1 = __webpack_require__(/*! ../graphics/Sprite */ \"./src/graphics/Sprite.ts\");\nconst SpriteBaseController_1 = __webpack_require__(/*! ./SpriteBaseController */ \"./src/graphics/SpriteBaseController.ts\");\n/**\n * This class controls a sprite's position and scale\n * given a sprite sheet and some json data that holds the\n * sprite offset and size in pixels.\n */\nclass SpritController extends SpriteBaseController_1.SpritBaseController {\n    get sprite() {\n        return this._sprite;\n    }\n    constructor(eng) {\n        super(eng);\n        this._sprite = new Sprite_1.Sprite();\n    }\n    /**\n     * setup the sprite\n     * @param texture\n     * @param spriteData\n     */\n    initialize(texture, spriteData, defaultSprite) {\n        super.initialize(texture, spriteData, defaultSprite);\n        // set up the sprite\n        this.sprite.initialize({ width: texture.width, height: texture.height }, this.gl.canvas.width, this.gl.canvas.height);\n        // set a default sprite\n        this.setSprite(defaultSprite);\n        // set the position of the sprite on the screen\n        this.sprite.setPosition(0, 0, 0);\n        this.commitToBuffer();\n    }\n    commitToBuffer() {\n        this._buffer.setBuffers([this._sprite.quad], false);\n    }\n    render() {\n        const vertexCount = this._buffer.indexCount;\n        const type = this.gl.UNSIGNED_SHORT;\n        const offset = 0;\n        this.gl.drawElements(this.gl.TRIANGLES, vertexCount, type, offset);\n    }\n}\nexports.SpritController = SpritController;\n\n\n//# sourceURL=webpack://earthquest/./src/graphics/SpriteController.ts?");

/***/ }),

/***/ "./src/graphics/TextController.ts":
/*!****************************************!*\
  !*** ./src/graphics/TextController.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TextController = void 0;\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\nconst GlBuffer_1 = __webpack_require__(/*! ./GlBuffer */ \"./src/graphics/GlBuffer.ts\");\nclass TextController extends Component_1.Component {\n    constructor(eng, fontData) {\n        super(eng);\n        this.fontData = fontData;\n        // Create a new buffer\n        this.buffer = new GlBuffer_1.GlBuffer(this.gl);\n    }\n    /**\n     * Initialize a new text block\n     * @param block Text properties\n     * @param lineHeight The height of the tallest character in pixels\n     */\n    initialize(block, lineHeight, screenWidth, screenHeight) {\n        const originX = block.position.x;\n        const originY = block.position.y - lineHeight;\n        let offsetX = originX;\n        let offsetY = originY;\n        let xpos1 = offsetX;\n        let ypos1 = offsetY;\n        let xpos2 = offsetX;\n        let ypos2 = offsetY;\n        this.color = block.color;\n        const zpos = block.depth;\n        let charCount = 0;\n        const text = block.text;\n        const quads = [];\n        // loop over all the characters in the text block\n        // and create geometry for them.\n        for (let i = 0; i < text.length; i++) {\n            // get the character\n            let ch = text.charAt(i);\n            // check for new line and out of range\n            if (ch == '\\n') {\n                offsetY -= lineHeight;\n                offsetX = originX;\n                continue;\n            }\n            else if (ch < ' ' || ch > '~') {\n                ch = '?';\n            }\n            const font = this.fontData.find((value) => value.ch == ch);\n            if (!font) {\n                console.warn(\"Don't have data for ch: \" + ch);\n            }\n            xpos1 = offsetX + block.scale * font.bearingX;\n            ypos1 = offsetY - block.scale * (font.sizeY - font.bearingY); // bottom of the letter\n            xpos2 = offsetX + block.scale * font.advance;\n            ypos2 = offsetY + block.scale * font.bearingY; // top of the letter\n            // set for the next letter\n            offsetX = xpos2;\n            const tu1 = font.u1;\n            const tv1 = 1 - font.v2;\n            const tu2 = font.u2;\n            const tv2 = 1 - font.v1;\n            const quad = {\n                min: [xpos1 / screenWidth, ypos1 / screenHeight, zpos],\n                max: [xpos2 / screenWidth, ypos2 / screenHeight, zpos],\n                minTex: [tu1, tv2],\n                maxTex: [tu2, tv1],\n            };\n            charCount++;\n            quads.push(quad);\n        }\n        this.buffer.setBuffers(quads, false);\n    }\n    /**\n     * Updates the text animations.\n     * @param {float} dt Delta time in ms\n     */\n    update(dt) {\n        // enable the buffer\n        this.buffer.enable();\n        {\n            const vertexCount = this.buffer.indexCount;\n            const type = this.gl.UNSIGNED_SHORT;\n            const offset = 0;\n            this.gl.drawElements(this.gl.TRIANGLES, vertexCount, type, offset);\n        }\n    }\n}\nexports.TextController = TextController;\n\n\n//# sourceURL=webpack://earthquest/./src/graphics/TextController.ts?");

/***/ }),

/***/ "./src/graphics/Texture.ts":
/*!*********************************!*\
  !*** ./src/graphics/Texture.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Texture = void 0;\n/**\n * OpenGL texture\n */\nclass Texture {\n    constructor(gl) {\n        this.gl = gl;\n        this.glTexture = 0;\n    }\n    /**\n     * Enable this texture, activate the texture and set the uniform for the shader\n     */\n    enable(uniformIndex, slot = 0, activeTexture = this.gl.TEXTURE0) {\n        // Tell WebGL we want to affect texture unit\n        this.gl.activeTexture(activeTexture);\n        // Bind the texture to texture unit 0\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.glTexture);\n        // Tell the shader we bound the texture to texture unit\n        this.gl.uniform1i(uniformIndex, slot);\n    }\n    async loadImage(imagePath) {\n        return new Promise((resolve, reject) => {\n            this.texturePath = imagePath;\n            this.glTexture = this.gl.createTexture();\n            this.gl.bindTexture(this.gl.TEXTURE_2D, this.glTexture);\n            // Because images have to be download over the internet\n            // they might take a moment until they are ready.\n            // Until then put a single pixel in the texture so we can\n            // use it immediately. When the image has finished downloading\n            // we'll update the texture with the contents of the image.\n            const level = 0;\n            const internalFormat = this.gl.RGBA;\n            const width = 1;\n            const height = 1;\n            const border = 0;\n            const srcFormat = this.gl.RGBA;\n            const srcType = this.gl.UNSIGNED_BYTE;\n            const pixel = new Uint8Array([0, 0, 255, 255]); // opaque blue\n            this.gl.texImage2D(this.gl.TEXTURE_2D, level, internalFormat, width, height, border, srcFormat, srcType, pixel);\n            const image = new Image();\n            image.onload = () => {\n                this.gl.bindTexture(this.gl.TEXTURE_2D, this.glTexture);\n                this.width = image.width;\n                this.height = image.height;\n                this.gl.texImage2D(this.gl.TEXTURE_2D, level, internalFormat, srcFormat, srcType, image);\n                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.MIRRORED_REPEAT);\n                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.MIRRORED_REPEAT);\n                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.NEAREST);\n                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.NEAREST);\n                this.gl.generateMipmap(this.gl.TEXTURE_2D);\n                return resolve();\n            };\n            image.onerror = (event) => {\n                console.error(event);\n                return reject();\n            };\n            image.src = imagePath;\n        });\n    }\n    isPowerOf2(value) {\n        return (value & (value - 1)) == 0;\n    }\n}\nexports.Texture = Texture;\n\n\n//# sourceURL=webpack://earthquest/./src/graphics/Texture.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst CanvasController_1 = __webpack_require__(/*! ./core/CanvasController */ \"./src/core/CanvasController.ts\");\nconst Engine_1 = __webpack_require__(/*! ./core/Engine */ \"./src/core/Engine.ts\");\n__webpack_require__(/*! ./css/canvas.css */ \"./src/css/canvas.css\");\n/**\n * Create the only instance of a canvas controller\n */\nconst canvas = new CanvasController_1.CanvasController(onResize);\nconst engine = new Engine_1.Engine(canvas.gl);\n/**\n * Handle resize\n * @param width\n * @param height\n */\nfunction onResize(width, height) {\n    engine.resize(width, height);\n}\n/** time tracking variables */\nlet previousTimeStamp;\nfunction step(timestamp) {\n    // save the start time\n    if (previousTimeStamp === undefined) {\n        previousTimeStamp = timestamp;\n    }\n    // calculate the elapsed\n    const elapsed = timestamp - previousTimeStamp;\n    // update the scene\n    engine.update(elapsed);\n    // request a new frame\n    previousTimeStamp = timestamp;\n    window.requestAnimationFrame(step);\n}\n/**\n * Start the engine then request and animation frame\n */\nengine\n    .initialize()\n    .then(() => {\n    // request the first frame\n    window.requestAnimationFrame(step);\n})\n    .catch((e) => {\n    console.error('Error initializing ', e);\n});\n// add the canvas to the body\ndocument.body.appendChild(canvas.element());\n\n\n//# sourceURL=webpack://earthquest/./src/index.ts?");

/***/ }),

/***/ "./src/math/Curve.ts":
/*!***************************!*\
  !*** ./src/math/Curve.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Curve = exports.CurveType = void 0;\nvar CurveType;\n(function (CurveType) {\n    CurveType[CurveType[\"discreet\"] = 0] = \"discreet\";\n    CurveType[CurveType[\"linear\"] = 1] = \"linear\";\n})(CurveType = exports.CurveType || (exports.CurveType = {}));\n/**\n * Class used to create an animation.\n */\nclass Curve {\n    isRunning() {\n        return this._running;\n    }\n    getValue() {\n        return this._position;\n    }\n    getTime() {\n        return this._time;\n    }\n    isDone() {\n        return this._isDone;\n    }\n    constructor() {\n        this._points = [];\n        this._point0 = 0;\n        this._point1 = 1;\n        this._position = 0;\n        this._time = 0;\n        this._reverse = false;\n        this._pingPong = false;\n        this._type = CurveType.discreet;\n        this._isDone = false;\n    }\n    start(restart) {\n        if (restart) {\n            this._time = 0;\n            this._position = 0;\n            this._isDone = false;\n            // if there are points use them\n            if (this._points.length > 0) {\n                // handle reverse\n                if (this._reverse) {\n                    this._time = this._points[this._points.length - 1].t;\n                    this._position = this._points[this._points.length - 1].p;\n                }\n                else {\n                    this._time = this._points[0].t;\n                    this._position = this._points[0].p;\n                }\n            }\n        }\n        this._running = true;\n        return this;\n    }\n    /**\n     * Pause the animation and set a custom position if wanted\n     * @param position\n     * @returns\n     */\n    pause(position) {\n        if (position != undefined) {\n            this._position = position;\n        }\n        this._running = false;\n        return this;\n    }\n    /**\n     * Repeat the curve.\n     * @param value How many times to repeat. -1 is forever\n     * @returns\n     */\n    repeat(value) {\n        this._repeat = value;\n        return this;\n    }\n    curve(type) {\n        this._type = type;\n        return this;\n    }\n    points(points) {\n        // make a copy and sort it by time\n        this._points = points.slice().sort((a, b) => a.t - b.t);\n        return this;\n    }\n    reverse(reverse) {\n        this._reverse = reverse;\n        return this;\n    }\n    pingPong(pingPong) {\n        this._pingPong = pingPong;\n        return this;\n    }\n    update(dt) {\n        // if it is running and not done calculate\n        // a new position\n        if (this._running && !this._isDone) {\n            // update time.\n            if (this._reverse) {\n                this._time -= dt;\n            }\n            else {\n                this._time += dt;\n            }\n            // find the closest point\n            this._point0 = this.findClosetTimeIndex(this._time);\n            const lastPointOrFirst = (this._reverse && this._point0 == 0) ||\n                (!this._reverse && this._point0 >= this._points.length - 1);\n            // if there are still more points or are we done\n            if (!lastPointOrFirst) {\n                this._point1 = this._point0 + 1;\n            }\n            else {\n                // set the position. We only have one point\n                // so this is easy.\n                this._position = this._points[this._point0].p;\n                // handle the repeat and ping pong\n                if (this._repeat > 0 || this._repeat == -1) {\n                    // if we are ping ponging\n                    if (this._pingPong) {\n                        this._reverse = !this._reverse;\n                    }\n                    else {\n                        // reset time\n                        this._time = 0;\n                    }\n                    if (this._repeat > 0) {\n                        this._repeat--;\n                    }\n                }\n                else {\n                    // we are done. Set flag.\n                    this._isDone = true;\n                }\n                // no more calculations we hit the last point\n                return;\n            }\n            let p0 = this._points[this._point0].p;\n            let p1 = this._points[this._point1].p;\n            // calculate the position\n            if (this._type == CurveType.linear) {\n                const t = this._time - this._points[this._point0].t;\n                this._position = p0 + t * (p1 - p0);\n            }\n            else if (this._type == CurveType.discreet) {\n                this._position = p0;\n            }\n        }\n    }\n    /**\n     * Finds the index closest to the given time value.\n     * @param time\n     * @returns\n     */\n    findClosetTimeIndex(time) {\n        let startIndex = 0;\n        const clip = this._points;\n        let endIndex = clip.length - 1;\n        let startTime = clip[startIndex].t;\n        let lastTime = clip[endIndex].t;\n        // check time bounds\n        if (time <= startTime) {\n            return startIndex;\n        }\n        else if (time >= lastTime) {\n            return endIndex;\n        }\n        while (true) {\n            // if the current is the time we are looking for\n            // or the startIndex is one less then endIndex\n            // then we are done.\n            if (time == startTime || startIndex >= endIndex - 1) {\n                return startIndex;\n            }\n            const midIndex = Math.floor((startIndex + endIndex) / 2.0);\n            const midFrame = clip[midIndex].t;\n            if (time > midFrame) {\n                startIndex = midIndex;\n            }\n            else if (time < midFrame) {\n                endIndex = midIndex;\n            }\n            else {\n                // found it in the middle\n                return midIndex;\n            }\n        }\n    }\n}\nexports.Curve = Curve;\n\n\n//# sourceURL=webpack://earthquest/./src/math/Curve.ts?");

/***/ }),

/***/ "./src/math/constants.ts":
/*!*******************************!*\
  !*** ./src/math/constants.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Clamp = exports.equals = exports.toRadian = exports.degree = exports.round = exports.RANDOM = exports.epsilon = void 0;\nexports.epsilon = 0.00001;\n//\n// Custom math functions\n//\n/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexports.RANDOM = Math.random;\n/**\n * Symmetric round\n * see https://www.npmjs.com/package/round-half-up-symmetric#user-content-detailed-background\n *\n * @param {Number} a value to round\n */\nfunction round(a) {\n    if (a >= 0)\n        return Math.round(a);\n    return a % 0.5 === 0 ? Math.floor(a) : Math.round(a);\n}\nexports.round = round;\nexports.degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\nfunction toRadian(a) {\n    return a * exports.degree;\n}\nexports.toRadian = toRadian;\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nfunction equals(a, b) {\n    return Math.abs(a - b) <= exports.epsilon * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nexports.equals = equals;\n/**\n * Clamp a number between values\n * @param num\n * @param min\n * @param max\n * @returns\n */\nfunction Clamp(num, min, max) {\n    return Math.min(Math.max(num, min), max);\n}\nexports.Clamp = Clamp;\n\n\n//# sourceURL=webpack://earthquest/./src/math/constants.ts?");

/***/ }),

/***/ "./src/math/mat2.ts":
/*!**************************!*\
  !*** ./src/math/mat2.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst vec2_1 = __importDefault(__webpack_require__(/*! ./vec2 */ \"./src/math/vec2.ts\"));\nconst constants_1 = __webpack_require__(/*! ./constants */ \"./src/math/constants.ts\");\nclass mat2 {\n    constructor(values) {\n        this.values = new Float32Array(4);\n        if (values !== undefined) {\n            this.init(values);\n        }\n    }\n    at(index) {\n        return this.values[index];\n    }\n    init(values) {\n        for (let i = 0; i < 4; i++) {\n            this.values[i] = values[i];\n        }\n        return this;\n    }\n    reset() {\n        for (let i = 0; i < 4; i++) {\n            this.values[i] = 0;\n        }\n    }\n    copy(dest) {\n        if (!dest) {\n            dest = new mat2();\n        }\n        for (let i = 0; i < 4; i++) {\n            dest.values[i] = this.values[i];\n        }\n        return dest;\n    }\n    all() {\n        const data = [];\n        for (let i = 0; i < 4; i++) {\n            data[i] = this.values[i];\n        }\n        return data;\n    }\n    row(index) {\n        return [\n            this.values[index * 2 + 0],\n            this.values[index * 2 + 1],\n        ];\n    }\n    col(index) {\n        return [\n            this.values[index],\n            this.values[index + 2],\n        ];\n    }\n    equals(matrix, threshold = constants_1.epsilon) {\n        for (let i = 0; i < 4; i++) {\n            if (Math.abs(this.values[i] - matrix.at(i)) > threshold) {\n                return false;\n            }\n        }\n        return true;\n    }\n    determinant() {\n        return this.values[0] * this.values[3] - this.values[2] * this.values[1];\n    }\n    setIdentity() {\n        this.values[0] = 1;\n        this.values[1] = 0;\n        this.values[2] = 0;\n        this.values[3] = 1;\n        return this;\n    }\n    transpose() {\n        const temp = this.values[1];\n        this.values[1] = this.values[2];\n        this.values[2] = temp;\n        return this;\n    }\n    inverse() {\n        let det = this.determinant();\n        if (!det) {\n            return null;\n        }\n        det = 1.0 / det;\n        const a11 = this.values[0];\n        this.values[0] = det * (this.values[3]);\n        this.values[1] = det * (-this.values[1]);\n        this.values[2] = det * (-this.values[2]);\n        this.values[3] = det * a11;\n        return this;\n    }\n    multiply(matrix) {\n        const a11 = this.values[0];\n        const a12 = this.values[1];\n        const a21 = this.values[2];\n        const a22 = this.values[3];\n        this.values[0] = a11 * matrix.at(0) + a12 * matrix.at(2);\n        this.values[1] = a11 * matrix.at(1) + a12 * matrix.at(3);\n        this.values[2] = a21 * matrix.at(0) + a22 * matrix.at(2);\n        this.values[3] = a21 * matrix.at(1) + a22 * matrix.at(3);\n        return this;\n    }\n    rotate(angle) {\n        const a11 = this.values[0];\n        const a12 = this.values[1];\n        const a21 = this.values[2];\n        const a22 = this.values[3];\n        const sin = Math.sin(angle);\n        const cos = Math.cos(angle);\n        this.values[0] = a11 * cos + a12 * sin;\n        this.values[1] = a11 * -sin + a12 * cos;\n        this.values[2] = a21 * cos + a22 * sin;\n        this.values[3] = a21 * -sin + a22 * cos;\n        return this;\n    }\n    multiplyVec2(vector, result) {\n        const x = vector.x;\n        const y = vector.y;\n        if (result) {\n            result.xy = [\n                x * this.values[0] + y * this.values[1],\n                x * this.values[2] + y * this.values[3],\n            ];\n            return result;\n        }\n        else {\n            return new vec2_1.default([\n                x * this.values[0] + y * this.values[1],\n                x * this.values[2] + y * this.values[3],\n            ]);\n        }\n    }\n    scale(vector) {\n        const a11 = this.values[0];\n        const a12 = this.values[1];\n        const a21 = this.values[2];\n        const a22 = this.values[3];\n        const x = vector.x;\n        const y = vector.y;\n        this.values[0] = a11 * x;\n        this.values[1] = a12 * y;\n        this.values[2] = a21 * x;\n        this.values[3] = a22 * y;\n        return this;\n    }\n    static product(m1, m2, result) {\n        const a11 = m1.at(0);\n        const a12 = m1.at(1);\n        const a21 = m1.at(2);\n        const a22 = m1.at(3);\n        if (result) {\n            result.init([\n                a11 * m2.at(0) + a12 * m2.at(2),\n                a11 * m2.at(1) + a12 * m2.at(3),\n                a21 * m2.at(0) + a22 * m2.at(2),\n                a21 * m2.at(1) + a22 * m2.at(3),\n            ]);\n            return result;\n        }\n        else {\n            return new mat2([\n                a11 * m2.at(0) + a12 * m2.at(2),\n                a11 * m2.at(1) + a12 * m2.at(3),\n                a21 * m2.at(0) + a22 * m2.at(2),\n                a21 * m2.at(1) + a22 * m2.at(3),\n            ]);\n        }\n    }\n}\nexports[\"default\"] = mat2;\nmat2.identity = new mat2().setIdentity();\n\n\n//# sourceURL=webpack://earthquest/./src/math/mat2.ts?");

/***/ }),

/***/ "./src/math/mat3.ts":
/*!**************************!*\
  !*** ./src/math/mat3.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst mat4_1 = __importDefault(__webpack_require__(/*! ./mat4 */ \"./src/math/mat4.ts\"));\nconst quat_1 = __importDefault(__webpack_require__(/*! ./quat */ \"./src/math/quat.ts\"));\nconst vec2_1 = __importDefault(__webpack_require__(/*! ./vec2 */ \"./src/math/vec2.ts\"));\nconst vec3_1 = __importDefault(__webpack_require__(/*! ./vec3 */ \"./src/math/vec3.ts\"));\nconst constants_1 = __webpack_require__(/*! ./constants */ \"./src/math/constants.ts\");\nclass mat3 {\n    constructor(values) {\n        this.values = new Float32Array(9);\n        if (values !== undefined) {\n            this.init(values);\n        }\n    }\n    at(index) {\n        return this.values[index];\n    }\n    init(values) {\n        for (let i = 0; i < 9; i++) {\n            this.values[i] = values[i];\n        }\n        return this;\n    }\n    reset() {\n        for (let i = 0; i < 9; i++) {\n            this.values[i] = 0;\n        }\n    }\n    copy(dest) {\n        if (!dest) {\n            dest = new mat3();\n        }\n        for (let i = 0; i < 9; i++) {\n            dest.values[i] = this.values[i];\n        }\n        return dest;\n    }\n    all() {\n        const data = [];\n        for (let i = 0; i < 9; i++) {\n            data[i] = this.values[i];\n        }\n        return data;\n    }\n    row(index) {\n        return [\n            this.values[index * 3 + 0],\n            this.values[index * 3 + 1],\n            this.values[index * 3 + 2],\n        ];\n    }\n    col(index) {\n        return [\n            this.values[index],\n            this.values[index + 3],\n            this.values[index + 6],\n        ];\n    }\n    equals(matrix, threshold = constants_1.epsilon) {\n        for (let i = 0; i < 9; i++) {\n            if (Math.abs(this.values[i] - matrix.at(i)) > threshold) {\n                return false;\n            }\n        }\n        return true;\n    }\n    determinant() {\n        const a00 = this.values[0];\n        const a01 = this.values[1];\n        const a02 = this.values[2];\n        const a10 = this.values[3];\n        const a11 = this.values[4];\n        const a12 = this.values[5];\n        const a20 = this.values[6];\n        const a21 = this.values[7];\n        const a22 = this.values[8];\n        const det01 = a22 * a11 - a12 * a21;\n        const det11 = -a22 * a10 + a12 * a20;\n        const det21 = a21 * a10 - a11 * a20;\n        return a00 * det01 + a01 * det11 + a02 * det21;\n    }\n    setIdentity() {\n        this.values[0] = 1;\n        this.values[1] = 0;\n        this.values[2] = 0;\n        this.values[3] = 0;\n        this.values[4] = 1;\n        this.values[5] = 0;\n        this.values[6] = 0;\n        this.values[7] = 0;\n        this.values[8] = 1;\n        return this;\n    }\n    transpose() {\n        const temp01 = this.values[1];\n        const temp02 = this.values[2];\n        const temp12 = this.values[5];\n        this.values[1] = this.values[3];\n        this.values[2] = this.values[6];\n        this.values[3] = temp01;\n        this.values[5] = this.values[7];\n        this.values[6] = temp02;\n        this.values[7] = temp12;\n        return this;\n    }\n    inverse() {\n        const a00 = this.values[0];\n        const a01 = this.values[1];\n        const a02 = this.values[2];\n        const a10 = this.values[3];\n        const a11 = this.values[4];\n        const a12 = this.values[5];\n        const a20 = this.values[6];\n        const a21 = this.values[7];\n        const a22 = this.values[8];\n        const det01 = a22 * a11 - a12 * a21;\n        const det11 = -a22 * a10 + a12 * a20;\n        const det21 = a21 * a10 - a11 * a20;\n        let det = a00 * det01 + a01 * det11 + a02 * det21;\n        if (!det) {\n            return null;\n        }\n        det = 1.0 / det;\n        this.values[0] = det01 * det;\n        this.values[1] = (-a22 * a01 + a02 * a21) * det;\n        this.values[2] = (a12 * a01 - a02 * a11) * det;\n        this.values[3] = det11 * det;\n        this.values[4] = (a22 * a00 - a02 * a20) * det;\n        this.values[5] = (-a12 * a00 + a02 * a10) * det;\n        this.values[6] = det21 * det;\n        this.values[7] = (-a21 * a00 + a01 * a20) * det;\n        this.values[8] = (a11 * a00 - a01 * a10) * det;\n        return this;\n    }\n    multiply(matrix) {\n        const a00 = this.values[0];\n        const a01 = this.values[1];\n        const a02 = this.values[2];\n        const a10 = this.values[3];\n        const a11 = this.values[4];\n        const a12 = this.values[5];\n        const a20 = this.values[6];\n        const a21 = this.values[7];\n        const a22 = this.values[8];\n        const b00 = matrix.at(0);\n        const b01 = matrix.at(1);\n        const b02 = matrix.at(2);\n        const b10 = matrix.at(3);\n        const b11 = matrix.at(4);\n        const b12 = matrix.at(5);\n        const b20 = matrix.at(6);\n        const b21 = matrix.at(7);\n        const b22 = matrix.at(8);\n        this.values[0] = b00 * a00 + b01 * a10 + b02 * a20;\n        this.values[1] = b00 * a01 + b01 * a11 + b02 * a21;\n        this.values[2] = b00 * a02 + b01 * a12 + b02 * a22;\n        this.values[3] = b10 * a00 + b11 * a10 + b12 * a20;\n        this.values[4] = b10 * a01 + b11 * a11 + b12 * a21;\n        this.values[5] = b10 * a02 + b11 * a12 + b12 * a22;\n        this.values[6] = b20 * a00 + b21 * a10 + b22 * a20;\n        this.values[7] = b20 * a01 + b21 * a11 + b22 * a21;\n        this.values[8] = b20 * a02 + b21 * a12 + b22 * a22;\n        return this;\n    }\n    multiplyVec2(vector, result) {\n        const x = vector.x;\n        const y = vector.y;\n        if (result) {\n            result.xy = [\n                x * this.values[0] + y * this.values[3] + this.values[6],\n                x * this.values[1] + y * this.values[4] + this.values[7],\n            ];\n            return result;\n        }\n        else {\n            return new vec2_1.default([\n                x * this.values[0] + y * this.values[3] + this.values[6],\n                x * this.values[1] + y * this.values[4] + this.values[7],\n            ]);\n        }\n    }\n    multiplyVec3(vector, result) {\n        const x = vector.x;\n        const y = vector.y;\n        const z = vector.z;\n        if (result) {\n            result.xyz = [\n                x * this.values[0] + y * this.values[3] + z * this.values[6],\n                x * this.values[1] + y * this.values[4] + z * this.values[7],\n                x * this.values[2] + y * this.values[5] + z * this.values[8],\n            ];\n            return result;\n        }\n        else {\n            return new vec3_1.default([\n                x * this.values[0] + y * this.values[3] + z * this.values[6],\n                x * this.values[1] + y * this.values[4] + z * this.values[7],\n                x * this.values[2] + y * this.values[5] + z * this.values[8],\n            ]);\n        }\n    }\n    toMat4(result) {\n        if (result) {\n            result.init([\n                this.values[0],\n                this.values[1],\n                this.values[2],\n                0,\n                this.values[3],\n                this.values[4],\n                this.values[5],\n                0,\n                this.values[6],\n                this.values[7],\n                this.values[8],\n                0,\n                0,\n                0,\n                0,\n                1,\n            ]);\n            return result;\n        }\n        else {\n            return new mat4_1.default([\n                this.values[0],\n                this.values[1],\n                this.values[2],\n                0,\n                this.values[3],\n                this.values[4],\n                this.values[5],\n                0,\n                this.values[6],\n                this.values[7],\n                this.values[8],\n                0,\n                0,\n                0,\n                0,\n                1,\n            ]);\n        }\n    }\n    toQuat() {\n        const m00 = this.values[0];\n        const m01 = this.values[1];\n        const m02 = this.values[2];\n        const m10 = this.values[3];\n        const m11 = this.values[4];\n        const m12 = this.values[5];\n        const m20 = this.values[6];\n        const m21 = this.values[7];\n        const m22 = this.values[8];\n        const fourXSquaredMinus1 = m00 - m11 - m22;\n        const fourYSquaredMinus1 = m11 - m00 - m22;\n        const fourZSquaredMinus1 = m22 - m00 - m11;\n        const fourWSquaredMinus1 = m00 + m11 + m22;\n        let biggestIndex = 0;\n        let fourBiggestSquaredMinus1 = fourWSquaredMinus1;\n        if (fourXSquaredMinus1 > fourBiggestSquaredMinus1) {\n            fourBiggestSquaredMinus1 = fourXSquaredMinus1;\n            biggestIndex = 1;\n        }\n        if (fourYSquaredMinus1 > fourBiggestSquaredMinus1) {\n            fourBiggestSquaredMinus1 = fourYSquaredMinus1;\n            biggestIndex = 2;\n        }\n        if (fourZSquaredMinus1 > fourBiggestSquaredMinus1) {\n            fourBiggestSquaredMinus1 = fourZSquaredMinus1;\n            biggestIndex = 3;\n        }\n        const biggestVal = Math.sqrt(fourBiggestSquaredMinus1 + 1) * 0.5;\n        const mult = 0.25 / biggestVal;\n        const result = new quat_1.default();\n        switch (biggestIndex) {\n            case 0:\n                result.w = biggestVal;\n                result.x = (m12 - m21) * mult;\n                result.y = (m20 - m02) * mult;\n                result.z = (m01 - m10) * mult;\n                break;\n            case 1:\n                result.w = (m12 - m21) * mult;\n                result.x = biggestVal;\n                result.y = (m01 + m10) * mult;\n                result.z = (m20 + m02) * mult;\n                break;\n            case 2:\n                result.w = (m20 - m02) * mult;\n                result.x = (m01 + m10) * mult;\n                result.y = biggestVal;\n                result.z = (m12 + m21) * mult;\n                break;\n            case 3:\n                result.w = (m01 - m10) * mult;\n                result.x = (m20 + m02) * mult;\n                result.y = (m12 + m21) * mult;\n                result.z = biggestVal;\n                break;\n        }\n        return result;\n    }\n    rotate(angle, axis) {\n        let x = axis.x;\n        let y = axis.y;\n        let z = axis.z;\n        let length = Math.sqrt(x * x + y * y + z * z);\n        if (!length) {\n            return null;\n        }\n        if (length !== 1) {\n            length = 1 / length;\n            x *= length;\n            y *= length;\n            z *= length;\n        }\n        const s = Math.sin(angle);\n        const c = Math.cos(angle);\n        const t = 1.0 - c;\n        const a00 = this.values[0];\n        const a01 = this.values[1];\n        const a02 = this.values[2];\n        const a10 = this.values[4];\n        const a11 = this.values[5];\n        const a12 = this.values[6];\n        const a20 = this.values[8];\n        const a21 = this.values[9];\n        const a22 = this.values[10];\n        const b00 = x * x * t + c;\n        const b01 = y * x * t + z * s;\n        const b02 = z * x * t - y * s;\n        const b10 = x * y * t - z * s;\n        const b11 = y * y * t + c;\n        const b12 = z * y * t + x * s;\n        const b20 = x * z * t + y * s;\n        const b21 = y * z * t - x * s;\n        const b22 = z * z * t + c;\n        this.values[0] = a00 * b00 + a10 * b01 + a20 * b02;\n        this.values[1] = a01 * b00 + a11 * b01 + a21 * b02;\n        this.values[2] = a02 * b00 + a12 * b01 + a22 * b02;\n        this.values[3] = a00 * b10 + a10 * b11 + a20 * b12;\n        this.values[4] = a01 * b10 + a11 * b11 + a21 * b12;\n        this.values[5] = a02 * b10 + a12 * b11 + a22 * b12;\n        this.values[6] = a00 * b20 + a10 * b21 + a20 * b22;\n        this.values[7] = a01 * b20 + a11 * b21 + a21 * b22;\n        this.values[8] = a02 * b20 + a12 * b21 + a22 * b22;\n        return this;\n    }\n    static product(m1, m2, result) {\n        const a00 = m1.at(0);\n        const a01 = m1.at(1);\n        const a02 = m1.at(2);\n        const a10 = m1.at(3);\n        const a11 = m1.at(4);\n        const a12 = m1.at(5);\n        const a20 = m1.at(6);\n        const a21 = m1.at(7);\n        const a22 = m1.at(8);\n        const b00 = m2.at(0);\n        const b01 = m2.at(1);\n        const b02 = m2.at(2);\n        const b10 = m2.at(3);\n        const b11 = m2.at(4);\n        const b12 = m2.at(5);\n        const b20 = m2.at(6);\n        const b21 = m2.at(7);\n        const b22 = m2.at(8);\n        if (result) {\n            result.init([\n                b00 * a00 + b01 * a10 + b02 * a20,\n                b00 * a01 + b01 * a11 + b02 * a21,\n                b00 * a02 + b01 * a12 + b02 * a22,\n                b10 * a00 + b11 * a10 + b12 * a20,\n                b10 * a01 + b11 * a11 + b12 * a21,\n                b10 * a02 + b11 * a12 + b12 * a22,\n                b20 * a00 + b21 * a10 + b22 * a20,\n                b20 * a01 + b21 * a11 + b22 * a21,\n                b20 * a02 + b21 * a12 + b22 * a22,\n            ]);\n            return result;\n        }\n        else {\n            return new mat3([\n                b00 * a00 + b01 * a10 + b02 * a20,\n                b00 * a01 + b01 * a11 + b02 * a21,\n                b00 * a02 + b01 * a12 + b02 * a22,\n                b10 * a00 + b11 * a10 + b12 * a20,\n                b10 * a01 + b11 * a11 + b12 * a21,\n                b10 * a02 + b11 * a12 + b12 * a22,\n                b20 * a00 + b21 * a10 + b22 * a20,\n                b20 * a01 + b21 * a11 + b22 * a21,\n                b20 * a02 + b21 * a12 + b22 * a22,\n            ]);\n        }\n    }\n}\nexports[\"default\"] = mat3;\nmat3.identity = new mat3().setIdentity();\n\n\n//# sourceURL=webpack://earthquest/./src/math/mat3.ts?");

/***/ }),

/***/ "./src/math/mat4.ts":
/*!**************************!*\
  !*** ./src/math/mat4.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst mat3_1 = __importDefault(__webpack_require__(/*! ./mat3 */ \"./src/math/mat3.ts\"));\nconst vec3_1 = __importDefault(__webpack_require__(/*! ./vec3 */ \"./src/math/vec3.ts\"));\nconst vec4_1 = __importDefault(__webpack_require__(/*! ./vec4 */ \"./src/math/vec4.ts\"));\nconst constants_1 = __webpack_require__(/*! ./constants */ \"./src/math/constants.ts\");\nclass mat4 {\n    constructor(values) {\n        this.values = new Float32Array(16);\n        if (values !== undefined) {\n            this.init(values);\n        }\n    }\n    getValues() {\n        return this.values;\n    }\n    at(index) {\n        return this.values[index];\n    }\n    init(values) {\n        for (let i = 0; i < 16; i++) {\n            this.values[i] = values[i];\n        }\n        return this;\n    }\n    reset() {\n        for (let i = 0; i < 16; i++) {\n            this.values[i] = 0;\n        }\n    }\n    copy(dest) {\n        if (!dest) {\n            dest = new mat4();\n        }\n        for (let i = 0; i < 16; i++) {\n            dest.values[i] = this.values[i];\n        }\n        return dest;\n    }\n    all() {\n        const data = [];\n        for (let i = 0; i < 16; i++) {\n            data[i] = this.values[i];\n        }\n        return data;\n    }\n    row(index) {\n        return [\n            this.values[index * 4 + 0],\n            this.values[index * 4 + 1],\n            this.values[index * 4 + 2],\n            this.values[index * 4 + 3],\n        ];\n    }\n    col(index) {\n        return [\n            this.values[index],\n            this.values[index + 4],\n            this.values[index + 8],\n            this.values[index + 12],\n        ];\n    }\n    equals(matrix, threshold = constants_1.epsilon) {\n        for (let i = 0; i < 16; i++) {\n            if (Math.abs(this.values[i] - matrix.at(i)) > threshold) {\n                return false;\n            }\n        }\n        return true;\n    }\n    determinant() {\n        const a00 = this.values[0];\n        const a01 = this.values[1];\n        const a02 = this.values[2];\n        const a03 = this.values[3];\n        const a10 = this.values[4];\n        const a11 = this.values[5];\n        const a12 = this.values[6];\n        const a13 = this.values[7];\n        const a20 = this.values[8];\n        const a21 = this.values[9];\n        const a22 = this.values[10];\n        const a23 = this.values[11];\n        const a30 = this.values[12];\n        const a31 = this.values[13];\n        const a32 = this.values[14];\n        const a33 = this.values[15];\n        const det00 = a00 * a11 - a01 * a10;\n        const det01 = a00 * a12 - a02 * a10;\n        const det02 = a00 * a13 - a03 * a10;\n        const det03 = a01 * a12 - a02 * a11;\n        const det04 = a01 * a13 - a03 * a11;\n        const det05 = a02 * a13 - a03 * a12;\n        const det06 = a20 * a31 - a21 * a30;\n        const det07 = a20 * a32 - a22 * a30;\n        const det08 = a20 * a33 - a23 * a30;\n        const det09 = a21 * a32 - a22 * a31;\n        const det10 = a21 * a33 - a23 * a31;\n        const det11 = a22 * a33 - a23 * a32;\n        return (det00 * det11 -\n            det01 * det10 +\n            det02 * det09 +\n            det03 * det08 -\n            det04 * det07 +\n            det05 * det06);\n    }\n    setIdentity() {\n        this.values[0] = 1;\n        this.values[1] = 0;\n        this.values[2] = 0;\n        this.values[3] = 0;\n        this.values[4] = 0;\n        this.values[5] = 1;\n        this.values[6] = 0;\n        this.values[7] = 0;\n        this.values[8] = 0;\n        this.values[9] = 0;\n        this.values[10] = 1;\n        this.values[11] = 0;\n        this.values[12] = 0;\n        this.values[13] = 0;\n        this.values[14] = 0;\n        this.values[15] = 1;\n        return this;\n    }\n    transpose() {\n        const temp01 = this.values[1];\n        const temp02 = this.values[2];\n        const temp03 = this.values[3];\n        const temp12 = this.values[6];\n        const temp13 = this.values[7];\n        const temp23 = this.values[11];\n        this.values[1] = this.values[4];\n        this.values[2] = this.values[8];\n        this.values[3] = this.values[12];\n        this.values[4] = temp01;\n        this.values[6] = this.values[9];\n        this.values[7] = this.values[13];\n        this.values[8] = temp02;\n        this.values[9] = temp12;\n        this.values[11] = this.values[14];\n        this.values[12] = temp03;\n        this.values[13] = temp13;\n        this.values[14] = temp23;\n        return this;\n    }\n    inverse() {\n        const a00 = this.values[0];\n        const a01 = this.values[1];\n        const a02 = this.values[2];\n        const a03 = this.values[3];\n        const a10 = this.values[4];\n        const a11 = this.values[5];\n        const a12 = this.values[6];\n        const a13 = this.values[7];\n        const a20 = this.values[8];\n        const a21 = this.values[9];\n        const a22 = this.values[10];\n        const a23 = this.values[11];\n        const a30 = this.values[12];\n        const a31 = this.values[13];\n        const a32 = this.values[14];\n        const a33 = this.values[15];\n        const det00 = a00 * a11 - a01 * a10;\n        const det01 = a00 * a12 - a02 * a10;\n        const det02 = a00 * a13 - a03 * a10;\n        const det03 = a01 * a12 - a02 * a11;\n        const det04 = a01 * a13 - a03 * a11;\n        const det05 = a02 * a13 - a03 * a12;\n        const det06 = a20 * a31 - a21 * a30;\n        const det07 = a20 * a32 - a22 * a30;\n        const det08 = a20 * a33 - a23 * a30;\n        const det09 = a21 * a32 - a22 * a31;\n        const det10 = a21 * a33 - a23 * a31;\n        const det11 = a22 * a33 - a23 * a32;\n        let det = det00 * det11 -\n            det01 * det10 +\n            det02 * det09 +\n            det03 * det08 -\n            det04 * det07 +\n            det05 * det06;\n        if (!det) {\n            return null;\n        }\n        det = 1.0 / det;\n        this.values[0] = (a11 * det11 - a12 * det10 + a13 * det09) * det;\n        this.values[1] = (-a01 * det11 + a02 * det10 - a03 * det09) * det;\n        this.values[2] = (a31 * det05 - a32 * det04 + a33 * det03) * det;\n        this.values[3] = (-a21 * det05 + a22 * det04 - a23 * det03) * det;\n        this.values[4] = (-a10 * det11 + a12 * det08 - a13 * det07) * det;\n        this.values[5] = (a00 * det11 - a02 * det08 + a03 * det07) * det;\n        this.values[6] = (-a30 * det05 + a32 * det02 - a33 * det01) * det;\n        this.values[7] = (a20 * det05 - a22 * det02 + a23 * det01) * det;\n        this.values[8] = (a10 * det10 - a11 * det08 + a13 * det06) * det;\n        this.values[9] = (-a00 * det10 + a01 * det08 - a03 * det06) * det;\n        this.values[10] = (a30 * det04 - a31 * det02 + a33 * det00) * det;\n        this.values[11] = (-a20 * det04 + a21 * det02 - a23 * det00) * det;\n        this.values[12] = (-a10 * det09 + a11 * det07 - a12 * det06) * det;\n        this.values[13] = (a00 * det09 - a01 * det07 + a02 * det06) * det;\n        this.values[14] = (-a30 * det03 + a31 * det01 - a32 * det00) * det;\n        this.values[15] = (a20 * det03 - a21 * det01 + a22 * det00) * det;\n        return this;\n    }\n    multiply(matrix) {\n        const a00 = this.values[0];\n        const a01 = this.values[1];\n        const a02 = this.values[2];\n        const a03 = this.values[3];\n        const a10 = this.values[4];\n        const a11 = this.values[5];\n        const a12 = this.values[6];\n        const a13 = this.values[7];\n        const a20 = this.values[8];\n        const a21 = this.values[9];\n        const a22 = this.values[10];\n        const a23 = this.values[11];\n        const a30 = this.values[12];\n        const a31 = this.values[13];\n        const a32 = this.values[14];\n        const a33 = this.values[15];\n        let b0 = matrix.at(0);\n        let b1 = matrix.at(1);\n        let b2 = matrix.at(2);\n        let b3 = matrix.at(3);\n        this.values[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        this.values[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        this.values[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        this.values[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n        b0 = matrix.at(4);\n        b1 = matrix.at(5);\n        b2 = matrix.at(6);\n        b3 = matrix.at(7);\n        this.values[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        this.values[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        this.values[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        this.values[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n        b0 = matrix.at(8);\n        b1 = matrix.at(9);\n        b2 = matrix.at(10);\n        b3 = matrix.at(11);\n        this.values[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        this.values[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        this.values[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        this.values[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n        b0 = matrix.at(12);\n        b1 = matrix.at(13);\n        b2 = matrix.at(14);\n        b3 = matrix.at(15);\n        this.values[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        this.values[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        this.values[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        this.values[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n        return this;\n    }\n    multiplyVec3(vector) {\n        const x = vector.x;\n        const y = vector.y;\n        const z = vector.z;\n        return new vec3_1.default([\n            this.values[0] * x +\n                this.values[4] * y +\n                this.values[8] * z +\n                this.values[12],\n            this.values[1] * x +\n                this.values[5] * y +\n                this.values[9] * z +\n                this.values[13],\n            this.values[2] * x +\n                this.values[6] * y +\n                this.values[10] * z +\n                this.values[14],\n        ]);\n    }\n    multiplyVec4(vector, dest) {\n        if (!dest) {\n            dest = new vec4_1.default();\n        }\n        const x = vector.x;\n        const y = vector.y;\n        const z = vector.z;\n        const w = vector.w;\n        dest.x =\n            this.values[0] * x +\n                this.values[4] * y +\n                this.values[8] * z +\n                this.values[12] * w;\n        dest.y =\n            this.values[1] * x +\n                this.values[5] * y +\n                this.values[9] * z +\n                this.values[13] * w;\n        dest.z =\n            this.values[2] * x +\n                this.values[6] * y +\n                this.values[10] * z +\n                this.values[14] * w;\n        dest.w =\n            this.values[3] * x +\n                this.values[7] * y +\n                this.values[11] * z +\n                this.values[15] * w;\n        return dest;\n    }\n    toMat3() {\n        return new mat3_1.default([\n            this.values[0],\n            this.values[1],\n            this.values[2],\n            this.values[4],\n            this.values[5],\n            this.values[6],\n            this.values[8],\n            this.values[9],\n            this.values[10],\n        ]);\n    }\n    toInverseMat3() {\n        const a00 = this.values[0];\n        const a01 = this.values[1];\n        const a02 = this.values[2];\n        const a10 = this.values[4];\n        const a11 = this.values[5];\n        const a12 = this.values[6];\n        const a20 = this.values[8];\n        const a21 = this.values[9];\n        const a22 = this.values[10];\n        const det01 = a22 * a11 - a12 * a21;\n        const det11 = -a22 * a10 + a12 * a20;\n        const det21 = a21 * a10 - a11 * a20;\n        let det = a00 * det01 + a01 * det11 + a02 * det21;\n        if (!det) {\n            return null;\n        }\n        det = 1.0 / det;\n        return new mat3_1.default([\n            det01 * det,\n            (-a22 * a01 + a02 * a21) * det,\n            (a12 * a01 - a02 * a11) * det,\n            det11 * det,\n            (a22 * a00 - a02 * a20) * det,\n            (-a12 * a00 + a02 * a10) * det,\n            det21 * det,\n            (-a21 * a00 + a01 * a20) * det,\n            (a11 * a00 - a01 * a10) * det,\n        ]);\n    }\n    translate(vector) {\n        const x = vector.x;\n        const y = vector.y;\n        const z = vector.z;\n        this.values[12] +=\n            this.values[0] * x + this.values[4] * y + this.values[8] * z;\n        this.values[13] +=\n            this.values[1] * x + this.values[5] * y + this.values[9] * z;\n        this.values[14] +=\n            this.values[2] * x + this.values[6] * y + this.values[10] * z;\n        this.values[15] +=\n            this.values[3] * x + this.values[7] * y + this.values[11] * z;\n        return this;\n    }\n    scale(vector) {\n        const x = vector.x;\n        const y = vector.y;\n        const z = vector.z;\n        this.values[0] *= x;\n        this.values[1] *= x;\n        this.values[2] *= x;\n        this.values[3] *= x;\n        this.values[4] *= y;\n        this.values[5] *= y;\n        this.values[6] *= y;\n        this.values[7] *= y;\n        this.values[8] *= z;\n        this.values[9] *= z;\n        this.values[10] *= z;\n        this.values[11] *= z;\n        return this;\n    }\n    rotate(angle, axis) {\n        let x = axis.x;\n        let y = axis.y;\n        let z = axis.z;\n        let length = Math.sqrt(x * x + y * y + z * z);\n        if (!length) {\n            return null;\n        }\n        if (length !== 1) {\n            length = 1 / length;\n            x *= length;\n            y *= length;\n            z *= length;\n        }\n        const s = Math.sin(angle);\n        const c = Math.cos(angle);\n        const t = 1.0 - c;\n        const a00 = this.values[0];\n        const a01 = this.values[1];\n        const a02 = this.values[2];\n        const a03 = this.values[3];\n        const a10 = this.values[4];\n        const a11 = this.values[5];\n        const a12 = this.values[6];\n        const a13 = this.values[7];\n        const a20 = this.values[8];\n        const a21 = this.values[9];\n        const a22 = this.values[10];\n        const a23 = this.values[11];\n        const b00 = x * x * t + c;\n        const b01 = y * x * t + z * s;\n        const b02 = z * x * t - y * s;\n        const b10 = x * y * t - z * s;\n        const b11 = y * y * t + c;\n        const b12 = z * y * t + x * s;\n        const b20 = x * z * t + y * s;\n        const b21 = y * z * t - x * s;\n        const b22 = z * z * t + c;\n        this.values[0] = a00 * b00 + a10 * b01 + a20 * b02;\n        this.values[1] = a01 * b00 + a11 * b01 + a21 * b02;\n        this.values[2] = a02 * b00 + a12 * b01 + a22 * b02;\n        this.values[3] = a03 * b00 + a13 * b01 + a23 * b02;\n        this.values[4] = a00 * b10 + a10 * b11 + a20 * b12;\n        this.values[5] = a01 * b10 + a11 * b11 + a21 * b12;\n        this.values[6] = a02 * b10 + a12 * b11 + a22 * b12;\n        this.values[7] = a03 * b10 + a13 * b11 + a23 * b12;\n        this.values[8] = a00 * b20 + a10 * b21 + a20 * b22;\n        this.values[9] = a01 * b20 + a11 * b21 + a21 * b22;\n        this.values[10] = a02 * b20 + a12 * b21 + a22 * b22;\n        this.values[11] = a03 * b20 + a13 * b21 + a23 * b22;\n        return this;\n    }\n    static frustum(left, right, bottom, top, near, far) {\n        const rl = right - left;\n        const tb = top - bottom;\n        const fn = far - near;\n        return new mat4([\n            (near * 2) / rl,\n            0,\n            0,\n            0,\n            0,\n            (near * 2) / tb,\n            0,\n            0,\n            (right + left) / rl,\n            (top + bottom) / tb,\n            -(far + near) / fn,\n            -1,\n            0,\n            0,\n            -(far * near * 2) / fn,\n            0,\n        ]);\n    }\n    static perspective(fov, aspect, near, far) {\n        const top = near * Math.tan((fov * Math.PI) / 360.0);\n        const right = top * aspect;\n        return mat4.frustum(-right, right, -top, top, near, far);\n    }\n    static orthographic(left, right, bottom, top, near, far) {\n        const rl = right - left;\n        const tb = top - bottom;\n        const fn = far - near;\n        return new mat4([\n            2 / rl,\n            0,\n            0,\n            0,\n            0,\n            2 / tb,\n            0,\n            0,\n            0,\n            0,\n            -2 / fn,\n            0,\n            -(left + right) / rl,\n            -(top + bottom) / tb,\n            -(far + near) / fn,\n            1,\n        ]);\n    }\n    static lookAt(position, target, up = vec3_1.default.up) {\n        if (position.equals(target)) {\n            return this.identity;\n        }\n        const z = vec3_1.default.difference(position, target).normalize();\n        const x = vec3_1.default.cross(up, z).normalize();\n        const y = vec3_1.default.cross(z, x).normalize();\n        return new mat4([\n            x.x,\n            y.x,\n            z.x,\n            0,\n            x.y,\n            y.y,\n            z.y,\n            0,\n            x.z,\n            y.z,\n            z.z,\n            0,\n            -vec3_1.default.dot(x, position),\n            -vec3_1.default.dot(y, position),\n            -vec3_1.default.dot(z, position),\n            1,\n        ]);\n    }\n    static product(m1, m2, result) {\n        const a00 = m1.at(0);\n        const a01 = m1.at(1);\n        const a02 = m1.at(2);\n        const a03 = m1.at(3);\n        const a10 = m1.at(4);\n        const a11 = m1.at(5);\n        const a12 = m1.at(6);\n        const a13 = m1.at(7);\n        const a20 = m1.at(8);\n        const a21 = m1.at(9);\n        const a22 = m1.at(10);\n        const a23 = m1.at(11);\n        const a30 = m1.at(12);\n        const a31 = m1.at(13);\n        const a32 = m1.at(14);\n        const a33 = m1.at(15);\n        const b00 = m2.at(0);\n        const b01 = m2.at(1);\n        const b02 = m2.at(2);\n        const b03 = m2.at(3);\n        const b10 = m2.at(4);\n        const b11 = m2.at(5);\n        const b12 = m2.at(6);\n        const b13 = m2.at(7);\n        const b20 = m2.at(8);\n        const b21 = m2.at(9);\n        const b22 = m2.at(10);\n        const b23 = m2.at(11);\n        const b30 = m2.at(12);\n        const b31 = m2.at(13);\n        const b32 = m2.at(14);\n        const b33 = m2.at(15);\n        if (result) {\n            result.init([\n                b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30,\n                b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31,\n                b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32,\n                b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33,\n                b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30,\n                b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31,\n                b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32,\n                b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33,\n                b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30,\n                b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31,\n                b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32,\n                b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33,\n                b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30,\n                b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31,\n                b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32,\n                b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33,\n            ]);\n            return result;\n        }\n        else {\n            return new mat4([\n                b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30,\n                b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31,\n                b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32,\n                b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33,\n                b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30,\n                b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31,\n                b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32,\n                b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33,\n                b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30,\n                b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31,\n                b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32,\n                b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33,\n                b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30,\n                b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31,\n                b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32,\n                b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33,\n            ]);\n        }\n    }\n}\nexports[\"default\"] = mat4;\nmat4.identity = new mat4().setIdentity();\n\n\n//# sourceURL=webpack://earthquest/./src/math/mat4.ts?");

/***/ }),

/***/ "./src/math/quat.ts":
/*!**************************!*\
  !*** ./src/math/quat.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst mat3_1 = __importDefault(__webpack_require__(/*! ./mat3 */ \"./src/math/mat3.ts\"));\nconst mat4_1 = __importDefault(__webpack_require__(/*! ./mat4 */ \"./src/math/mat4.ts\"));\nconst vec3_1 = __importDefault(__webpack_require__(/*! ./vec3 */ \"./src/math/vec3.ts\"));\nconst constants_1 = __webpack_require__(/*! ./constants */ \"./src/math/constants.ts\");\nclass quat {\n    get x() {\n        return this.values[0];\n    }\n    get y() {\n        return this.values[1];\n    }\n    get z() {\n        return this.values[2];\n    }\n    get w() {\n        return this.values[3];\n    }\n    get xy() {\n        return [\n            this.values[0],\n            this.values[1],\n        ];\n    }\n    get xyz() {\n        return [\n            this.values[0],\n            this.values[1],\n            this.values[2],\n        ];\n    }\n    get xyzw() {\n        return [\n            this.values[0],\n            this.values[1],\n            this.values[2],\n            this.values[3],\n        ];\n    }\n    set x(value) {\n        this.values[0] = value;\n    }\n    set y(value) {\n        this.values[1] = value;\n    }\n    set z(value) {\n        this.values[2] = value;\n    }\n    set w(value) {\n        this.values[3] = value;\n    }\n    set xy(values) {\n        this.values[0] = values[0];\n        this.values[1] = values[1];\n    }\n    set xyz(values) {\n        this.values[0] = values[0];\n        this.values[1] = values[1];\n        this.values[2] = values[2];\n    }\n    set xyzw(values) {\n        this.values[0] = values[0];\n        this.values[1] = values[1];\n        this.values[2] = values[2];\n        this.values[3] = values[3];\n    }\n    constructor(values) {\n        this.values = new Float32Array(4);\n        if (values !== undefined) {\n            this.xyzw = values;\n        }\n    }\n    at(index) {\n        return this.values[index];\n    }\n    reset() {\n        for (let i = 0; i < 4; i++) {\n            this.values[i] = 0;\n        }\n    }\n    copy(dest) {\n        if (!dest) {\n            dest = new quat();\n        }\n        for (let i = 0; i < 4; i++) {\n            dest.values[i] = this.values[i];\n        }\n        return dest;\n    }\n    roll() {\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        const w = this.w;\n        return Math.atan2(2.0 * (x * y + w * z), w * w + x * x - y * y - z * z);\n    }\n    pitch() {\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        const w = this.w;\n        return Math.atan2(2.0 * (y * z + w * x), w * w - x * x - y * y + z * z);\n    }\n    yaw() {\n        return Math.asin(2.0 * (this.x * this.z - this.w * this.y));\n    }\n    equals(vector, threshold = constants_1.epsilon) {\n        for (let i = 0; i < 4; i++) {\n            if (Math.abs(this.values[i] - vector.at(i)) > threshold) {\n                return false;\n            }\n        }\n        return true;\n    }\n    setIdentity() {\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n        this.w = 1;\n        return this;\n    }\n    calculateW() {\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        this.w = -(Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z)));\n        return this;\n    }\n    inverse() {\n        const dot = quat.dot(this, this);\n        if (!dot) {\n            this.xyzw = [0, 0, 0, 0];\n            return this;\n        }\n        const invDot = dot ? 1.0 / dot : 0;\n        this.x *= -invDot;\n        this.y *= -invDot;\n        this.z *= -invDot;\n        this.w *= invDot;\n        return this;\n    }\n    conjugate() {\n        this.values[0] *= -1;\n        this.values[1] *= -1;\n        this.values[2] *= -1;\n        return this;\n    }\n    length() {\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        const w = this.w;\n        return Math.sqrt(x * x + y * y + z * z + w * w);\n    }\n    normalize(dest) {\n        if (!dest) {\n            dest = this;\n        }\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        const w = this.w;\n        let length = Math.sqrt(x * x + y * y + z * z + w * w);\n        if (!length) {\n            dest.x = 0;\n            dest.y = 0;\n            dest.z = 0;\n            dest.w = 0;\n            return dest;\n        }\n        length = 1 / length;\n        dest.x = x * length;\n        dest.y = y * length;\n        dest.z = z * length;\n        dest.w = w * length;\n        return dest;\n    }\n    add(other) {\n        for (let i = 0; i < 4; i++) {\n            this.values[i] += other.at(i);\n        }\n        return this;\n    }\n    multiply(other) {\n        const q1x = this.values[0];\n        const q1y = this.values[1];\n        const q1z = this.values[2];\n        const q1w = this.values[3];\n        const q2x = other.x;\n        const q2y = other.y;\n        const q2z = other.z;\n        const q2w = other.w;\n        this.x = q1x * q2w + q1w * q2x + q1y * q2z - q1z * q2y;\n        this.y = q1y * q2w + q1w * q2y + q1z * q2x - q1x * q2z;\n        this.z = q1z * q2w + q1w * q2z + q1x * q2y - q1y * q2x;\n        this.w = q1w * q2w - q1x * q2x - q1y * q2y - q1z * q2z;\n        return this;\n    }\n    multiplyVec3(vector, dest) {\n        if (!dest) {\n            dest = new vec3_1.default();\n        }\n        const x = vector.x;\n        const y = vector.y;\n        const z = vector.z;\n        const qx = this.x;\n        const qy = this.y;\n        const qz = this.z;\n        const qw = this.w;\n        const ix = qw * x + qy * z - qz * y;\n        const iy = qw * y + qz * x - qx * z;\n        const iz = qw * z + qx * y - qy * x;\n        const iw = -qx * x - qy * y - qz * z;\n        dest.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n        dest.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n        dest.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n        return dest;\n    }\n    toMat3(dest) {\n        if (!dest) {\n            dest = new mat3_1.default();\n        }\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        const w = this.w;\n        const x2 = x + x;\n        const y2 = y + y;\n        const z2 = z + z;\n        const xx = x * x2;\n        const xy = x * y2;\n        const xz = x * z2;\n        const yy = y * y2;\n        const yz = y * z2;\n        const zz = z * z2;\n        const wx = w * x2;\n        const wy = w * y2;\n        const wz = w * z2;\n        dest.init([\n            1 - (yy + zz),\n            xy + wz,\n            xz - wy,\n            xy - wz,\n            1 - (xx + zz),\n            yz + wx,\n            xz + wy,\n            yz - wx,\n            1 - (xx + yy),\n        ]);\n        return dest;\n    }\n    toMat4(dest) {\n        if (!dest) {\n            dest = new mat4_1.default();\n        }\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        const w = this.w;\n        const x2 = x + x;\n        const y2 = y + y;\n        const z2 = z + z;\n        const xx = x * x2;\n        const xy = x * y2;\n        const xz = x * z2;\n        const yy = y * y2;\n        const yz = y * z2;\n        const zz = z * z2;\n        const wx = w * x2;\n        const wy = w * y2;\n        const wz = w * z2;\n        dest.init([\n            1 - (yy + zz),\n            xy + wz,\n            xz - wy,\n            0,\n            xy - wz,\n            1 - (xx + zz),\n            yz + wx,\n            0,\n            xz + wy,\n            yz - wx,\n            1 - (xx + yy),\n            0,\n            0,\n            0,\n            0,\n            1,\n        ]);\n        return dest;\n    }\n    static dot(q1, q2) {\n        return q1.x * q2.x + q1.y * q2.y + q1.z * q2.z + q1.w * q2.w;\n    }\n    static sum(q1, q2, dest) {\n        if (!dest) {\n            dest = new quat();\n        }\n        dest.x = q1.x + q2.x;\n        dest.y = q1.y + q2.y;\n        dest.z = q1.z + q2.z;\n        dest.w = q1.w + q2.w;\n        return dest;\n    }\n    static product(q1, q2, dest) {\n        if (!dest) {\n            dest = new quat();\n        }\n        const q1x = q1.x;\n        const q1y = q1.y;\n        const q1z = q1.z;\n        const q1w = q1.w;\n        const q2x = q2.x;\n        const q2y = q2.y;\n        const q2z = q2.z;\n        const q2w = q2.w;\n        dest.x = q1x * q2w + q1w * q2x + q1y * q2z - q1z * q2y;\n        dest.y = q1y * q2w + q1w * q2y + q1z * q2x - q1x * q2z;\n        dest.z = q1z * q2w + q1w * q2z + q1x * q2y - q1y * q2x;\n        dest.w = q1w * q2w - q1x * q2x - q1y * q2y - q1z * q2z;\n        return dest;\n    }\n    static cross(q1, q2, dest) {\n        if (!dest) {\n            dest = new quat();\n        }\n        const q1x = q1.x;\n        const q1y = q1.y;\n        const q1z = q1.z;\n        const q1w = q1.w;\n        const q2x = q2.x;\n        const q2y = q2.y;\n        const q2z = q2.z;\n        const q2w = q2.w;\n        dest.x = q1w * q2z + q1z * q2w + q1x * q2y - q1y * q2x;\n        dest.y = q1w * q2w - q1x * q2x - q1y * q2y - q1z * q2z;\n        dest.z = q1w * q2x + q1x * q2w + q1y * q2z - q1z * q2y;\n        dest.w = q1w * q2y + q1y * q2w + q1z * q2x - q1x * q2z;\n        return dest;\n    }\n    static shortMix(q1, q2, time, dest) {\n        if (!dest) {\n            dest = new quat();\n        }\n        if (time <= 0.0) {\n            dest.xyzw = q1.xyzw;\n            return dest;\n        }\n        else if (time >= 1.0) {\n            dest.xyzw = q2.xyzw;\n            return dest;\n        }\n        let cos = quat.dot(q1, q2);\n        const q2a = q2.copy();\n        if (cos < 0.0) {\n            q2a.inverse();\n            cos = -cos;\n        }\n        let k0;\n        let k1;\n        if (cos > 0.9999) {\n            k0 = 1 - time;\n            k1 = 0 + time;\n        }\n        else {\n            const sin = Math.sqrt(1 - cos * cos);\n            const angle = Math.atan2(sin, cos);\n            const oneOverSin = 1 / sin;\n            k0 = Math.sin((1 - time) * angle) * oneOverSin;\n            k1 = Math.sin((0 + time) * angle) * oneOverSin;\n        }\n        dest.x = k0 * q1.x + k1 * q2a.x;\n        dest.y = k0 * q1.y + k1 * q2a.y;\n        dest.z = k0 * q1.z + k1 * q2a.z;\n        dest.w = k0 * q1.w + k1 * q2a.w;\n        return dest;\n    }\n    static mix(q1, q2, time, dest) {\n        if (!dest) {\n            dest = new quat();\n        }\n        const cosHalfTheta = q1.x * q2.x + q1.y * q2.y + q1.z * q2.z + q1.w * q2.w;\n        if (Math.abs(cosHalfTheta) >= 1.0) {\n            dest.xyzw = q1.xyzw;\n            return dest;\n        }\n        const halfTheta = Math.acos(cosHalfTheta);\n        const sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);\n        if (Math.abs(sinHalfTheta) < 0.001) {\n            dest.x = q1.x * 0.5 + q2.x * 0.5;\n            dest.y = q1.y * 0.5 + q2.y * 0.5;\n            dest.z = q1.z * 0.5 + q2.z * 0.5;\n            dest.w = q1.w * 0.5 + q2.w * 0.5;\n            return dest;\n        }\n        const ratioA = Math.sin((1 - time) * halfTheta) / sinHalfTheta;\n        const ratioB = Math.sin(time * halfTheta) / sinHalfTheta;\n        dest.x = q1.x * ratioA + q2.x * ratioB;\n        dest.y = q1.y * ratioA + q2.y * ratioB;\n        dest.z = q1.z * ratioA + q2.z * ratioB;\n        dest.w = q1.w * ratioA + q2.w * ratioB;\n        return dest;\n    }\n    static fromAxisAngle(axis, angle, dest) {\n        if (!dest) {\n            dest = new quat();\n        }\n        angle *= 0.5;\n        const sin = Math.sin(angle);\n        dest.x = axis.x * sin;\n        dest.y = axis.y * sin;\n        dest.z = axis.z * sin;\n        dest.w = Math.cos(angle);\n        return dest;\n    }\n}\nexports[\"default\"] = quat;\nquat.identity = new quat().setIdentity();\n\n\n//# sourceURL=webpack://earthquest/./src/math/quat.ts?");

/***/ }),

/***/ "./src/math/vec2.ts":
/*!**************************!*\
  !*** ./src/math/vec2.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst vec3_1 = __importDefault(__webpack_require__(/*! ./vec3 */ \"./src/math/vec3.ts\"));\nconst constants_1 = __webpack_require__(/*! ./constants */ \"./src/math/constants.ts\");\nclass vec2 {\n    get x() {\n        return this.values[0];\n    }\n    get y() {\n        return this.values[1];\n    }\n    get xy() {\n        return [this.values[0], this.values[1]];\n    }\n    set x(value) {\n        this.values[0] = value;\n    }\n    set y(value) {\n        this.values[1] = value;\n    }\n    set xy(values) {\n        this.values[0] = values[0];\n        this.values[1] = values[1];\n    }\n    constructor(values) {\n        this.values = new Float32Array(2);\n        if (values !== undefined) {\n            this.xy = values;\n        }\n    }\n    at(index) {\n        return this.values[index];\n    }\n    reset() {\n        this.x = 0;\n        this.y = 0;\n    }\n    copy(dest) {\n        if (!dest) {\n            dest = new vec2();\n        }\n        dest.x = this.x;\n        dest.y = this.y;\n        return dest;\n    }\n    negate(dest) {\n        if (!dest) {\n            dest = this;\n        }\n        dest.x = -this.x;\n        dest.y = -this.y;\n        return dest;\n    }\n    equals(vector, threshold = constants_1.epsilon) {\n        if (Math.abs(this.x - vector.x) > threshold) {\n            return false;\n        }\n        if (Math.abs(this.y - vector.y) > threshold) {\n            return false;\n        }\n        return true;\n    }\n    length() {\n        return Math.sqrt(this.squaredLength());\n    }\n    squaredLength() {\n        const x = this.x;\n        const y = this.y;\n        return x * x + y * y;\n    }\n    add(vector) {\n        this.x += vector.x;\n        this.y += vector.y;\n        return this;\n    }\n    subtract(vector) {\n        this.x -= vector.x;\n        this.y -= vector.y;\n        return this;\n    }\n    multiply(vector) {\n        this.x *= vector.x;\n        this.y *= vector.y;\n        return this;\n    }\n    divide(vector) {\n        this.x /= vector.x;\n        this.y /= vector.y;\n        return this;\n    }\n    scale(value, dest) {\n        if (!dest) {\n            dest = this;\n        }\n        dest.x *= value;\n        dest.y *= value;\n        return dest;\n    }\n    normalize(dest) {\n        if (!dest) {\n            dest = this;\n        }\n        let length = this.length();\n        if (length === 1) {\n            return this;\n        }\n        if (length === 0) {\n            dest.x = 0;\n            dest.y = 0;\n            return dest;\n        }\n        length = 1.0 / length;\n        dest.x *= length;\n        dest.y *= length;\n        return dest;\n    }\n    multiplyMat2(matrix, dest) {\n        if (!dest) {\n            dest = this;\n        }\n        return matrix.multiplyVec2(this, dest);\n    }\n    multiplyMat3(matrix, dest) {\n        if (!dest) {\n            dest = this;\n        }\n        return matrix.multiplyVec2(this, dest);\n    }\n    static cross(vector, vector2, dest) {\n        if (!dest) {\n            dest = new vec3_1.default();\n        }\n        const x = vector.x;\n        const y = vector.y;\n        const x2 = vector2.x;\n        const y2 = vector2.y;\n        const z = x * y2 - y * x2;\n        dest.x = 0;\n        dest.y = 0;\n        dest.z = z;\n        return dest;\n    }\n    static dot(vector, vector2) {\n        return vector.x * vector2.x + vector.y * vector2.y;\n    }\n    static distance(vector, vector2) {\n        return Math.sqrt(this.squaredDistance(vector, vector2));\n    }\n    static squaredDistance(vector, vector2) {\n        const x = vector2.x - vector.x;\n        const y = vector2.y - vector.y;\n        return x * x + y * y;\n    }\n    static direction(vector, vector2, dest) {\n        if (!dest) {\n            dest = new vec2();\n        }\n        const x = vector.x - vector2.x;\n        const y = vector.y - vector2.y;\n        let length = Math.sqrt(x * x + y * y);\n        if (length === 0) {\n            dest.x = 0;\n            dest.y = 0;\n            return dest;\n        }\n        length = 1 / length;\n        dest.x = x * length;\n        dest.y = y * length;\n        return dest;\n    }\n    static mix(vector, vector2, time, dest) {\n        if (!dest) {\n            dest = new vec2();\n        }\n        const x = vector.x;\n        const y = vector.y;\n        const x2 = vector2.x;\n        const y2 = vector2.y;\n        dest.x = x + time * (x2 - x);\n        dest.y = y + time * (y2 - y);\n        return dest;\n    }\n    static sum(vector, vector2, dest) {\n        if (!dest) {\n            dest = new vec2();\n        }\n        dest.x = vector.x + vector2.x;\n        dest.y = vector.y + vector2.y;\n        return dest;\n    }\n    static difference(vector, vector2, dest) {\n        if (!dest) {\n            dest = new vec2();\n        }\n        dest.x = vector.x - vector2.x;\n        dest.y = vector.y - vector2.y;\n        return dest;\n    }\n    static product(vector, vector2, dest) {\n        if (!dest) {\n            dest = new vec2();\n        }\n        dest.x = vector.x * vector2.x;\n        dest.y = vector.y * vector2.y;\n        return dest;\n    }\n    static quotient(vector, vector2, dest) {\n        if (!dest) {\n            dest = new vec2();\n        }\n        dest.x = vector.x / vector2.x;\n        dest.y = vector.y / vector2.y;\n        return dest;\n    }\n    toString() {\n        return this.x.toFixed(5) + ', ' + this.y.toFixed(5);\n    }\n}\nexports[\"default\"] = vec2;\nvec2.zero = new vec2([0, 0]);\nvec2.one = new vec2([1, 1]);\n\n\n//# sourceURL=webpack://earthquest/./src/math/vec2.ts?");

/***/ }),

/***/ "./src/math/vec3.ts":
/*!**************************!*\
  !*** ./src/math/vec3.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst quat_1 = __importDefault(__webpack_require__(/*! ./quat */ \"./src/math/quat.ts\"));\nconst constants_1 = __webpack_require__(/*! ./constants */ \"./src/math/constants.ts\");\nclass vec3 {\n    get x() {\n        return this.values[0];\n    }\n    get y() {\n        return this.values[1];\n    }\n    get z() {\n        return this.values[2];\n    }\n    get xy() {\n        return [this.values[0], this.values[1]];\n    }\n    get xyz() {\n        return [this.values[0], this.values[1], this.values[2]];\n    }\n    set x(value) {\n        this.values[0] = value;\n    }\n    set y(value) {\n        this.values[1] = value;\n    }\n    set z(value) {\n        this.values[2] = value;\n    }\n    set xy(values) {\n        this.values[0] = values[0];\n        this.values[1] = values[1];\n    }\n    set xyz(values) {\n        this.values[0] = values[0];\n        this.values[1] = values[1];\n        this.values[2] = values[2];\n    }\n    constructor(values, y, z) {\n        this.values = new Float32Array(3);\n        if (values !== undefined) {\n            if (typeof values === 'number') {\n                this.values[0] = values;\n            }\n            else if (Array.isArray(values)) {\n                this.xyz = values;\n            }\n            if (y !== undefined) {\n                this.values[1] = y;\n            }\n            if (y !== undefined) {\n                this.values[2] = z;\n            }\n        }\n    }\n    at(index) {\n        return this.values[index];\n    }\n    reset() {\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n    }\n    copy(dest) {\n        if (!dest) {\n            dest = new vec3();\n        }\n        dest.x = this.x;\n        dest.y = this.y;\n        dest.z = this.z;\n        return dest;\n    }\n    negate(dest) {\n        if (!dest) {\n            dest = this;\n        }\n        dest.x = -this.x;\n        dest.y = -this.y;\n        dest.z = -this.z;\n        return dest;\n    }\n    equals(vector, threshold = constants_1.epsilon) {\n        if (Math.abs(this.x - vector.x) > threshold) {\n            return false;\n        }\n        if (Math.abs(this.y - vector.y) > threshold) {\n            return false;\n        }\n        if (Math.abs(this.z - vector.z) > threshold) {\n            return false;\n        }\n        return true;\n    }\n    length() {\n        return Math.sqrt(this.squaredLength());\n    }\n    squaredLength() {\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        return x * x + y * y + z * z;\n    }\n    add(vector) {\n        this.x += vector.x;\n        this.y += vector.y;\n        this.z += vector.z;\n        return this;\n    }\n    subtract(vector) {\n        this.x -= vector.x;\n        this.y -= vector.y;\n        this.z -= vector.z;\n        return this;\n    }\n    multiply(vector) {\n        this.x *= vector.x;\n        this.y *= vector.y;\n        this.z *= vector.z;\n        return this;\n    }\n    divide(vector) {\n        this.x /= vector.x;\n        this.y /= vector.y;\n        this.z /= vector.z;\n        return this;\n    }\n    scale(value, dest) {\n        if (!dest) {\n            dest = this;\n        }\n        dest.x *= value;\n        dest.y *= value;\n        dest.z *= value;\n        return dest;\n    }\n    normalize(dest) {\n        if (!dest) {\n            dest = this;\n        }\n        let length = this.length();\n        if (length === 1) {\n            return this;\n        }\n        if (length === 0) {\n            dest.x = 0;\n            dest.y = 0;\n            dest.z = 0;\n            return dest;\n        }\n        length = 1.0 / length;\n        dest.x *= length;\n        dest.y *= length;\n        dest.z *= length;\n        return dest;\n    }\n    multiplyByMat3(matrix, dest) {\n        if (!dest) {\n            dest = this;\n        }\n        return matrix.multiplyVec3(this, dest);\n    }\n    multiplyByQuat(quaternion, dest) {\n        if (!dest) {\n            dest = this;\n        }\n        return quaternion.multiplyVec3(this, dest);\n    }\n    toQuat(dest) {\n        if (!dest) {\n            dest = new quat_1.default();\n        }\n        const c = new vec3();\n        const s = new vec3();\n        c.x = Math.cos(this.x * 0.5);\n        s.x = Math.sin(this.x * 0.5);\n        c.y = Math.cos(this.y * 0.5);\n        s.y = Math.sin(this.y * 0.5);\n        c.z = Math.cos(this.z * 0.5);\n        s.z = Math.sin(this.z * 0.5);\n        dest.x = s.x * c.y * c.z - c.x * s.y * s.z;\n        dest.y = c.x * s.y * c.z + s.x * c.y * s.z;\n        dest.z = c.x * c.y * s.z - s.x * s.y * c.z;\n        dest.w = c.x * c.y * c.z + s.x * s.y * s.z;\n        return dest;\n    }\n    static cross(vector, vector2, dest) {\n        if (!dest) {\n            dest = new vec3();\n        }\n        const x = vector.x;\n        const y = vector.y;\n        const z = vector.z;\n        const x2 = vector2.x;\n        const y2 = vector2.y;\n        const z2 = vector2.z;\n        dest.x = y * z2 - z * y2;\n        dest.y = z * x2 - x * z2;\n        dest.z = x * y2 - y * x2;\n        return dest;\n    }\n    static dot(vector, vector2) {\n        const x = vector.x;\n        const y = vector.y;\n        const z = vector.z;\n        const x2 = vector2.x;\n        const y2 = vector2.y;\n        const z2 = vector2.z;\n        return x * x2 + y * y2 + z * z2;\n    }\n    static distance(vector, vector2) {\n        const x = vector2.x - vector.x;\n        const y = vector2.y - vector.y;\n        const z = vector2.z - vector.z;\n        return Math.sqrt(this.squaredDistance(vector, vector2));\n    }\n    static squaredDistance(vector, vector2) {\n        const x = vector2.x - vector.x;\n        const y = vector2.y - vector.y;\n        const z = vector2.z - vector.z;\n        return x * x + y * y + z * z;\n    }\n    static direction(vector, vector2, dest) {\n        if (!dest) {\n            dest = new vec3();\n        }\n        const x = vector.x - vector2.x;\n        const y = vector.y - vector2.y;\n        const z = vector.z - vector2.z;\n        let length = Math.sqrt(x * x + y * y + z * z);\n        if (length === 0) {\n            dest.x = 0;\n            dest.y = 0;\n            dest.z = 0;\n            return dest;\n        }\n        length = 1 / length;\n        dest.x = x * length;\n        dest.y = y * length;\n        dest.z = z * length;\n        return dest;\n    }\n    static mix(vector, vector2, time, dest) {\n        if (!dest) {\n            dest = new vec3();\n        }\n        dest.x = vector.x + time * (vector2.x - vector.x);\n        dest.y = vector.y + time * (vector2.y - vector.y);\n        dest.z = vector.z + time * (vector2.z - vector.z);\n        return dest;\n    }\n    static sum(vector, vector2, dest) {\n        if (!dest) {\n            dest = new vec3();\n        }\n        dest.x = vector.x + vector2.x;\n        dest.y = vector.y + vector2.y;\n        dest.z = vector.z + vector2.z;\n        return dest;\n    }\n    static difference(vector, vector2, dest) {\n        if (!dest) {\n            dest = new vec3();\n        }\n        dest.x = vector.x - vector2.x;\n        dest.y = vector.y - vector2.y;\n        dest.z = vector.z - vector2.z;\n        return dest;\n    }\n    static product(vector, vector2, dest) {\n        if (!dest) {\n            dest = new vec3();\n        }\n        dest.x = vector.x * vector2.x;\n        dest.y = vector.y * vector2.y;\n        dest.z = vector.z * vector2.z;\n        return dest;\n    }\n    static quotient(vector, vector2, dest) {\n        if (!dest) {\n            dest = new vec3();\n        }\n        dest.x = vector.x / vector2.x;\n        dest.y = vector.y / vector2.y;\n        dest.z = vector.z / vector2.z;\n        return dest;\n    }\n    toString() {\n        return (this.x.toFixed(5) + ', ' + this.y.toFixed(5) + ', ' + this.z.toFixed(5));\n    }\n}\nexports[\"default\"] = vec3;\nvec3.zero = new vec3([0, 0, 0]);\nvec3.one = new vec3([1, 1, 1]);\nvec3.up = new vec3([0, 1, 0]);\nvec3.right = new vec3([1, 0, 0]);\nvec3.forward = new vec3([0, 0, 1]);\n\n\n//# sourceURL=webpack://earthquest/./src/math/vec3.ts?");

/***/ }),

/***/ "./src/math/vec4.ts":
/*!**************************!*\
  !*** ./src/math/vec4.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst constants_1 = __webpack_require__(/*! ./constants */ \"./src/math/constants.ts\");\nclass vec4 {\n    get x() {\n        return this.values[0];\n    }\n    get y() {\n        return this.values[1];\n    }\n    get z() {\n        return this.values[2];\n    }\n    get w() {\n        return this.values[3];\n    }\n    get xy() {\n        return [this.values[0], this.values[1]];\n    }\n    get xyz() {\n        return [this.values[0], this.values[1], this.values[2]];\n    }\n    get xyzw() {\n        return [this.values[0], this.values[1], this.values[2], this.values[3]];\n    }\n    set x(value) {\n        this.values[0] = value;\n    }\n    set y(value) {\n        this.values[1] = value;\n    }\n    set z(value) {\n        this.values[2] = value;\n    }\n    set w(value) {\n        this.values[3] = value;\n    }\n    set xy(values) {\n        this.values[0] = values[0];\n        this.values[1] = values[1];\n    }\n    set xyz(values) {\n        this.values[0] = values[0];\n        this.values[1] = values[1];\n        this.values[2] = values[2];\n    }\n    set xyzw(values) {\n        this.values[0] = values[0];\n        this.values[1] = values[1];\n        this.values[2] = values[2];\n        this.values[3] = values[3];\n    }\n    get r() {\n        return this.values[0];\n    }\n    get g() {\n        return this.values[1];\n    }\n    get b() {\n        return this.values[2];\n    }\n    get a() {\n        return this.values[3];\n    }\n    get rg() {\n        return [this.values[0], this.values[1]];\n    }\n    get rgb() {\n        return [this.values[0], this.values[1], this.values[2]];\n    }\n    get rgba() {\n        return [this.values[0], this.values[1], this.values[2], this.values[3]];\n    }\n    set r(value) {\n        this.values[0] = value;\n    }\n    set g(value) {\n        this.values[1] = value;\n    }\n    set b(value) {\n        this.values[2] = value;\n    }\n    set a(value) {\n        this.values[3] = value;\n    }\n    set rg(values) {\n        this.values[0] = values[0];\n        this.values[1] = values[1];\n    }\n    set rgb(values) {\n        this.values[0] = values[0];\n        this.values[1] = values[1];\n        this.values[2] = values[2];\n    }\n    set rgba(values) {\n        this.values[0] = values[0];\n        this.values[1] = values[1];\n        this.values[2] = values[2];\n        this.values[3] = values[3];\n    }\n    constructor(values) {\n        this.values = new Float32Array(4);\n        if (values !== undefined) {\n            this.xyzw = values;\n        }\n    }\n    at(index) {\n        return this.values[index];\n    }\n    reset() {\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n        this.w = 0;\n    }\n    copy(dest) {\n        if (!dest) {\n            dest = new vec4();\n        }\n        dest.x = this.x;\n        dest.y = this.y;\n        dest.z = this.z;\n        dest.w = this.w;\n        return dest;\n    }\n    negate(dest) {\n        if (!dest) {\n            dest = this;\n        }\n        dest.x = -this.x;\n        dest.y = -this.y;\n        dest.z = -this.z;\n        dest.w = -this.w;\n        return dest;\n    }\n    equals(vector, threshold = constants_1.epsilon) {\n        if (Math.abs(this.x - vector.x) > threshold) {\n            return false;\n        }\n        if (Math.abs(this.y - vector.y) > threshold) {\n            return false;\n        }\n        if (Math.abs(this.z - vector.z) > threshold) {\n            return false;\n        }\n        if (Math.abs(this.w - vector.w) > threshold) {\n            return false;\n        }\n        return true;\n    }\n    length() {\n        return Math.sqrt(this.squaredLength());\n    }\n    squaredLength() {\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        const w = this.w;\n        return x * x + y * y + z * z + w * w;\n    }\n    add(vector) {\n        this.x += vector.x;\n        this.y += vector.y;\n        this.z += vector.z;\n        this.w += vector.w;\n        return this;\n    }\n    subtract(vector) {\n        this.x -= vector.x;\n        this.y -= vector.y;\n        this.z -= vector.z;\n        this.w -= vector.w;\n        return this;\n    }\n    multiply(vector) {\n        this.x *= vector.x;\n        this.y *= vector.y;\n        this.z *= vector.z;\n        this.w *= vector.w;\n        return this;\n    }\n    divide(vector) {\n        this.x /= vector.x;\n        this.y /= vector.y;\n        this.z /= vector.z;\n        this.w /= vector.w;\n        return this;\n    }\n    scale(value, dest) {\n        if (!dest) {\n            dest = this;\n        }\n        dest.x *= value;\n        dest.y *= value;\n        dest.z *= value;\n        dest.w *= value;\n        return dest;\n    }\n    normalize(dest) {\n        if (!dest) {\n            dest = this;\n        }\n        let length = this.length();\n        if (length === 1) {\n            return this;\n        }\n        if (length === 0) {\n            dest.x *= 0;\n            dest.y *= 0;\n            dest.z *= 0;\n            dest.w *= 0;\n            return dest;\n        }\n        length = 1.0 / length;\n        dest.x *= length;\n        dest.y *= length;\n        dest.z *= length;\n        dest.w *= length;\n        return dest;\n    }\n    multiplyMat4(matrix, dest) {\n        if (!dest) {\n            dest = this;\n        }\n        return matrix.multiplyVec4(this, dest);\n    }\n    static mix(vector, vector2, time, dest) {\n        if (!dest) {\n            dest = new vec4();\n        }\n        dest.x = vector.x + time * (vector2.x - vector.x);\n        dest.y = vector.y + time * (vector2.y - vector.y);\n        dest.z = vector.z + time * (vector2.z - vector.z);\n        dest.w = vector.w + time * (vector2.w - vector.w);\n        return dest;\n    }\n    static sum(vector, vector2, dest) {\n        if (!dest) {\n            dest = new vec4();\n        }\n        dest.x = vector.x + vector2.x;\n        dest.y = vector.y + vector2.y;\n        dest.z = vector.z + vector2.z;\n        dest.w = vector.w + vector2.w;\n        return dest;\n    }\n    static difference(vector, vector2, dest) {\n        if (!dest) {\n            dest = new vec4();\n        }\n        dest.x = vector.x - vector2.x;\n        dest.y = vector.y - vector2.y;\n        dest.z = vector.z - vector2.z;\n        dest.w = vector.w - vector2.w;\n        return dest;\n    }\n    static product(vector, vector2, dest) {\n        if (!dest) {\n            dest = new vec4();\n        }\n        dest.x = vector.x * vector2.x;\n        dest.y = vector.y * vector2.y;\n        dest.z = vector.z * vector2.z;\n        dest.w = vector.w * vector2.w;\n        return dest;\n    }\n    static quotient(vector, vector2, dest) {\n        if (!dest) {\n            dest = new vec4();\n        }\n        dest.x = vector.x / vector2.x;\n        dest.y = vector.y / vector2.y;\n        dest.z = vector.z / vector2.z;\n        dest.w = vector.w / vector2.w;\n        return dest;\n    }\n    toString() {\n        return (this.x.toFixed(5) +\n            ', ' +\n            this.y.toFixed(5) +\n            ', ' +\n            this.z.toFixed(5) +\n            ', ' +\n            this.a.toFixed(5));\n    }\n}\nexports[\"default\"] = vec4;\nvec4.zero = new vec4([0, 0, 0, 1]);\nvec4.one = new vec4([1, 1, 1, 1]);\n\n\n//# sourceURL=webpack://earthquest/./src/math/vec4.ts?");

/***/ }),

/***/ "./src/menus/DialogMenu.ts":
/*!*********************************!*\
  !*** ./src/menus/DialogMenu.ts ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DialogMenu = void 0;\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\nconst menu_png_1 = __importDefault(__webpack_require__(/*! ../assets/menu.png */ \"./src/assets/menu.png\"));\nconst Texture_1 = __webpack_require__(/*! ../graphics/Texture */ \"./src/graphics/Texture.ts\");\nconst SpriteBatchController_1 = __webpack_require__(/*! ../graphics/SpriteBatchController */ \"./src/graphics/SpriteBatchController.ts\");\n/**\n * Test sprite batch vs normal sprites\n */\nclass DialogMenu extends Component_1.Component {\n    constructor(eng) {\n        super(eng);\n        this._spriteBatch = new SpriteBatchController_1.SpritBatchController(eng);\n    }\n    /**\n     * Simulate some menu data\n     */\n    async initialize() {\n        const spriteData = [\n            {\n                id: 'menu.top.right',\n                loc: [0, 0, 7, 7],\n            },\n            {\n                id: 'menu.top.left',\n                loc: [16, 0, 7, 7],\n            },\n            {\n                id: 'menu.bottom.left',\n                loc: [16, 13, 7, 7],\n            },\n            {\n                id: 'menu.bottom.right',\n                loc: [0, 13, 7, 7],\n            },\n            {\n                id: 'menu.bottom',\n                loc: [8, 13, 7, 7],\n            },\n            {\n                id: 'menu.right',\n                loc: [16, 7, 7, 7],\n            },\n            {\n                id: 'menu.left',\n                loc: [0, 7, 7, 7],\n            },\n            {\n                id: 'menu.top',\n                loc: [8, 0, 7, 7],\n            },\n            {\n                id: 'menu.cursor',\n                loc: [27, 6, 12, 9],\n            },\n        ];\n        const texture = new Texture_1.Texture(this.gl);\n        await texture.loadImage(menu_png_1.default);\n        this._spriteBatch.initialize(texture, spriteData);\n        let step = 0;\n        //TODO add the menu parts to the sprite batch\n        //this._spriteBatch.setSprite('sprite_' + i, 0);\n        //this._spriteBatch.setSpritePosition('sprite_' + i, x, y, 5, 0.5);\n        this._spriteBatch.commitToBuffer();\n    }\n    /**\n     * Handles user input. The logic goes through a chain of command.\n     * @param action the action from keyboard or gamepad\n     * @returns True if the action was handled else false\n     */\n    handleUserAction(action) {\n        return false;\n    }\n    /**\n     * Renders the sprites or sprite batches\n     * @param dt\n     */\n    update(dt) {\n        this._spriteBatch.update(dt);\n    }\n}\nexports.DialogMenu = DialogMenu;\n\n\n//# sourceURL=webpack://earthquest/./src/menus/DialogMenu.ts?");

/***/ }),

/***/ "./src/shaders/SpritePerspectiveShader.ts":
/*!************************************************!*\
  !*** ./src/shaders/SpritePerspectiveShader.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SpritePerspectiveShader = void 0;\nconst ShaderController_1 = __webpack_require__(/*! ../graphics/ShaderController */ \"./src/graphics/ShaderController.ts\");\n//\n// Vertex Shader program\n//\nconst vsSource = `\nattribute vec3 aPos;\nattribute vec2 aTex;\nuniform mat4 uProj;\nvarying mediump vec2 vTex;\nvarying mediump vec3 depth;\n\nvoid main() {\n    vTex = aTex;\n    vec4 pos = uProj * vec4(aPos.xyz, 1.0);\n    gl_Position =  pos;\n    depth = vec3((pos.z + 1.0) *.5);\n}\n`;\n//\n// Fragment shader program\n//\nconst fsSource = `\nvarying mediump vec2 vTex;\nvarying mediump  vec3 depth;\nuniform sampler2D uSampler;\n\nvoid main() {\n  mediump vec4 color = texture2D(uSampler, vTex);\n    if(color.a < 1.0) {\n      discard;\n    } \n    // uncomment to show depth\n    //gl_FragColor = vec4(depth.xyz, 1.0);\n    gl_FragColor = color;\n}\n`;\n/**\n * Shader for sprites\n */\nclass SpritePerspectiveShader {\n    constructor(gl, shaderId) {\n        this.gl = gl;\n        this._shader = new ShaderController_1.ShaderController(this.gl, shaderId);\n        this._shader.initShaderProgram(vsSource, fsSource);\n        // set the info\n        this._aPos = this._shader.getAttribute('aPos');\n        this._aTex = this._shader.getAttribute('aTex');\n        this._uSampler = this._shader.getUniform('uSampler');\n        this._uProj = this._shader.getUniform('uProj');\n    }\n    setProj(proj) {\n        this._shader.setMat4(this._uProj, proj);\n    }\n    setSpriteSheet(texture) {\n        this._texture = texture;\n    }\n    enable() {\n        this._shader.enable();\n        if (!this._texture) {\n            console.warn('texture is null. Call setSpriteSheet()');\n        }\n        else {\n            // Bind the texture to texture unit 0\n            this._texture.enable(this._uSampler);\n        }\n    }\n}\nexports.SpritePerspectiveShader = SpritePerspectiveShader;\n\n\n//# sourceURL=webpack://earthquest/./src/shaders/SpritePerspectiveShader.ts?");

/***/ }),

/***/ "./src/systems/TextManager.ts":
/*!************************************!*\
  !*** ./src/systems/TextManager.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TextManager = void 0;\nconst TextController_1 = __webpack_require__(/*! ../graphics/TextController */ \"./src/graphics/TextController.ts\");\nconst ShaderController_1 = __webpack_require__(/*! ../graphics/ShaderController */ \"./src/graphics/ShaderController.ts\");\nconst Texture_1 = __webpack_require__(/*! ../graphics/Texture */ \"./src/graphics/Texture.ts\");\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\n/**\n * Vertex shader for Font\n */\nconst FontVS = `\n    attribute vec3 aPos;\n    attribute vec2 aTex;\n\n    varying mediump vec2 vTex;\n                                                \n    void main() {\n        vTex = aTex;\n        gl_Position = vec4(aPos.xyz, 1.0);\n    }                          \n`;\n/**\n * Fragment shader for Font\n */\nconst FontFS = ` \n      varying mediump vec2 vTex;\n\n      uniform sampler2D uFont;\n      uniform mediump vec4 uColor;\n                            \n      void main() {\n        mediump vec4 color = texture2D(uFont, vTex) * uColor;\n        if(color.w > 0.2) { \n          gl_FragColor = texture2D(uFont, vTex) * uColor;\n        } else {\n          discard;\n        }\n      }\n`;\n/**\n * Font manager keeps track of all FontController objects\n */\nclass TextManager extends Component_1.Component {\n    constructor(eng) {\n        super(eng);\n        this.texts = new Map();\n        this.shader = new ShaderController_1.ShaderController(this.gl, 'fontShader');\n        this.fontTexture = new Texture_1.Texture(this.gl);\n        /** Shader info for this shader */\n        this.shaderInfo = {\n            attr: { aPos: 0, aTex: 0 },\n            uniform: { uFont: 0, uColor: 0 },\n        };\n    }\n    /**\n     * Initialize the font manage. Only one font can be used per manager\n     * The font data is a json structure.\n     * @param {} fontImage\n     * @param {FontData} fontData\n     */\n    async initialize(fontImage, fontData) {\n        this.fontImage = fontImage;\n        this.fontData = fontData;\n        await this.fontTexture.loadImage(fontImage);\n        this.shader.initShaderProgram(FontVS, FontFS);\n        this.shaderInfo.attr.aPos = this.shader.getAttribute('aPos');\n        this.shaderInfo.attr.aTex = this.shader.getAttribute('aTex');\n        this.shaderInfo.uniform.uFont = this.shader.getUniform('uFont');\n        this.shaderInfo.uniform.uColor = this.shader.getUniform('uColor');\n        // find the tallest character. This will be used when calculating new lines\n        this.maxHeightOfCharacters = 0;\n        fontData.forEach((value) => {\n            if (value.sizeY > this.maxHeightOfCharacters) {\n                this.maxHeightOfCharacters = value.sizeY;\n            }\n        });\n        // reset the text controllers\n        this.texts.clear();\n    }\n    /**\n     * Updates all the TextureController\n     * @param {number} dt Delta time in ms\n     */\n    update(dt) {\n        // enable the shader\n        this.shader.enable();\n        // Bind the texture to texture unit 0\n        this.fontTexture.enable(this.shaderInfo.uniform.uFont);\n        this.texts.forEach((text) => {\n            this.shader.setVec4(this.shaderInfo.uniform.uColor, text.color);\n            this.shaderInfo.uniform.uColor;\n            text.update(dt);\n        });\n    }\n    setTextBlock(textModel) {\n        let controller = this.texts.get(textModel.id);\n        // create one if needed\n        if (!controller) {\n            controller = new TextController_1.TextController(this.eng, this.fontData);\n            this.texts.set(textModel.id, controller);\n        }\n        controller.initialize(textModel, this.maxHeightOfCharacters, this.gl.canvas.width, this.gl.canvas.height);\n    }\n    /**\n     * clean up everything\n     */\n    dispose() { }\n}\nexports.TextManager = TextManager;\n\n\n//# sourceURL=webpack://earthquest/./src/systems/TextManager.ts?");

/***/ }),

/***/ "./src/systems/TileManager.ts":
/*!************************************!*\
  !*** ./src/systems/TileManager.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TileManager = void 0;\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\nconst mat4_1 = __importDefault(__webpack_require__(/*! ../math/mat4 */ \"./src/math/mat4.ts\"));\nconst vec3_1 = __importDefault(__webpack_require__(/*! ../math/vec3 */ \"./src/math/vec3.ts\"));\n/**\n * This class is used to convert tile and screen coordinates\n */\nclass TileManager extends Component_1.Component {\n    constructor(eng) {\n        super(eng);\n        this.calculateTransform();\n    }\n    calculateTransform() {\n        const screenWidth = this.eng.width;\n        const screenHeight = this.eng.height;\n        const scale = 2.0;\n        const tileSize = 32;\n        const cellSize = tileSize * scale;\n        const halfCell = cellSize * 0.5;\n        const quarterCell = cellSize * 0.25;\n        const xAxis = new vec3_1.default([halfCell, -halfCell, 0]);\n        const yAxis = new vec3_1.default([-quarterCell, -quarterCell, halfCell]);\n        const zAxis = new vec3_1.default([\n            (-quarterCell / screenHeight) * 2,\n            (-quarterCell / screenHeight) * 2,\n            0,\n        ]);\n        // translation part\n        const halfWidth = screenWidth * 0.5;\n        const heightOffset = screenHeight - quarterCell;\n        const trans = new vec3_1.default([halfWidth, heightOffset, 1]);\n        // create matrix\n        this._toScreen = new mat4_1.default([\n            xAxis.x,\n            yAxis.x,\n            zAxis.x,\n            0,\n            xAxis.y,\n            yAxis.y,\n            zAxis.y,\n            0,\n            xAxis.z,\n            yAxis.z,\n            zAxis.z,\n            0,\n            trans.x,\n            trans.y,\n            trans.z,\n            1.0,\n        ]);\n        this._toTile = this._toScreen.copy();\n        this._toTile.inverse();\n    }\n    screenVectorToTileSpace(screenVector) {\n        const xAxis = this._toTile.col(0);\n        const yAxis = this._toTile.col(1);\n        const right = new vec3_1.default(0.5, -0.5, 0);\n        const up = new vec3_1.default(-0.5, -0.5, 0);\n        const x = vec3_1.default.dot(screenVector, right.normalize());\n        const y = vec3_1.default.dot(screenVector, up.normalize());\n        return new vec3_1.default(x, y, 0);\n    }\n    toTileLoc(x, y, z) {\n        const screen = new vec3_1.default([x, y, z]);\n        let cell = this._toTile.multiplyVec3(screen);\n        return { i: cell.x, j: cell.y, k: cell.z };\n    }\n    toScreenLoc(i, j, k) {\n        const screen = new vec3_1.default([i, j, k]);\n        return this._toScreen.multiplyVec3(screen);\n    }\n}\nexports.TileManager = TileManager;\n\n\n//# sourceURL=webpack://earthquest/./src/systems/TileManager.ts?");

/***/ }),

/***/ "./src/utilities/CreateSimpleAnimationClip.ts":
/*!****************************************************!*\
  !*** ./src/utilities/CreateSimpleAnimationClip.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CreateSimpleAnimationClip = void 0;\n/**\n * This will create a animation clip that can be modified manually after it is copied from the console window.\n */\nclass CreateSimpleAnimationClip {\n    static create(spriteData) {\n        let clip = [];\n        let frame = 0;\n        const frameStep = 15; //  500 ms\n        // put all the sprites in an animation clip\n        spriteData.forEach((sprite) => {\n            clip.push({\n                id: sprite.id,\n                frame: frame,\n            });\n            frame += frameStep;\n        });\n        // open the browser and copy this from the console and paste it into a new json file.\n        console.debug('animation clip ', clip);\n    }\n}\nexports.CreateSimpleAnimationClip = CreateSimpleAnimationClip;\n\n\n//# sourceURL=webpack://earthquest/./src/utilities/CreateSimpleAnimationClip.ts?");

/***/ }),

/***/ "./src/assets/IsometricTile.json":
/*!***************************************!*\
  !*** ./src/assets/IsometricTile.json ***!
  \***************************************/
/***/ ((module) => {

eval("module.exports = JSON.parse('[{\"id\":\"block\",\"loc\":[16,0,32,32],\"offset\":[-32,-48]},{\"id\":\"slop.left\",\"loc\":[48,0,32,32],\"offset\":[-32,-48]},{\"id\":\"slop.right\",\"loc\":[80,0,32,32],\"offset\":[-32,-48]},{\"id\":\"block.half\",\"loc\":[112,0,32,32],\"offset\":[-32,-48]},{\"id\":\"block.half.highlight\",\"loc\":[144,0,32,32],\"offset\":[-32,-48]},{\"id\":\"empty\",\"loc\":[64,32,32,32],\"offset\":[-32,-48]},{\"id\":\"tree\",\"loc\":[0,32,64,80],\"offset\":[-64,-48]},{\"id\":\"slop.back.right\",\"loc\":[96,32,32,32],\"offset\":[-32,-48]},{\"id\":\"slop.back.left\",\"loc\":[128,32,32,32],\"offset\":[-32,-48]},{\"id\":\"block.highlight\",\"loc\":[176,0,32,32],\"offset\":[-32,-48]}]');\n\n//# sourceURL=webpack://earthquest/./src/assets/IsometricTile.json?");

/***/ }),

/***/ "./src/assets/characters.json":
/*!************************************!*\
  !*** ./src/assets/characters.json ***!
  \************************************/
/***/ ((module) => {

eval("module.exports = JSON.parse('[{\"id\":\"ness.down.step.left\",\"loc\":[2,24,16,24],\"offset\":[-16,-16]},{\"id\":\"ness.down.step.right\",\"loc\":[19,24,16,24],\"offset\":[-16,-16]},{\"id\":\"ness.up.step\",\"loc\":[36,24,16,24],\"offset\":[-16,-16]},{\"id\":\"ness.left.stand\",\"loc\":[53,24,16,24],\"offset\":[-16,-16]},{\"id\":\"ness.left.step\",\"loc\":[70,24,16,24],\"offset\":[-16,-16]},{\"id\":\"ness.scared\",\"loc\":[120,24,16,24],\"offset\":[-16,-16]},{\"id\":\"ness.climb\",\"loc\":[137,24,16,24],\"offset\":[-16,-16]},{\"id\":\"ness.sit\",\"loc\":[155,24,16,24],\"offset\":[-16,-16]},{\"id\":\"ness.robot.down.step.right\",\"loc\":[242,24,16,24],\"offset\":[-16,-16]},{\"id\":\"ness.robot.down.step\",\"loc\":[260,24,16,24],\"offset\":[-16,-16]},{\"id\":\"ness.robot.left.stand\",\"loc\":[293,24,16,24],\"offset\":[-16,-16]},{\"id\":\"ness.robot.dead\",\"loc\":[326,32,24,16],\"offset\":[-16,-16]},{\"id\":\"ness.burn\",\"loc\":[351,24,16,24],\"offset\":[-16,-16]},{\"id\":\"ness.robot.left.stand\",\"loc\":[293,24,16,24],\"offset\":[-16,-16]},{\"id\":\"ness.robot.up.step\",\"loc\":[276,24,16,24],\"offset\":[-16,-16]},{\"id\":\"ness.down.left.stand\",\"loc\":[2,49,16,24],\"offset\":[-16,-16]},{\"id\":\"ness.down.left.step\",\"loc\":[19,49,16,24],\"offset\":[-16,-16]},{\"id\":\"ness.up.left.stand\",\"loc\":[36,49,16,24],\"offset\":[-16,-16]},{\"id\":\"ness.up.left.step\",\"loc\":[53,49,16,24],\"offset\":[-16,-16]},{\"id\":\"ness.success\",\"loc\":[70,49,16,24],\"offset\":[-16,-16]},{\"id\":\"ness.dead\",\"loc\":[87,57,24,16],\"offset\":[-16,-16]},{\"id\":\"ness.pj.down.step\",\"loc\":[176,49,16,24],\"offset\":[-16,-16]},{\"id\":\"ness.pj.up.step\",\"loc\":[193,49,16,24],\"offset\":[-16,-16]},{\"id\":\"poo.down.step\",\"loc\":[1,74,16,24],\"offset\":[-16,-16]},{\"id\":\"poo.up.step\",\"loc\":[18,74,16,24],\"offset\":[-16,-16]},{\"id\":\"poo.left.stand\",\"loc\":[34,74,16,24],\"offset\":[-16,-16]},{\"id\":\"poo.site.1\",\"loc\":[67,74,16,24],\"offset\":[-16,-16]},{\"id\":\"poo.site.2\",\"loc\":[84,74,16,24],\"offset\":[-16,-16]},{\"id\":\"poo.down.left.stand\",\"loc\":[1,99,16,24],\"offset\":[-16,-16]},{\"id\":\"poo.down.left.step\",\"loc\":[18,99,16,24],\"offset\":[-16,-16]},{\"id\":\"poo.up.left.stand\",\"loc\":[35,99,16,24],\"offset\":[-16,-16]},{\"id\":\"poo.down.left.step\",\"loc\":[50,99,16,24],\"offset\":[-16,-16]}]');\n\n//# sourceURL=webpack://earthquest/./src/assets/characters.json?");

/***/ }),

/***/ "./src/assets/font.json":
/*!******************************!*\
  !*** ./src/assets/font.json ***!
  \******************************/
/***/ ((module) => {

eval("module.exports = JSON.parse('[{\"ch\":\" \",\"value\":\"32\",\"sizeX\":0,\"sizeY\":0,\"bearingX\":0,\"bearingY\":0,\"advance\":32,\"u1\":0,\"v1\":0,\"u2\":0,\"v2\":0},{\"ch\":\"!\",\"value\":\"33\",\"sizeX\":16,\"sizeY\":86,\"bearingX\":13,\"bearingY\":84,\"advance\":43,\"u1\":0,\"v1\":0,\"u2\":0.015625,\"v2\":0.0839844},{\"ch\":\"\\\\\"\",\"value\":\"34\",\"sizeX\":38,\"sizeY\":30,\"bearingX\":7,\"bearingY\":84,\"advance\":52,\"u1\":0.015625,\"v1\":0,\"u2\":0.0527344,\"v2\":0.0292969},{\"ch\":\"#\",\"value\":\"35\",\"sizeX\":60,\"sizeY\":84,\"bearingX\":2,\"bearingY\":84,\"advance\":64,\"u1\":0.0527344,\"v1\":0,\"u2\":0.111328,\"v2\":0.0820312},{\"ch\":\"$\",\"value\":\"36\",\"sizeX\":56,\"sizeY\":103,\"bearingX\":5,\"bearingY\":93,\"advance\":64,\"u1\":0.111328,\"v1\":0,\"u2\":0.166016,\"v2\":0.100586},{\"ch\":\"%\",\"value\":\"37\",\"sizeX\":99,\"sizeY\":86,\"bearingX\":4,\"bearingY\":85,\"advance\":107,\"u1\":0.166016,\"v1\":0,\"u2\":0.262695,\"v2\":0.0839844},{\"ch\":\"&\",\"value\":\"38\",\"sizeX\":94,\"sizeY\":86,\"bearingX\":4,\"bearingY\":85,\"advance\":100,\"u1\":0.262695,\"v1\":0,\"u2\":0.354492,\"v2\":0.0839844},{\"ch\":\"\\'\",\"value\":\"39\",\"sizeX\":13,\"sizeY\":30,\"bearingX\":5,\"bearingY\":84,\"advance\":23,\"u1\":0.354492,\"v1\":0,\"u2\":0.367188,\"v2\":0.0292969},{\"ch\":\"(\",\"value\":\"40\",\"sizeX\":34,\"sizeY\":116,\"bearingX\":5,\"bearingY\":89,\"advance\":43,\"u1\":0.367188,\"v1\":0,\"u2\":0.400391,\"v2\":0.113281},{\"ch\":\")\",\"value\":\"41\",\"sizeX\":33,\"sizeY\":116,\"bearingX\":4,\"bearingY\":89,\"advance\":43,\"u1\":0.400391,\"v1\":0,\"u2\":0.432617,\"v2\":0.113281},{\"ch\":\"*\",\"value\":\"42\",\"sizeX\":52,\"sizeY\":47,\"bearingX\":6,\"bearingY\":84,\"advance\":64,\"u1\":0.432617,\"v1\":0,\"u2\":0.483398,\"v2\":0.0458984},{\"ch\":\"+\",\"value\":\"43\",\"sizeX\":60,\"sizeY\":60,\"bearingX\":6,\"bearingY\":73,\"advance\":72,\"u1\":0.483398,\"v1\":0,\"u2\":0.541992,\"v2\":0.0585938},{\"ch\":\",\",\"value\":\"44\",\"sizeX\":20,\"sizeY\":33,\"bearingX\":4,\"bearingY\":13,\"advance\":32,\"u1\":0.541992,\"v1\":0,\"u2\":0.561523,\"v2\":0.0322266},{\"ch\":\"-\",\"value\":\"45\",\"sizeX\":34,\"sizeY\":10,\"bearingX\":4,\"bearingY\":35,\"advance\":43,\"u1\":0.561523,\"v1\":0,\"u2\":0.594727,\"v2\":0.00976562},{\"ch\":\".\",\"value\":\"46\",\"sizeX\":16,\"sizeY\":15,\"bearingX\":8,\"bearingY\":13,\"advance\":32,\"u1\":0.594727,\"v1\":0,\"u2\":0.610352,\"v2\":0.0146484},{\"ch\":\"/\",\"value\":\"47\",\"sizeX\":36,\"sizeY\":85,\"bearingX\":0,\"bearingY\":84,\"advance\":36,\"u1\":0.610352,\"v1\":0,\"u2\":0.645508,\"v2\":0.0830078},{\"ch\":\"0\",\"value\":\"48\",\"sizeX\":56,\"sizeY\":86,\"bearingX\":4,\"bearingY\":85,\"advance\":64,\"u1\":0.645508,\"v1\":0,\"u2\":0.700195,\"v2\":0.0839844},{\"ch\":\"1\",\"value\":\"49\",\"sizeX\":46,\"sizeY\":85,\"bearingX\":11,\"bearingY\":85,\"advance\":64,\"u1\":0.700195,\"v1\":0,\"u2\":0.745117,\"v2\":0.0830078},{\"ch\":\"2\",\"value\":\"50\",\"sizeX\":52,\"sizeY\":85,\"bearingX\":5,\"bearingY\":85,\"advance\":64,\"u1\":0.745117,\"v1\":0,\"u2\":0.795898,\"v2\":0.0830078},{\"ch\":\"3\",\"value\":\"51\",\"sizeX\":53,\"sizeY\":86,\"bearingX\":6,\"bearingY\":85,\"advance\":64,\"u1\":0.795898,\"v1\":0,\"u2\":0.847656,\"v2\":0.0839844},{\"ch\":\"4\",\"value\":\"52\",\"sizeX\":60,\"sizeY\":84,\"bearingX\":2,\"bearingY\":84,\"advance\":64,\"u1\":0.847656,\"v1\":0,\"u2\":0.90625,\"v2\":0.0820312},{\"ch\":\"5\",\"value\":\"53\",\"sizeX\":52,\"sizeY\":85,\"bearingX\":7,\"bearingY\":84,\"advance\":64,\"u1\":0.90625,\"v1\":0,\"u2\":0.957031,\"v2\":0.0830078},{\"ch\":\"6\",\"value\":\"54\",\"sizeX\":56,\"sizeY\":86,\"bearingX\":5,\"bearingY\":85,\"advance\":64,\"u1\":0,\"v1\":0.113281,\"u2\":0.0546875,\"v2\":0.197266},{\"ch\":\"7\",\"value\":\"55\",\"sizeX\":53,\"sizeY\":84,\"bearingX\":8,\"bearingY\":84,\"advance\":64,\"u1\":0.0546875,\"v1\":0.113281,\"u2\":0.106445,\"v2\":0.195312},{\"ch\":\"8\",\"value\":\"56\",\"sizeX\":56,\"sizeY\":86,\"bearingX\":4,\"bearingY\":85,\"advance\":64,\"u1\":0.106445,\"v1\":0.113281,\"u2\":0.161133,\"v2\":0.197266},{\"ch\":\"9\",\"value\":\"57\",\"sizeX\":55,\"sizeY\":86,\"bearingX\":4,\"bearingY\":85,\"advance\":64,\"u1\":0.161133,\"v1\":0.113281,\"u2\":0.214844,\"v2\":0.197266},{\"ch\":\":\",\"value\":\"58\",\"sizeX\":16,\"sizeY\":62,\"bearingX\":10,\"bearingY\":60,\"advance\":36,\"u1\":0.214844,\"v1\":0.113281,\"u2\":0.230469,\"v2\":0.173828},{\"ch\":\";\",\"value\":\"59\",\"sizeX\":20,\"sizeY\":80,\"bearingX\":6,\"bearingY\":60,\"advance\":36,\"u1\":0.230469,\"v1\":0.113281,\"u2\":0.25,\"v2\":0.191406},{\"ch\":\"<\",\"value\":\"60\",\"sizeX\":60,\"sizeY\":61,\"bearingX\":6,\"bearingY\":73,\"advance\":72,\"u1\":0.25,\"v1\":0.113281,\"u2\":0.308594,\"v2\":0.172852},{\"ch\":\"=\",\"value\":\"61\",\"sizeX\":60,\"sizeY\":33,\"bearingX\":6,\"bearingY\":59,\"advance\":72,\"u1\":0.308594,\"v1\":0.113281,\"u2\":0.367188,\"v2\":0.145508},{\"ch\":\">\",\"value\":\"62\",\"sizeX\":61,\"sizeY\":61,\"bearingX\":6,\"bearingY\":73,\"advance\":72,\"u1\":0.367188,\"v1\":0.113281,\"u2\":0.426758,\"v2\":0.172852},{\"ch\":\"?\",\"value\":\"63\",\"sizeX\":46,\"sizeY\":87,\"bearingX\":6,\"bearingY\":85,\"advance\":57,\"u1\":0.426758,\"v1\":0.113281,\"u2\":0.47168,\"v2\":0.198242},{\"ch\":\"@\",\"value\":\"64\",\"sizeX\":106,\"sizeY\":109,\"bearingX\":6,\"bearingY\":85,\"advance\":118,\"u1\":0.47168,\"v1\":0.113281,\"u2\":0.575195,\"v2\":0.219727},{\"ch\":\"A\",\"value\":\"65\",\"sizeX\":91,\"sizeY\":85,\"bearingX\":1,\"bearingY\":85,\"advance\":92,\"u1\":0.575195,\"v1\":0.113281,\"u2\":0.664062,\"v2\":0.196289},{\"ch\":\"B\",\"value\":\"66\",\"sizeX\":77,\"sizeY\":84,\"bearingX\":3,\"bearingY\":84,\"advance\":85,\"u1\":0.664062,\"v1\":0.113281,\"u2\":0.739258,\"v2\":0.195312},{\"ch\":\"C\",\"value\":\"67\",\"sizeX\":74,\"sizeY\":86,\"bearingX\":5,\"bearingY\":85,\"advance\":85,\"u1\":0.739258,\"v1\":0.113281,\"u2\":0.811523,\"v2\":0.197266},{\"ch\":\"D\",\"value\":\"68\",\"sizeX\":85,\"sizeY\":84,\"bearingX\":3,\"bearingY\":84,\"advance\":92,\"u1\":0.811523,\"v1\":0.113281,\"u2\":0.894531,\"v2\":0.195312},{\"ch\":\"E\",\"value\":\"69\",\"sizeX\":69,\"sizeY\":84,\"bearingX\":3,\"bearingY\":84,\"advance\":78,\"u1\":0.894531,\"v1\":0.113281,\"u2\":0.961914,\"v2\":0.195312},{\"ch\":\"F\",\"value\":\"70\",\"sizeX\":64,\"sizeY\":84,\"bearingX\":3,\"bearingY\":84,\"advance\":71,\"u1\":0,\"v1\":0.219727,\"u2\":0.0625,\"v2\":0.301758},{\"ch\":\"G\",\"value\":\"71\",\"sizeX\":84,\"sizeY\":86,\"bearingX\":5,\"bearingY\":85,\"advance\":92,\"u1\":0.0625,\"v1\":0.219727,\"u2\":0.144531,\"v2\":0.303711},{\"ch\":\"H\",\"value\":\"72\",\"sizeX\":86,\"sizeY\":84,\"bearingX\":3,\"bearingY\":84,\"advance\":92,\"u1\":0.144531,\"v1\":0.219727,\"u2\":0.228516,\"v2\":0.301758},{\"ch\":\"I\",\"value\":\"73\",\"sizeX\":35,\"sizeY\":84,\"bearingX\":4,\"bearingY\":84,\"advance\":43,\"u1\":0.228516,\"v1\":0.219727,\"u2\":0.262695,\"v2\":0.301758},{\"ch\":\"J\",\"value\":\"74\",\"sizeX\":46,\"sizeY\":85,\"bearingX\":2,\"bearingY\":84,\"advance\":50,\"u1\":0.262695,\"v1\":0.219727,\"u2\":0.307617,\"v2\":0.302734},{\"ch\":\"K\",\"value\":\"75\",\"sizeX\":89,\"sizeY\":84,\"bearingX\":3,\"bearingY\":84,\"advance\":92,\"u1\":0.307617,\"v1\":0.219727,\"u2\":0.394531,\"v2\":0.301758},{\"ch\":\"L\",\"value\":\"76\",\"sizeX\":68,\"sizeY\":84,\"bearingX\":3,\"bearingY\":84,\"advance\":78,\"u1\":0.394531,\"v1\":0.219727,\"u2\":0.460938,\"v2\":0.301758},{\"ch\":\"M\",\"value\":\"77\",\"sizeX\":108,\"sizeY\":84,\"bearingX\":3,\"bearingY\":84,\"advance\":114,\"u1\":0.460938,\"v1\":0.219727,\"u2\":0.566406,\"v2\":0.301758},{\"ch\":\"N\",\"value\":\"78\",\"sizeX\":87,\"sizeY\":84,\"bearingX\":3,\"bearingY\":84,\"advance\":92,\"u1\":0.566406,\"v1\":0.219727,\"u2\":0.651367,\"v2\":0.301758},{\"ch\":\"O\",\"value\":\"79\",\"sizeX\":83,\"sizeY\":86,\"bearingX\":5,\"bearingY\":85,\"advance\":92,\"u1\":0.651367,\"v1\":0.219727,\"u2\":0.732422,\"v2\":0.303711},{\"ch\":\"P\",\"value\":\"80\",\"sizeX\":64,\"sizeY\":84,\"bearingX\":3,\"bearingY\":84,\"advance\":71,\"u1\":0.732422,\"v1\":0.219727,\"u2\":0.794922,\"v2\":0.301758},{\"ch\":\"Q\",\"value\":\"81\",\"sizeX\":86,\"sizeY\":106,\"bearingX\":5,\"bearingY\":85,\"advance\":92,\"u1\":0.794922,\"v1\":0.219727,\"u2\":0.878906,\"v2\":0.323242},{\"ch\":\"R\",\"value\":\"82\",\"sizeX\":83,\"sizeY\":84,\"bearingX\":3,\"bearingY\":84,\"advance\":85,\"u1\":0.878906,\"v1\":0.219727,\"u2\":0.959961,\"v2\":0.301758},{\"ch\":\"S\",\"value\":\"83\",\"sizeX\":56,\"sizeY\":86,\"bearingX\":8,\"bearingY\":85,\"advance\":71,\"u1\":0,\"v1\":0.323242,\"u2\":0.0546875,\"v2\":0.407227},{\"ch\":\"T\",\"value\":\"84\",\"sizeX\":75,\"sizeY\":84,\"bearingX\":2,\"bearingY\":84,\"advance\":78,\"u1\":0.0546875,\"v1\":0.323242,\"u2\":0.12793,\"v2\":0.405273},{\"ch\":\"U\",\"value\":\"85\",\"sizeX\":88,\"sizeY\":85,\"bearingX\":2,\"bearingY\":84,\"advance\":92,\"u1\":0.12793,\"v1\":0.323242,\"u2\":0.213867,\"v2\":0.40625},{\"ch\":\"V\",\"value\":\"86\",\"sizeX\":90,\"sizeY\":86,\"bearingX\":1,\"bearingY\":84,\"advance\":92,\"u1\":0.213867,\"v1\":0.323242,\"u2\":0.301758,\"v2\":0.407227},{\"ch\":\"W\",\"value\":\"87\",\"sizeX\":121,\"sizeY\":86,\"bearingX\":0,\"bearingY\":84,\"advance\":121,\"u1\":0.301758,\"v1\":0.323242,\"u2\":0.419922,\"v2\":0.407227},{\"ch\":\"X\",\"value\":\"88\",\"sizeX\":89,\"sizeY\":84,\"bearingX\":2,\"bearingY\":84,\"advance\":92,\"u1\":0.419922,\"v1\":0.323242,\"u2\":0.506836,\"v2\":0.405273},{\"ch\":\"Y\",\"value\":\"89\",\"sizeX\":89,\"sizeY\":84,\"bearingX\":1,\"bearingY\":84,\"advance\":92,\"u1\":0.506836,\"v1\":0.323242,\"u2\":0.59375,\"v2\":0.405273},{\"ch\":\"Z\",\"value\":\"90\",\"sizeX\":66,\"sizeY\":84,\"bearingX\":6,\"bearingY\":84,\"advance\":78,\"u1\":0.59375,\"v1\":0.323242,\"u2\":0.658203,\"v2\":0.405273},{\"ch\":\"[\",\"value\":\"91\",\"sizeX\":29,\"sizeY\":106,\"bearingX\":9,\"bearingY\":89,\"advance\":43,\"u1\":0.658203,\"v1\":0.323242,\"u2\":0.686523,\"v2\":0.426758},{\"ch\":\"\\\\\\\\\",\"value\":\"92\",\"sizeX\":36,\"sizeY\":85,\"bearingX\":0,\"bearingY\":84,\"advance\":36,\"u1\":0.686523,\"v1\":0.323242,\"u2\":0.72168,\"v2\":0.40625},{\"ch\":\"]\",\"value\":\"93\",\"sizeX\":30,\"sizeY\":106,\"bearingX\":4,\"bearingY\":89,\"advance\":43,\"u1\":0.72168,\"v1\":0.323242,\"u2\":0.750977,\"v2\":0.426758},{\"ch\":\"^\",\"value\":\"94\",\"sizeX\":58,\"sizeY\":60,\"bearingX\":1,\"bearingY\":84,\"advance\":60,\"u1\":0.750977,\"v1\":0.323242,\"u2\":0.807617,\"v2\":0.381836},{\"ch\":\"_\",\"value\":\"95\",\"sizeX\":66,\"sizeY\":7,\"bearingX\":-1,\"bearingY\":-10,\"advance\":64,\"u1\":0.807617,\"v1\":0.323242,\"u2\":0.87207,\"v2\":0.330078},{\"ch\":\"`\",\"value\":\"96\",\"sizeX\":26,\"sizeY\":19,\"bearingX\":7,\"bearingY\":89,\"advance\":43,\"u1\":0.87207,\"v1\":0.323242,\"u2\":0.897461,\"v2\":0.341797},{\"ch\":\"a\",\"value\":\"97\",\"sizeX\":52,\"sizeY\":61,\"bearingX\":4,\"bearingY\":60,\"advance\":57,\"u1\":0.897461,\"v1\":0.323242,\"u2\":0.948242,\"v2\":0.382812},{\"ch\":\"b\",\"value\":\"98\",\"sizeX\":60,\"sizeY\":90,\"bearingX\":0,\"bearingY\":89,\"advance\":64,\"u1\":0,\"v1\":0.426758,\"u2\":0.0585938,\"v2\":0.514648},{\"ch\":\"c\",\"value\":\"99\",\"sizeX\":49,\"sizeY\":61,\"bearingX\":4,\"bearingY\":60,\"advance\":57,\"u1\":0.0585938,\"v1\":0.426758,\"u2\":0.106445,\"v2\":0.486328},{\"ch\":\"d\",\"value\":\"100\",\"sizeX\":59,\"sizeY\":90,\"bearingX\":4,\"bearingY\":89,\"advance\":64,\"u1\":0.106445,\"v1\":0.426758,\"u2\":0.164062,\"v2\":0.514648},{\"ch\":\"e\",\"value\":\"101\",\"sizeX\":48,\"sizeY\":61,\"bearingX\":5,\"bearingY\":60,\"advance\":57,\"u1\":0.164062,\"v1\":0.426758,\"u2\":0.210938,\"v2\":0.486328},{\"ch\":\"f\",\"value\":\"102\",\"sizeX\":40,\"sizeY\":90,\"bearingX\":3,\"bearingY\":90,\"advance\":43,\"u1\":0.210938,\"v1\":0.426758,\"u2\":0.25,\"v2\":0.514648},{\"ch\":\"g\",\"value\":\"103\",\"sizeX\":57,\"sizeY\":94,\"bearingX\":5,\"bearingY\":66,\"advance\":64,\"u1\":0.25,\"v1\":0.426758,\"u2\":0.305664,\"v2\":0.518555},{\"ch\":\"h\",\"value\":\"104\",\"sizeX\":62,\"sizeY\":89,\"bearingX\":1,\"bearingY\":89,\"advance\":64,\"u1\":0.305664,\"v1\":0.426758,\"u2\":0.366211,\"v2\":0.513672},{\"ch\":\"i\",\"value\":\"105\",\"sizeX\":32,\"sizeY\":85,\"bearingX\":2,\"bearingY\":85,\"advance\":36,\"u1\":0.366211,\"v1\":0.426758,\"u2\":0.397461,\"v2\":0.509766},{\"ch\":\"j\",\"value\":\"106\",\"sizeX\":29,\"sizeY\":112,\"bearingX\":-4,\"bearingY\":85,\"advance\":36,\"u1\":0.397461,\"v1\":0.426758,\"u2\":0.425781,\"v2\":0.536133},{\"ch\":\"k\",\"value\":\"107\",\"sizeX\":62,\"sizeY\":89,\"bearingX\":2,\"bearingY\":89,\"advance\":64,\"u1\":0.425781,\"v1\":0.426758,\"u2\":0.486328,\"v2\":0.513672},{\"ch\":\"l\",\"value\":\"108\",\"sizeX\":31,\"sizeY\":89,\"bearingX\":2,\"bearingY\":89,\"advance\":36,\"u1\":0.486328,\"v1\":0.426758,\"u2\":0.516602,\"v2\":0.513672},{\"ch\":\"m\",\"value\":\"109\",\"sizeX\":96,\"sizeY\":60,\"bearingX\":2,\"bearingY\":60,\"advance\":100,\"u1\":0.516602,\"v1\":0.426758,\"u2\":0.610352,\"v2\":0.485352},{\"ch\":\"n\",\"value\":\"110\",\"sizeX\":61,\"sizeY\":60,\"bearingX\":2,\"bearingY\":60,\"advance\":64,\"u1\":0.610352,\"v1\":0.426758,\"u2\":0.669922,\"v2\":0.485352},{\"ch\":\"o\",\"value\":\"111\",\"sizeX\":56,\"sizeY\":61,\"bearingX\":4,\"bearingY\":60,\"advance\":64,\"u1\":0.669922,\"v1\":0.426758,\"u2\":0.724609,\"v2\":0.486328},{\"ch\":\"p\",\"value\":\"112\",\"sizeX\":57,\"sizeY\":87,\"bearingX\":2,\"bearingY\":60,\"advance\":64,\"u1\":0.724609,\"v1\":0.426758,\"u2\":0.780273,\"v2\":0.511719},{\"ch\":\"q\",\"value\":\"113\",\"sizeX\":58,\"sizeY\":89,\"bearingX\":4,\"bearingY\":62,\"advance\":64,\"u1\":0.780273,\"v1\":0.426758,\"u2\":0.836914,\"v2\":0.513672},{\"ch\":\"r\",\"value\":\"114\",\"sizeX\":40,\"sizeY\":60,\"bearingX\":2,\"bearingY\":60,\"advance\":43,\"u1\":0.836914,\"v1\":0.426758,\"u2\":0.875977,\"v2\":0.485352},{\"ch\":\"s\",\"value\":\"115\",\"sizeX\":41,\"sizeY\":61,\"bearingX\":5,\"bearingY\":60,\"advance\":50,\"u1\":0.875977,\"v1\":0.426758,\"u2\":0.916016,\"v2\":0.486328},{\"ch\":\"t\",\"value\":\"116\",\"sizeX\":34,\"sizeY\":74,\"bearingX\":1,\"bearingY\":73,\"advance\":36,\"u1\":0.916016,\"v1\":0.426758,\"u2\":0.949219,\"v2\":0.499023},{\"ch\":\"u\",\"value\":\"117\",\"sizeX\":61,\"sizeY\":60,\"bearingX\":1,\"bearingY\":59,\"advance\":64,\"u1\":0,\"v1\":0.536133,\"u2\":0.0595703,\"v2\":0.594727},{\"ch\":\"v\",\"value\":\"118\",\"sizeX\":64,\"sizeY\":60,\"bearingX\":0,\"bearingY\":59,\"advance\":64,\"u1\":0.0595703,\"v1\":0.536133,\"u2\":0.12207,\"v2\":0.594727},{\"ch\":\"w\",\"value\":\"119\",\"sizeX\":92,\"sizeY\":60,\"bearingX\":0,\"bearingY\":59,\"advance\":92,\"u1\":0.12207,\"v1\":0.536133,\"u2\":0.211914,\"v2\":0.594727},{\"ch\":\"x\",\"value\":\"120\",\"sizeX\":62,\"sizeY\":59,\"bearingX\":1,\"bearingY\":59,\"advance\":64,\"u1\":0.211914,\"v1\":0.536133,\"u2\":0.272461,\"v2\":0.59375},{\"ch\":\"y\",\"value\":\"121\",\"sizeX\":63,\"sizeY\":87,\"bearingX\":1,\"bearingY\":59,\"advance\":64,\"u1\":0.272461,\"v1\":0.536133,\"u2\":0.333984,\"v2\":0.621094},{\"ch\":\"z\",\"value\":\"122\",\"sizeX\":51,\"sizeY\":59,\"bearingX\":3,\"bearingY\":59,\"advance\":57,\"u1\":0.333984,\"v1\":0.536133,\"u2\":0.383789,\"v2\":0.59375},{\"ch\":\"{\",\"value\":\"123\",\"sizeX\":39,\"sizeY\":106,\"bearingX\":11,\"bearingY\":89,\"advance\":61,\"u1\":0.383789,\"v1\":0.536133,\"u2\":0.421875,\"v2\":0.639648},{\"ch\":\"|\",\"value\":\"124\",\"sizeX\":7,\"sizeY\":117,\"bearingX\":9,\"bearingY\":89,\"advance\":26,\"u1\":0.421875,\"v1\":0.536133,\"u2\":0.428711,\"v2\":0.650391},{\"ch\":\"}\",\"value\":\"125\",\"sizeX\":39,\"sizeY\":106,\"bearingX\":11,\"bearingY\":89,\"advance\":61,\"u1\":0.428711,\"v1\":0.536133,\"u2\":0.466797,\"v2\":0.639648},{\"ch\":\"~\",\"value\":\"126\",\"sizeX\":63,\"sizeY\":22,\"bearingX\":3,\"bearingY\":53,\"advance\":69,\"u1\":0.466797,\"v1\":0.536133,\"u2\":0.52832,\"v2\":0.557617}]');\n\n//# sourceURL=webpack://earthquest/./src/assets/font.json?");

/***/ }),

/***/ "./src/assets/level1.json":
/*!********************************!*\
  !*** ./src/assets/level1.json ***!
  \********************************/
/***/ ((module) => {

eval("module.exports = JSON.parse('{\"ids\":[\"empty\",\"block\",\"slop.left\",\"slop.right\",\"block.half\",\"block.half.highlight\",\"tree\",\"slop.back.right\",\"slop.back.left\",\"block.highlight\"],\"cellHeightOffset\":-2,\"cells\":[[[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,6,1,1,1],[1,1,1,1,1,6,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,6,1,1,1,1,1,1,1,1,6],[1,1,1,1,1,1,1,1,1,1,1,1,6,1,1,6],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],[[1,1,0,0,0,1,1,1,1,1,2],[1,1,0,0,0,1,1,1,1,1,2]],[[1,1,0,0,0,1,1,1,2,0,0],[1,1,0,0,0,1,1,1,2,0,0]],[[1,1,0,0,0,1,1,0,0,0,0],[1,1,0,0,0,1,1,0,0,0,0]],[[0,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,0,0,0,0,0,0]]]}');\n\n//# sourceURL=webpack://earthquest/./src/assets/level1.json?");

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ var __webpack_exports__ = (__webpack_exec__("./src/index.ts"));
/******/ }
]);