"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkearthquest"] = self["webpackChunkearthquest"] || []).push([["main"],{

/***/ "./node_modules/css-loader/dist/cjs.js!./src/css/canvas.css":
/*!******************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/css/canvas.css ***!
  \******************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/noSourceMaps.js */ \"./node_modules/css-loader/dist/runtime/noSourceMaps.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"body {\\n    margin: 0px;\\n    padding: 10px;\\n    overflow: hidden;\\n}\\n.canvas-container {\\n    width: 100%;\\n    height: 100vh;\\n    margin: 0px;\\n}\\n.canvas {\\n    background-color: lightgray;\\n    margin:auto;\\n    display: flex;\\n}\", \"\"]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://earthquest/./src/css/canvas.css?./node_modules/css-loader/dist/cjs.js");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};\n\n//# sourceURL=webpack://earthquest/./node_modules/css-loader/dist/runtime/api.js?");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/noSourceMaps.js":
/*!**************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/noSourceMaps.js ***!
  \**************************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = function (i) {\n  return i[1];\n};\n\n//# sourceURL=webpack://earthquest/./node_modules/css-loader/dist/runtime/noSourceMaps.js?");

/***/ }),

/***/ "./src/assets/characters.png":
/*!***********************************!*\
  !*** ./src/assets/characters.png ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"ebd9930944f85b93ecb16b385e6571c7.png\");\n\n//# sourceURL=webpack://earthquest/./src/assets/characters.png?");

/***/ }),

/***/ "./src/assets/font.png":
/*!*****************************!*\
  !*** ./src/assets/font.png ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"81df8f4030b5ae0cbeddd833c8e0c69d.png\");\n\n//# sourceURL=webpack://earthquest/./src/assets/font.png?");

/***/ }),

/***/ "./src/assets/isometricTile.png":
/*!**************************************!*\
  !*** ./src/assets/isometricTile.png ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"9ce5d3fa77628b40d4e10b48a36f395c.png\");\n\n//# sourceURL=webpack://earthquest/./src/assets/isometricTile.png?");

/***/ }),

/***/ "./src/assets/menu.png":
/*!*****************************!*\
  !*** ./src/assets/menu.png ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"f8c23831bead9466317d54669e246719.png\");\n\n//# sourceURL=webpack://earthquest/./src/assets/menu.png?");

/***/ }),

/***/ "./src/css/canvas.css":
/*!****************************!*\
  !*** ./src/css/canvas.css ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ \"./node_modules/style-loader/dist/runtime/styleDomAPI.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertBySelector.js */ \"./node_modules/style-loader/dist/runtime/insertBySelector.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ \"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ \"./node_modules/style-loader/dist/runtime/insertStyleElement.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ \"./node_modules/style-loader/dist/runtime/styleTagTransform.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_canvas_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js!./canvas.css */ \"./node_modules/css-loader/dist/cjs.js!./src/css/canvas.css\");\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());\noptions.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());\n\n      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, \"head\");\n    \noptions.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());\noptions.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_canvas_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"], options);\n\n\n\n\n       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_canvas_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"] && _node_modules_css_loader_dist_cjs_js_canvas_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals ? _node_modules_css_loader_dist_cjs_js_canvas_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals : undefined);\n\n\n//# sourceURL=webpack://earthquest/./src/css/canvas.css?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {

eval("\n\nvar stylesInDOM = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n\n  return updater;\n}\n\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};\n\n//# sourceURL=webpack://earthquest/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {

eval("\n\nvar memo = {};\n/* istanbul ignore next  */\n\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n\n    memo[target] = styleTarget;\n  }\n\n  return memo[target];\n}\n/* istanbul ignore next  */\n\n\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n\n  target.appendChild(style);\n}\n\nmodule.exports = insertBySelector;\n\n//# sourceURL=webpack://earthquest/./node_modules/style-loader/dist/runtime/insertBySelector.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {

eval("\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\n\nmodule.exports = insertStyleElement;\n\n//# sourceURL=webpack://earthquest/./node_modules/style-loader/dist/runtime/insertStyleElement.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce =  true ? __webpack_require__.nc : 0;\n\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\n\nmodule.exports = setAttributesWithoutAttributes;\n\n//# sourceURL=webpack://earthquest/./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n\n  var needLayer = typeof obj.layer !== \"undefined\";\n\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n\n  css += obj.css;\n\n  if (needLayer) {\n    css += \"}\";\n  }\n\n  if (obj.media) {\n    css += \"}\";\n  }\n\n  if (obj.supports) {\n    css += \"}\";\n  }\n\n  var sourceMap = obj.sourceMap;\n\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  options.styleTagTransform(css, styleElement, options.options);\n}\n\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n\n  styleElement.parentNode.removeChild(styleElement);\n}\n/* istanbul ignore next  */\n\n\nfunction domAPI(options) {\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\n\nmodule.exports = domAPI;\n\n//# sourceURL=webpack://earthquest/./node_modules/style-loader/dist/runtime/styleDomAPI.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {

eval("\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\n\nmodule.exports = styleTagTransform;\n\n//# sourceURL=webpack://earthquest/./node_modules/style-loader/dist/runtime/styleTagTransform.js?");

/***/ }),

/***/ "./src/components/AutoMoveController.ts":
/*!**********************************************!*\
  !*** ./src/components/AutoMoveController.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AutoMoveController = void 0;\nconst vec2_1 = __importDefault(__webpack_require__(/*! ../math/vec2 */ \"./src/math/vec2.ts\"));\nconst Component_1 = __webpack_require__(/*! ./Component */ \"./src/components/Component.ts\");\n/**\n * This controller will allow a tile to move to some screen position\n * in pixels over time and raise events when done.\n */\nclass AutoMoveController extends Component_1.Component {\n    /** Where the tile needs to move to */\n    get target() {\n        return this._moveTarget;\n    }\n    constructor(eng) {\n        super(eng);\n        this.timeOutLimit = 3000;\n        this.distanceLimit = 20;\n    }\n    /**\n     * Start the move animation\n     * @param target  Where you want the tile component to move to\n     * @param tileComponent the tile component you want to move\n     * @param resetTarget reset function\n     * @param move move function called each update\n     * @param done when the movement is done or timed out\n     */\n    startMove(target, tileComponent, resetTarget, move, done) {\n        this._resetTarget = resetTarget;\n        this._move = move;\n        this._done = done;\n        this._moveTarget = target;\n        this._tileComponent = tileComponent;\n        // get the direction of the movement based on the mouse cursor or touch point\n        this._movingToTargetTimer = 0;\n    }\n    /** cancel the move */\n    cancelMove() {\n        this._moveTarget = undefined;\n    }\n    /**\n     * Update the movement\n     * @param dt\n     */\n    update(dt) {\n        if (this._moveTarget) {\n            // reset direction and walking\n            this._resetTarget();\n            // increment timer\n            this._movingToTargetTimer += dt;\n            // get movement direction\n            const screenPos = this._tileComponent.screenPosition;\n            const pos2 = new vec2_1.default(screenPos.xy);\n            const direction = this._moveTarget.copy().subtract(pos2);\n            // did the player make it to the target or did the time expire\n            if (this._movingToTargetTimer < this.timeOutLimit) {\n                if (direction.length() > this.distanceLimit) {\n                    this._move(direction);\n                }\n                else {\n                    // done hit out target\n                    this._done(this._moveTarget, false);\n                    this._moveTarget = undefined;\n                    this._movingToTargetTimer = 0;\n                }\n            }\n            else {\n                // done timed out\n                this._done(this._moveTarget, true);\n                this._moveTarget = undefined;\n                this._movingToTargetTimer = 0;\n            }\n        }\n    }\n}\nexports.AutoMoveController = AutoMoveController;\n\n\n//# sourceURL=webpack://earthquest/./src/components/AutoMoveController.ts?");

/***/ }),

/***/ "./src/components/CollideTileComponent.ts":
/*!************************************************!*\
  !*** ./src/components/CollideTileComponent.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CollideTileComponent = void 0;\nconst TileFactory_1 = __webpack_require__(/*! ../systems/TileFactory */ \"./src/systems/TileFactory.ts\");\nconst TileComponent_1 = __webpack_require__(/*! ./TileComponent */ \"./src/components/TileComponent.ts\");\n/**\n * This is any thing that the player or some NPC can walk on\n */\nclass CollideTileComponent extends TileComponent_1.TileComponent {\n    get id() {\n        return this._tileId;\n    }\n    get type() {\n        return this._type;\n    }\n    canAccessTile(tileComponent) {\n        console.warn('collision component ');\n        return false;\n    }\n    get spriteController() {\n        this._spriteController.activeSprite(this.id);\n        return this._spriteController;\n    }\n    constructor(eng, _spriteController, typeAndSprite, i, j, k) {\n        super(eng);\n        this._spriteController = _spriteController;\n        const parts = typeAndSprite.split('|');\n        this._type = parts[0];\n        this._spriteId = parts[1];\n        this._tileId = TileFactory_1.TileFactory.createStaticID(i, j, k);\n        this._spriteController.activeSprite(this._tileId);\n        this._spriteController.setSprite(this._spriteId);\n        this._spriteController.scale(this.eng.tileScale);\n        this.setTilePosition(i, j, k);\n    }\n}\nexports.CollideTileComponent = CollideTileComponent;\n\n\n//# sourceURL=webpack://earthquest/./src/components/CollideTileComponent.ts?");

/***/ }),

/***/ "./src/components/Component.ts":
/*!*************************************!*\
  !*** ./src/components/Component.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Component = void 0;\n/**\n * A component is something that is part of the game engine and has a reference\n * to the game engine and all the subsystems like text managers, collision and raise events.\n */\nclass Component {\n    /**\n     * Give components easier access to gl\n     */\n    get gl() {\n        return this.eng.gl;\n    }\n    constructor(eng) {\n        this.eng = eng;\n    }\n}\nexports.Component = Component;\n\n\n//# sourceURL=webpack://earthquest/./src/components/Component.ts?");

/***/ }),

/***/ "./src/components/EmptyTile.ts":
/*!*************************************!*\
  !*** ./src/components/EmptyTile.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EmptyTile = void 0;\nconst EmptyTileId_1 = __webpack_require__(/*! ../core/EmptyTileId */ \"./src/core/EmptyTileId.ts\");\nconst TileFactory_1 = __webpack_require__(/*! ../systems/TileFactory */ \"./src/systems/TileFactory.ts\");\nconst TileComponent_1 = __webpack_require__(/*! ./TileComponent */ \"./src/components/TileComponent.ts\");\n/**\n * An empty tile is one that doesn't render anything\n */\nclass EmptyTile extends TileComponent_1.TileComponent {\n    get id() {\n        return this._tileId;\n    }\n    get type() {\n        return this._type;\n    }\n    get spriteController() {\n        return null;\n    }\n    constructor(eng, i, j, k) {\n        super(eng);\n        this._type = EmptyTileId_1.EmptyTileId;\n        this._spriteId = EmptyTileId_1.EmptyTileId;\n        if (i && j && k) {\n            this._tileId = TileFactory_1.TileFactory.createStaticID(i, j, k);\n            this.setTilePosition(i, j, k);\n        }\n        else {\n            this._tileId = EmptyTileId_1.EmptyTileId;\n        }\n    }\n}\nexports.EmptyTile = EmptyTile;\n\n\n//# sourceURL=webpack://earthquest/./src/components/EmptyTile.ts?");

/***/ }),

/***/ "./src/components/GoldComponent.ts":
/*!*****************************************!*\
  !*** ./src/components/GoldComponent.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GoldComponents = void 0;\nconst CollideTileComponent_1 = __webpack_require__(/*! ./CollideTileComponent */ \"./src/components/CollideTileComponent.ts\");\nconst Curve_1 = __webpack_require__(/*! ../math/Curve */ \"./src/math/Curve.ts\");\nclass GoldComponents extends CollideTileComponent_1.CollideTileComponent {\n    canAccessTile(tileComponent) {\n        return true;\n    }\n    onEnter(tileComponent) {\n        if (!this._collected) {\n            console.debug('collect coin');\n            this._spriteController.removeSprite(this._tileId);\n            // keep track of the gold created\n            this.eng.gameManager.data.player.gold++;\n            console.debug('gold collected ' + this.eng.gameManager.data.player.gold);\n            this._collected = true;\n        }\n    }\n    constructor(eng, _spriteController, typeAndSprite, i, j, k) {\n        super(eng, _spriteController, typeAndSprite, i, j, k);\n        this._spriteController = _spriteController;\n        this._baseSprite = this._spriteId.split('.')[0];\n        this._collected = false;\n        this._idleCurve = new Curve_1.Curve();\n        this._idleCurve.points([\n            {\n                p: 0,\n                t: 0,\n            },\n            {\n                p: 1,\n                t: 1000,\n            },\n            {\n                p: 2,\n                t: 1200,\n            },\n            {\n                p: 0,\n                t: 1500,\n            },\n        ]);\n        this._idleCurve.repeat(-1);\n        //this._idleCurve.pingPong(true);\n        this._idleCurve.start(true, undefined, (val) => {\n            if (!this._collected) {\n                this._spriteController.activeSprite(this._tileId);\n                this._spriteId = this._baseSprite + '.' + val;\n                this._spriteController.setSprite(this._spriteId);\n            }\n        });\n        // we have animations so register for updates\n        this.groundManager.registerForUpdate(this);\n        // keep track of the gold created\n        this.eng.gameManager.data.environment.gold++;\n    }\n    update(dt) {\n        this._idleCurve.update(dt);\n    }\n}\nexports.GoldComponents = GoldComponents;\n\n\n//# sourceURL=webpack://earthquest/./src/components/GoldComponent.ts?");

/***/ }),

/***/ "./src/components/NpcComponent.ts":
/*!****************************************!*\
  !*** ./src/components/NpcComponent.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NpcComponent = void 0;\nconst SpriteController_1 = __webpack_require__(/*! ../graphics/SpriteController */ \"./src/graphics/SpriteController.ts\");\nconst TileComponent_1 = __webpack_require__(/*! ./TileComponent */ \"./src/components/TileComponent.ts\");\nconst characters_json_1 = __importDefault(__webpack_require__(/*! ../assets/characters.json */ \"./src/assets/characters.json\"));\nconst TileFactory_1 = __webpack_require__(/*! ../systems/TileFactory */ \"./src/systems/TileFactory.ts\");\nconst Curve_1 = __webpack_require__(/*! ../math/Curve */ \"./src/math/Curve.ts\");\nconst Sprite_1 = __webpack_require__(/*! ../graphics/Sprite */ \"./src/graphics/Sprite.ts\");\nclass NpcComponent extends TileComponent_1.TileComponent {\n    get spriteController() {\n        return this._spriteController;\n    }\n    get id() {\n        return this._tileId;\n    }\n    get type() {\n        return 'npc.poo';\n    }\n    canAccessTile(tileComponent) {\n        console.warn('npc component');\n        return false;\n    }\n    constructor(eng, typeAndSprite, i, j, k) {\n        super(eng);\n        const parts = typeAndSprite.split('|');\n        this._type = parts[0];\n        this._spriteId = parts[1];\n        this._tileId = TileFactory_1.TileFactory.createStaticID(i, j, k);\n        this._spriteController = new SpriteController_1.SpritController(eng);\n        this._spriteController.initialize(this.eng.assetManager.character.texture, characters_json_1.default);\n        this._spriteController.scale(this.eng.tileScale);\n        this._spriteController.setSprite('poo.down.step');\n        // offset by half so he stands in the middle of the tile\n        this.setTilePosition(i + 0.5, j + 0.5, k);\n        this._spriteController.commitToBuffer();\n        this._idleAnimation = new Curve_1.Curve();\n        this._idleAnimation\n            .points([\n            { p: 1, t: 0 },\n            { p: 0, t: 600 },\n            { p: 1, t: 1200 },\n        ])\n            .repeat(-1);\n        this._idleAnimation.start(true);\n        // this tile will be animated\n        this.groundManager.registerForUpdate(this);\n    }\n    /**\n     * Called when the player hits the action button\n     * @param tileComponent\n     */\n    onPlayerAction(tileComponent) {\n        this.eng.dialogManager.showDialog('Welcome to Earth Quest!', { x: 20, y: 40, width: 400, height: 200 }, (dialog) => {\n            // start a battle\n            this.eng.battleManager.startBattle({});\n            return true;\n        });\n    }\n    update(dt) {\n        this._spriteController.update(dt);\n        this.runIdle(dt);\n    }\n    runIdle(dt) {\n        this._idleAnimation.update(dt);\n        this._sprites = ['poo.down.step', 'poo.down.step'];\n        const index = this._idleAnimation.getValue();\n        if (index == 0) {\n            this._spriteFlip = true;\n        }\n        else if (index == 1) {\n            this._spriteFlip = false;\n        }\n        this._spriteController.flip(this._spriteFlip ? Sprite_1.SpriteFlip.XFlip : Sprite_1.SpriteFlip.None);\n        this._spriteController.setSprite(this._sprites[index]);\n    }\n}\nexports.NpcComponent = NpcComponent;\n\n\n//# sourceURL=webpack://earthquest/./src/components/NpcComponent.ts?");

/***/ }),

/***/ "./src/components/OpenTileComponent.ts":
/*!*********************************************!*\
  !*** ./src/components/OpenTileComponent.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OpenTileComponent = void 0;\nconst TileFactory_1 = __webpack_require__(/*! ../systems/TileFactory */ \"./src/systems/TileFactory.ts\");\nconst TileComponent_1 = __webpack_require__(/*! ./TileComponent */ \"./src/components/TileComponent.ts\");\n/**\n * This is any thing that the player or some NPC can walk on\n */\nclass OpenTileComponent extends TileComponent_1.TileComponent {\n    get id() {\n        return this._tileId;\n    }\n    get type() {\n        return this._type;\n    }\n    /**\n     * Check if the tile component (or player) can access this tile.\n     * For open tiles we need to check the tile on top of it.\n     * @param tileComponent\n     * @returns\n     */\n    canAccessTile(tileComponent) {\n        // can not access this tile if the player is on top of it\n        if (tileComponent.tileIndex.z - 1 !== this.tileIndex.z) {\n            return false;\n        }\n        // see if we can access the tile on top of this tile\n        const tileAboveGround = this.groundManager.getTile(this.tileIndex.x, this.tileIndex.y, this.tileIndex.z + 1);\n        return tileAboveGround.empty || tileAboveGround.canAccessTile(tileComponent);\n    }\n    get spriteController() {\n        this._spriteController.activeSprite(this.id);\n        return this._spriteController;\n    }\n    constructor(eng, _spriteController, typeAndSprite, i, j, k) {\n        super(eng);\n        this._spriteController = _spriteController;\n        const parts = typeAndSprite.split('|');\n        this._type = parts[0];\n        this._spriteId = parts[1];\n        this._tileId = TileFactory_1.TileFactory.createStaticID(i, j, k);\n        this._spriteController.activeSprite(TileFactory_1.TileFactory.createStaticID(i, j, k));\n        this._spriteController.setSprite(this._spriteId);\n        this._spriteController.scale(this.eng.tileScale);\n        this.setTilePosition(i, j, k);\n    }\n}\nexports.OpenTileComponent = OpenTileComponent;\n\n\n//# sourceURL=webpack://earthquest/./src/components/OpenTileComponent.ts?");

/***/ }),

/***/ "./src/components/PlayerController.ts":
/*!********************************************!*\
  !*** ./src/components/PlayerController.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PlayerController = exports.PointingDirection = void 0;\nconst Curve_1 = __webpack_require__(/*! ../math/Curve */ \"./src/math/Curve.ts\");\nconst Sprite_1 = __webpack_require__(/*! ../graphics/Sprite */ \"./src/graphics/Sprite.ts\");\nconst UserAction_1 = __webpack_require__(/*! ../core/UserAction */ \"./src/core/UserAction.ts\");\nconst SpriteController_1 = __webpack_require__(/*! ../graphics/SpriteController */ \"./src/graphics/SpriteController.ts\");\nconst vec2_1 = __importDefault(__webpack_require__(/*! ../math/vec2 */ \"./src/math/vec2.ts\"));\nconst TileComponent_1 = __webpack_require__(/*! ./TileComponent */ \"./src/components/TileComponent.ts\");\nconst vec3_1 = __importDefault(__webpack_require__(/*! ../math/vec3 */ \"./src/math/vec3.ts\"));\nconst AutoMoveController_1 = __webpack_require__(/*! ./AutoMoveController */ \"./src/components/AutoMoveController.ts\");\nvar PointingDirection;\n(function (PointingDirection) {\n    PointingDirection[PointingDirection[\"None\"] = 0] = \"None\";\n    PointingDirection[PointingDirection[\"N\"] = 1] = \"N\";\n    PointingDirection[PointingDirection[\"E\"] = 2] = \"E\";\n    PointingDirection[PointingDirection[\"S\"] = 4] = \"S\";\n    PointingDirection[PointingDirection[\"W\"] = 8] = \"W\";\n})(PointingDirection = exports.PointingDirection || (exports.PointingDirection = {}));\n/**\n * Controls the player sprite.\n */\nclass PlayerController extends TileComponent_1.TileComponent {\n    get canWalk() {\n        return this._canWalk;\n    }\n    /** */\n    set canWalk(value) {\n        this._canWalk = value;\n        // stop the player from walking and animating\n        if (!value) {\n            this._walking = false;\n            this._walkAnimation.pause(0);\n        }\n    }\n    /**\n     * Get the sprite controller\n     */\n    get spriteController() {\n        return this._spriteController;\n    }\n    get id() {\n        return 'player';\n    }\n    get type() {\n        return 'player';\n    }\n    get heightIndex() {\n        return this._tileIndex.z;\n    }\n    set slopVector(val) {\n        this._slopVector = val;\n    }\n    get slopVector() {\n        return this._slopVector;\n    }\n    get facingDirection() {\n        return this._facingDirection;\n    }\n    constructor(eng) {\n        super(eng);\n        this._facingDirection = PointingDirection.S;\n        this._walking = false;\n        this._speed = 3.0; // tiles per second\n        this._sprites = ['ness.down.step.left', 'ness.down.step.right'];\n        //this._sprites = ['mario.down.step', 'mario.down.step'];\n        this._spriteFlip = false;\n        this._resetFlip = false;\n        this._walkingDirection = new vec3_1.default([0, 0, 0]);\n        this._slopVector = new vec2_1.default([0, 0]);\n        this._moveController = new AutoMoveController_1.AutoMoveController(this.eng);\n        this._canWalk = true;\n    }\n    initialize(spriteSheet, characterData) {\n        this._spriteController = new SpriteController_1.SpritController(this.eng);\n        this._spriteController.initialize(spriteSheet, characterData);\n        this._spriteController.scale(2);\n        this._spriteController.setSprite('ness.left.stand');\n        // set the position of the sprite in the center of the screen\n        this.setTilePosition(4, 5, 1);\n        this._walkAnimation = new Curve_1.Curve();\n        this._walkAnimation\n            .points([\n            { p: 1, t: 0 },\n            { p: 0, t: 150 },\n            { p: 1, t: 300 },\n        ])\n            .repeat(-1);\n        console.info('sprite list ', this._spriteController.getSpriteList());\n    }\n    /**\n     * Handles user input. The logic goes through a chain of command.\n     * @param action the action from keyboard or gamepad\n     * @returns True if the action was handled else false\n     */\n    handleUserAction(state) {\n        // the player is taking over now\n        this._moveController.cancelMove();\n        //console.debug('action ' + action + ' was walking ' + wasWalking);\n        this._facingDirection = PointingDirection.None;\n        this._walking = false;\n        // if the player cannot walk don;t let them\n        if (!this.canWalk) {\n            return true;\n        }\n        // if the user tapped or clicked on the screen\n        if ((state.action & UserAction_1.UserAction.Tap) > 0) {\n            this.handleTap(state);\n        }\n        else if ((state.action & UserAction_1.UserAction.ActionPressed) > 0) {\n            // action event\n            this.eng.scene.ground.raisePlayerAction(this);\n        }\n        else if ((state.action & UserAction_1.UserAction.MenuPressed) > 0) {\n            this.eng.dialogManager.showGameMenu();\n        }\n        else {\n            const screenDirection = new vec2_1.default();\n            // use arrow keys or d-pad on a game controller\n            if ((state.action & UserAction_1.UserAction.Left) > 0) {\n                this._facingDirection = this._facingDirection | PointingDirection.W;\n                screenDirection.x -= 1;\n                this._walking = true;\n            }\n            if ((state.action & UserAction_1.UserAction.Right) > 0) {\n                this._facingDirection = this._facingDirection | PointingDirection.E;\n                screenDirection.x += 1;\n                this._walking = true;\n            }\n            if ((state.action & UserAction_1.UserAction.Up) > 0) {\n                this._facingDirection = this._facingDirection | PointingDirection.N;\n                screenDirection.y += 1;\n                this._walking = true;\n            }\n            if ((state.action & UserAction_1.UserAction.Down) > 0) {\n                this._facingDirection = this._facingDirection | PointingDirection.S;\n                screenDirection.y -= 1;\n                this._walking = true;\n            }\n            this._walkingDirection.x = screenDirection.x * this._speed;\n            this._walkingDirection.y = screenDirection.y * this._speed;\n            this._walkingDirection.z = vec2_1.default.dot(screenDirection, this._slopVector) * this._speed;\n            // convert movement vector from screen space to tile space\n            this._walkingDirection = this.eng.tileHelper.rotateToTileSpace(this._walkingDirection);\n        }\n        // We are now walking start the animations\n        if (!this._wasWalking && this._walking) {\n            this._walkAnimation.start(true);\n        }\n        else if (!this._walking) {\n            this._walkAnimation.pause(0);\n            // this is needed for resetting the walk\n            // animation when facing north.\n            // we do not want to reset flip when the\n            // player is facing right or left\n            if (this._resetFlip) {\n                this._spriteFlip = false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Handle the tap event. This will allow the player to touch a point on the screen\n     * and the character will walk towards that point. If the character can not get there in 2\n     * seconds the character will stop moving. When the character gets to the destination the action\n     * event will be raised automatically.\n     * @param state\n     */\n    handleTap(state) {\n        let touch = state.touchPoint;\n        const screen = new vec2_1.default();\n        // x and y screen points are offset by the projection offset.\n        screen.x = touch.x;\n        screen.y = touch.y;\n        console.debug('touch point ' + screen.toString());\n        this._moveController.startMove(screen, this, () => {\n            // reset direction and walking\n            this._facingDirection = PointingDirection.None;\n            this._walking = false;\n        }, (direction) => {\n            const dir = direction.copy();\n            dir.normalize();\n            const deadZone = 0.5;\n            console.debug('t-> pos ' + this.screenPosition);\n            console.debug('t-> target ' + this._moveController.target);\n            console.debug('t-> direction ' + dir, direction.length().toFixed(3));\n            // move left\n            if (dir.x < -deadZone) {\n                this._facingDirection = this._facingDirection | PointingDirection.W;\n                this._walking = true;\n                console.debug('t->  moving left ');\n            }\n            // move right\n            else if (dir.x > deadZone) {\n                this._facingDirection = this._facingDirection | PointingDirection.E;\n                this._walking = true;\n                console.debug('t->  moving right ');\n            }\n            // move down\n            if (dir.y < -deadZone) {\n                this._facingDirection = this._facingDirection | PointingDirection.S;\n                this._walking = true;\n                console.debug('t->  moving down ');\n            }\n            // move up\n            else if (dir.y > deadZone) {\n                this._facingDirection = this._facingDirection | PointingDirection.N;\n                this._walking = true;\n                console.debug('t->  moving up ');\n            }\n            // We are now walking start the animations\n            if (!this._wasWalking && this._walking) {\n                this._walkAnimation.start(true);\n            }\n            else if (!this._walking) {\n                this._walkAnimation.pause(0);\n            }\n        }, (target, timeOut) => {\n            if (!timeOut) {\n                // action event\n                this.eng.scene.ground.raisePlayerAction(this);\n            }\n            // we are done moving so reset everything\n            this._walking = false;\n            this._facingDirection = PointingDirection.None;\n            this._walkAnimation.pause(0);\n            // TODO move the the target position\n            //const tile = this.eng.tileHelper.toTileLoc(target, 1);\n            //this.moveToTilePosition(tile.x, tile.y);\n        });\n    }\n    update(dt) {\n        this._spriteController.update(dt);\n        this._walkAnimation.update(dt);\n        this._moveController.update(dt);\n        this.walkAnimation(dt, this._facingDirection);\n    }\n    walkAnimation(dt, direction) {\n        this._resetFlip = false;\n        // check multiple angle movements first so the else statements work correctly\n        if ((direction & PointingDirection.S) > 0 && (direction & PointingDirection.W) > 0) {\n            this._sprites = ['ness.down.left.stand', 'ness.down.left.step'];\n            this._spriteFlip = false;\n        }\n        else if ((direction & PointingDirection.S) > 0 && (direction & PointingDirection.E) > 0) {\n            this._sprites = ['ness.down.left.stand', 'ness.down.left.step'];\n            this._spriteFlip = true;\n        }\n        else if ((direction & PointingDirection.N) > 0 && (direction & PointingDirection.W) > 0) {\n            this._sprites = ['ness.up.left.stand', 'ness.up.left.step'];\n            this._spriteFlip = false;\n        }\n        else if ((direction & PointingDirection.N) > 0 && (direction & PointingDirection.E) > 0) {\n            this._sprites = ['ness.up.left.stand', 'ness.up.left.step'];\n            this._spriteFlip = true;\n        }\n        else if ((direction & PointingDirection.E) > 0) {\n            this._sprites = ['ness.left.stand', 'ness.left.step'];\n            this._spriteFlip = true;\n        }\n        else if ((direction & PointingDirection.W) > 0) {\n            this._sprites = ['ness.left.stand', 'ness.left.step'];\n            this._spriteFlip = false;\n        }\n        else if ((direction & PointingDirection.S) > 0) {\n            this._sprites = ['ness.down.step.left', 'ness.down.step.right'];\n            this._spriteFlip = false;\n        }\n        else if ((direction & PointingDirection.N) > 0) {\n            this._sprites = ['ness.up.step', 'ness.up.step'];\n            this._spriteFlip = false;\n            this._resetFlip = true;\n            if (this._walkAnimation.getValue() == 1) {\n                this._spriteFlip = true;\n            }\n        }\n        // only move if we are walking\n        if (this._walking) {\n            // scale velocity by time\n            const moveVector = this._walkingDirection.scale(dt / 1000.0);\n            // screen space converted to tile space for x and y position (ground plane)\n            // then use the movement dot of the slope vector which will allow the player for\n            // move up and down on stairs and slops\n            this.OffsetTilePosition(moveVector.x, moveVector.y, moveVector.z);\n        }\n        // toggle and animation. This can happen when not walking too.\n        if (this._walkAnimation.getValue() == 0) {\n            this._spriteController.flip(this._spriteFlip ? Sprite_1.SpriteFlip.XFlip : Sprite_1.SpriteFlip.None);\n            this._spriteController.setSprite(this._sprites[0]);\n        }\n        else if (this._walkAnimation.getValue() == 1) {\n            this._spriteController.flip(this._spriteFlip ? Sprite_1.SpriteFlip.XFlip : Sprite_1.SpriteFlip.None);\n            this._spriteController.setSprite(this._sprites[1]);\n        }\n        this._wasWalking = this._walking;\n    }\n    updateSpritePosition() {\n        super.updateSpritePosition();\n        console.debug('pos ' + this.tilePosition.toString() + '\\n  : ' + this.screenPosition.toString());\n        // update the view manger with the player new position\n        this.eng.viewManager.setTarget(this.screenPosition.x - this.eng.width * 0.5, -this.eng.height * 0.5 + this.screenPosition.y);\n    }\n}\nexports.PlayerController = PlayerController;\n\n\n//# sourceURL=webpack://earthquest/./src/components/PlayerController.ts?");

/***/ }),

/***/ "./src/components/PortalTileComponent.ts":
/*!***********************************************!*\
  !*** ./src/components/PortalTileComponent.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PortalTileComponent = void 0;\nconst vec2_1 = __importDefault(__webpack_require__(/*! ../math/vec2 */ \"./src/math/vec2.ts\"));\nconst TileFactory_1 = __webpack_require__(/*! ../systems/TileFactory */ \"./src/systems/TileFactory.ts\");\nconst TileComponent_1 = __webpack_require__(/*! ./TileComponent */ \"./src/components/TileComponent.ts\");\n/**\n * This is any thing that the player or some NPC can walk on\n */\nclass PortalTileComponent extends TileComponent_1.TileComponent {\n    get id() {\n        return this._tileId;\n    }\n    get type() {\n        return this._type;\n    }\n    /**\n     * Check if the tile component (or player) can access this tile.\n     * For open tiles we need to check the tile on top of it.\n     * @param tileComponent\n     * @returns\n     */\n    canAccessTile(tileComponent) {\n        // can not access this tile if the player is on top of it\n        if (tileComponent.tileIndex.z - 1 !== this.tileIndex.z) {\n            return false;\n        }\n        // see if we can access the tile on top of this tile\n        const tileAboveGround = this.groundManager.getTile(this.tileIndex.x, this.tileIndex.y, this.tileIndex.z + 1);\n        return tileAboveGround.empty || tileAboveGround.canAccessTile(tileComponent);\n    }\n    onEnter(tileComponent) {\n        if (tileComponent.type == 'player') {\n            const player = this.eng.scene.player;\n            player.canWalk = false;\n            this.eng.scene.ground.buildLevel({ seed: 2003, length: 50, width: 40, height: 10, playerPos: new vec2_1.default(1, 1) });\n            player.canWalk = true;\n        }\n    }\n    get spriteController() {\n        this._spriteController.activeSprite(this.id);\n        return this._spriteController;\n    }\n    constructor(eng, _spriteController, typeAndSprite, i, j, k) {\n        super(eng);\n        this._spriteController = _spriteController;\n        const parts = typeAndSprite.split('|');\n        this._type = parts[0];\n        this._spriteId = parts[1];\n        this._tileId = TileFactory_1.TileFactory.createStaticID(i, j, k);\n        this._spriteController.activeSprite(TileFactory_1.TileFactory.createStaticID(i, j, k));\n        this._spriteController.setSprite(this._spriteId);\n        this._spriteController.scale(this.eng.tileScale);\n        this.setTilePosition(i, j, k);\n    }\n}\nexports.PortalTileComponent = PortalTileComponent;\n\n\n//# sourceURL=webpack://earthquest/./src/components/PortalTileComponent.ts?");

/***/ }),

/***/ "./src/components/SceneComponent.ts":
/*!******************************************!*\
  !*** ./src/components/SceneComponent.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SceneComponent = void 0;\nconst Component_1 = __webpack_require__(/*! ./Component */ \"./src/components/Component.ts\");\n/**\n * This is a base class for a scene\n */\nclass SceneComponent extends Component_1.Component {\n    /**\n     * constructor\n     * @param eng\n     */\n    constructor(eng) {\n        super(eng);\n    }\n    /**\n     * Initialize the scene\n     * @param options\n     */\n    async initialize(options) { }\n    /**\n     * Called every frame\n     * @param dt\n     */\n    update(dt) { }\n    /**\n     * When the window is resized\n     */\n    resize(width, height) { }\n    /**\n     * Dispose the scene\n     */\n    dispose() { }\n}\nexports.SceneComponent = SceneComponent;\n\n\n//# sourceURL=webpack://earthquest/./src/components/SceneComponent.ts?");

/***/ }),

/***/ "./src/components/SlopTileComponent.ts":
/*!*********************************************!*\
  !*** ./src/components/SlopTileComponent.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SlopTileComponent = void 0;\nconst TileFactory_1 = __webpack_require__(/*! ../systems/TileFactory */ \"./src/systems/TileFactory.ts\");\nconst TileComponent_1 = __webpack_require__(/*! ./TileComponent */ \"./src/components/TileComponent.ts\");\nclass SlopTileComponent extends TileComponent_1.TileComponent {\n    get id() {\n        return this._tileId;\n    }\n    get type() {\n        return this._type;\n    }\n    get spriteController() {\n        this._spriteController.activeSprite(this.id);\n        return this._spriteController;\n    }\n    onEnter(tileComponent) {\n        // TODO set the tile component to the correct direction\n    }\n    canAccessTile(tileComponent) {\n        // TODO check if the tile is\n        // accessing from the correct location\n        return false;\n        // if slop is to the left the tile component\n        // needs to be entering from the left i-1\n        if (this.type.includes('left')) {\n            if (tileComponent.tileIndex.x == this.tileIndex.x - 1 &&\n                tileComponent.tileIndex.y == this.tileIndex.y) {\n                //tileComponent.\n            }\n        }\n    }\n    constructor(eng, _spriteController, typeAndSprite, i, j, k) {\n        super(eng);\n        this._spriteController = _spriteController;\n        const parts = typeAndSprite.split('|');\n        this._type = parts[0];\n        this._spriteId = parts[1];\n        this._tileId = TileFactory_1.TileFactory.createStaticID(i, j, k);\n        this._spriteController.activeSprite(TileFactory_1.TileFactory.createStaticID(i, j, k));\n        this._spriteController.setSprite(this._spriteId);\n        this._spriteController.scale(this.eng.tileScale);\n        this.setTilePosition(i, j, k);\n    }\n}\nexports.SlopTileComponent = SlopTileComponent;\n\n\n//# sourceURL=webpack://earthquest/./src/components/SlopTileComponent.ts?");

/***/ }),

/***/ "./src/components/TileComponent.ts":
/*!*****************************************!*\
  !*** ./src/components/TileComponent.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TileComponent = void 0;\nconst EmptyTileId_1 = __webpack_require__(/*! ../core/EmptyTileId */ \"./src/core/EmptyTileId.ts\");\nconst vec3_1 = __importDefault(__webpack_require__(/*! ../math/vec3 */ \"./src/math/vec3.ts\"));\nconst Component_1 = __webpack_require__(/*! ./Component */ \"./src/components/Component.ts\");\n/**\n * A tile component is a component that controls a single tile.\n * The visual sprite might be part of a spriteBatch or a single sprite.\n * This is up to the implementation. This class has functions that\n * allow the implementation to handle collision detection and response and\n * update state of other tiles as needed via the {@link Ground}.\n */\nclass TileComponent extends Component_1.Component {\n    /**\n     * This is the tile height index. Subtract one because\n     * the tile is one level above the cell it is on.\n     */\n    get tileHeightIndex() {\n        return this._tileIndex.z - 1;\n    }\n    /**\n     * Is this tile empty\n     */\n    get empty() {\n        return this.type == EmptyTileId_1.EmptyTileId;\n    }\n    /**\n     * Get the tile index\n     */\n    get tileIndex() {\n        return this._tileIndex;\n    }\n    /**\n     * get the screen location of the tile\n     */\n    get screenPosition() {\n        return this._screenPosition;\n    }\n    /**\n     * Easy access to ground\n     */\n    get groundManager() {\n        return this.eng.scene.ground;\n    }\n    /**\n     * Get the height offset in tile space\n     */\n    get tileHeight() {\n        return this._tilePosition.z;\n    }\n    /**\n     * get the tile position\n     */\n    get tilePosition() {\n        return this._tilePosition;\n    }\n    constructor(eng) {\n        super(eng);\n        this._tileIndex = new vec3_1.default([0, 0, 0]);\n        this._tilePosition = new vec3_1.default([0, 0, 0]);\n    }\n    /**\n     * Set the position in tile space. This will recalculate the tile position\n     * and set the sprite position.\n     * @param i\n     * @param j\n     * @param k\n     */\n    setTilePosition(i, j, k) {\n        if (this.type == 'player') {\n            console.error('setting player position ', i, j, k);\n        }\n        this._tilePosition.x = i;\n        this._tilePosition.y = j;\n        this._tilePosition.z = k;\n        this._tileIndex.x = Math.floor(this._tilePosition.x);\n        this._tileIndex.y = Math.floor(this._tilePosition.y);\n        this._tileIndex.z = Math.floor(this._tilePosition.z);\n        this.updateSpritePosition();\n    }\n    /**\n     * Can this tile be accessed by the given component. This happens when a player tries to move to a tile.\n     * It can also happen when an NPC tile tries to access a another tile\n     * @param tileComponent\n     * @returns\n     */\n    canAccessTile(tileComponent) {\n        if (this.empty) {\n            //console.warn('empty component');\n        }\n        else {\n            console.warn(' default component');\n        }\n        return false;\n    }\n    /**\n     * When a cell is created\n     */\n    onCreate() {\n        //NOP\n    }\n    /**\n     * When a cell is destroyed\n     */\n    onDestroy() {\n        //NOP\n    }\n    /**\n     * Called when the player hits the action button\n     * @param tileComponent\n     */\n    onPlayerAction(tileComponent) {\n        //NOP\n    }\n    /**\n     * Called when a tile tries to enter this tile. This happens after canAccessTile returns true\n     * @param tileComponent\n     */\n    onEnter(tileComponent) {\n        //NOP\n    }\n    /**\n     * Exit a this tile\n     * @param tileComponent\n     */\n    onExit(tileComponent) {\n        //NOP\n    }\n    /**\n     * This is only called if require update returns true when\n     * this object is created. This is called form GroundManager\n     * @param dt\n     */\n    update(dt) {\n        //NOP\n    }\n    /**\n     * Moves the tile by a given amount\n     * @param i\n     * @param j\n     * @param k\n     */\n    OffsetTilePosition(i, j, k) {\n        const tileX = Math.floor(this._tilePosition.x);\n        const tileY = Math.floor(this._tilePosition.y);\n        const tileZ = Math.floor(this._tilePosition.z);\n        const floorHeight = tileZ - 1;\n        const fractionI = this.tilePosition.x % 1;\n        const fractionJ = this.tilePosition.y % 1;\n        const dir = new vec3_1.default([i, j, k]);\n        const ground = this.eng.scene.ground;\n        // left\n        if (dir.x < 0 && fractionI < 0.25) {\n            // cancel x movement\n            if (!ground.canAccessTile(this, tileX - 1, tileY, floorHeight)) {\n                dir.x = 0;\n            }\n        }\n        // right\n        else if (dir.x > 0 && fractionI > 0.75) {\n            // cancel x movement\n            if (!ground.canAccessTile(this, tileX + 1, tileY, floorHeight)) {\n                dir.x = 0;\n            }\n        }\n        // up\n        if (dir.y < 0 && fractionJ < 0.25) {\n            // cancel y movement\n            if (!ground.canAccessTile(this, tileX, tileY - 1, floorHeight)) {\n                dir.y = 0;\n            }\n        }\n        // down\n        else if (dir.y > 0 && fractionJ > 0.75) {\n            // cancel y movement\n            if (!ground.canAccessTile(this, tileX, tileY + 1, floorHeight)) {\n                dir.y = 0;\n            }\n        }\n        // check corners\n        if (dir.x > 0 && dir.y > 0 && fractionJ > 0.75 && fractionI > 0.75) {\n            //top right\n            if (!ground.canAccessTile(this, tileX + 1, tileY + 1, floorHeight)) {\n                if (Math.abs(dir.x) > Math.abs(dir.y)) {\n                    dir.y = 0;\n                }\n                else {\n                    dir.x = 0;\n                }\n            }\n        }\n        else if (dir.x < 0 && dir.y > 0 && fractionJ < 0.25 && fractionI > 0.75) {\n            //top left\n            if (!ground.canAccessTile(this, tileX - 1, tileY + 1, floorHeight)) {\n                if (Math.abs(dir.x) > Math.abs(dir.y)) {\n                    dir.y = 0;\n                }\n                else {\n                    dir.x = 0;\n                }\n            }\n        }\n        else if (dir.x < 0 && dir.y < 0 && fractionJ < 0.25 && fractionI < 0.25) {\n            //bottom left\n            if (!ground.canAccessTile(this, tileX - 1, tileY - 1, floorHeight)) {\n                if (Math.abs(dir.x) > Math.abs(dir.y)) {\n                    dir.y = 0;\n                }\n                else {\n                    dir.x = 0;\n                }\n            }\n        }\n        else if (dir.x < 0 && dir.y > 0 && fractionJ < 0.25 && fractionI > 0.75) {\n            //bottom right\n            if (!ground.canAccessTile(this, tileX - 1, tileY + 1, floorHeight)) {\n                if (Math.abs(dir.x) > Math.abs(dir.y)) {\n                    dir.y = 0;\n                }\n                else {\n                    dir.x = 0;\n                }\n            }\n        }\n        // check if the player can access this tile\n        if (dir.length() > 0) {\n            this.moveToTilePosition(this._tilePosition.x + dir.x, this._tilePosition.y + dir.y, this._tilePosition.z + dir.z);\n        }\n    }\n    /**\n     * Sets the tile position to a new value\n     * @param i\n     * @param j\n     * @param k\n     */\n    moveToTilePosition(i, j, k) {\n        if (k === undefined) {\n            k = this._tilePosition.z;\n        }\n        // we need this to be an int to lookup the tiles\n        const tileX = Math.floor(i);\n        const tileY = Math.floor(j);\n        const tileZ = Math.floor(k);\n        const floor = tileZ - 1;\n        // we moved off the last tile call on exit\n        if (this._tileIndex.x != tileX || this._tileIndex.y != tileY) {\n            // exit the ground tile\n            this.eng.scene.ground.onExit(this, this._tileIndex.x, this._tileIndex.y, floor);\n            // exit the tile at eye level\n            this.eng.scene.ground.onExit(this, this._tileIndex.x, this._tileIndex.y, floor + 1);\n        }\n        const screen = this.eng.tileHelper.toScreenLoc(i, j, k);\n        // set the tile position first. This will allow onEnter to change the position if needed.\n        this.setTilePosition(i, j, k);\n        // enter the tile on the ground\n        this.eng.scene.ground.onEnter(this, tileX, tileY, floor);\n        // enter the tile in front of the player\n        this.eng.scene.ground.onEnter(this, tileX, tileY, floor + 1);\n    }\n    /**\n     * Updates the sprite's position\n     */\n    updateSpritePosition() {\n        // Get the screen depth using the tile index not position of this tile\n        const screenDepth = this.eng.tileHelper.toScreenLoc(this._tileIndex.x, this._tileIndex.y, this._tileIndex.z);\n        // Get the screen position of this tile using the position\n        this._screenPosition = this.eng.tileHelper.toScreenLoc(this._tilePosition.x, this._tilePosition.y, this._tilePosition.z);\n        // move the sprite if there is one. some tiles like empty\n        // don't need sprite controllers\n        if (this.spriteController) {\n            this.spriteController.setSpritePosition(this.screenPosition.x, this.screenPosition.y, screenDepth.z);\n        }\n    }\n}\nexports.TileComponent = TileComponent;\n\n\n//# sourceURL=webpack://earthquest/./src/components/TileComponent.ts?");

/***/ }),

/***/ "./src/core/CanvasController.ts":
/*!**************************************!*\
  !*** ./src/core/CanvasController.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CanvasController = void 0;\n/**\n * This controller manages the canvas\n */\nclass CanvasController {\n    constructor(onResize) {\n        console.debug('starting...');\n        this.container = document.createElement('div');\n        this.container.classList.add('canvas-container');\n        const canvas = document.createElement('canvas');\n        canvas.width = 800;\n        canvas.height = 600;\n        canvas.classList.add('canvas');\n        this.container.append(canvas);\n        window.addEventListener('resize', (e) => {\n            if (onResize) {\n                onResize(canvas.clientWidth, canvas.clientHeight);\n            }\n        });\n        if (false) {}\n        else {\n            this.gl = canvas.getContext('webgl2');\n        }\n        // Only continue if WebGL is available and working\n        if (this.gl === null) {\n            console.error('Unable to initialize WebGL2. Your browser or machine may not support it.');\n            return;\n        }\n    }\n    logGlError(error, functionName, args) {\n        console.error('GL error: ' +\n            error +\n            ' in gl.' +\n            functionName +\n            '(' +\n            // @ts-ignore\n            WebGLDebugUtils.glFunctionArgsToString(functionName, args) +\n            ')');\n    }\n    logGLCall(functionName, args) {\n        /*\n        console.log(\n          'gl.' +\n            functionName +\n            '(' +\n            // @ts-ignore\n            (WebGLDebugUtils as any).glFunctionArgsToString(functionName, args) +\n            ')'\n        );\n        */\n    }\n    /**\n     * Get the container element\n     * @returns\n     */\n    element() {\n        return this.container;\n    }\n}\nexports.CanvasController = CanvasController;\n\n\n//# sourceURL=webpack://earthquest/./src/core/CanvasController.ts?");

/***/ }),

/***/ "./src/core/EmptyTileId.ts":
/*!*********************************!*\
  !*** ./src/core/EmptyTileId.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EmptyTileId = void 0;\n/**\n * A way to id an empty tile\n */\nexports.EmptyTileId = 'empty';\n\n\n//# sourceURL=webpack://earthquest/./src/core/EmptyTileId.ts?");

/***/ }),

/***/ "./src/core/Engine.ts":
/*!****************************!*\
  !*** ./src/core/Engine.ts ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Engine = void 0;\nconst Editor_1 = __webpack_require__(/*! ../editor/Editor */ \"./src/editor/Editor.ts\");\nconst SpritePerspectiveShader_1 = __webpack_require__(/*! ../shaders/SpritePerspectiveShader */ \"./src/shaders/SpritePerspectiveShader.ts\");\nconst InputHandler_1 = __webpack_require__(/*! ./InputHandler */ \"./src/core/InputHandler.ts\");\nconst TileHelper_1 = __webpack_require__(/*! ../utilities/TileHelper */ \"./src/utilities/TileHelper.ts\");\nconst UserAction_1 = __webpack_require__(/*! ./UserAction */ \"./src/core/UserAction.ts\");\nconst SoundManager_1 = __webpack_require__(/*! ../systems/SoundManager */ \"./src/systems/SoundManager.ts\");\nconst ViewManager_1 = __webpack_require__(/*! ../systems/ViewManager */ \"./src/systems/ViewManager.ts\");\nconst DialogManager_1 = __webpack_require__(/*! ../systems/DialogManager */ \"./src/systems/DialogManager.ts\");\nconst TextManager_1 = __webpack_require__(/*! ../systems/TextManager */ \"./src/systems/TextManager.ts\");\nconst BattleManager_1 = __webpack_require__(/*! ../systems/BattleManager */ \"./src/systems/BattleManager.ts\");\nconst level1_json_1 = __importDefault(__webpack_require__(/*! ../assets/level1.json */ \"./src/assets/level1.json\"));\nconst FpsController_1 = __webpack_require__(/*! ./FpsController */ \"./src/core/FpsController.ts\");\nconst Random_1 = __webpack_require__(/*! ../utilities/Random */ \"./src/utilities/Random.ts\");\nconst AssetManager_1 = __webpack_require__(/*! ../systems/AssetManager */ \"./src/systems/AssetManager.ts\");\nconst GameManager_1 = __webpack_require__(/*! ../systems/GameManager */ \"./src/systems/GameManager.ts\");\nconst EditorScene_1 = __webpack_require__(/*! ../environment/EditorScene */ \"./src/environment/EditorScene.ts\");\n/**\n * This is the game engine class that ties all the sub systems together. Including\n * the scene, sound manager, and game play, etc.\n */\nclass Engine {\n    /**\n     * Tile scale for the game\n     */\n    get tileScale() {\n        return 2;\n    }\n    get width() {\n        return this.gl.canvas.width;\n    }\n    get height() {\n        return this.gl.canvas.height;\n    }\n    get editor() {\n        return this._editor;\n    }\n    constructor(gl) {\n        this.gl = gl;\n        this.random = new Random_1.Random(1001);\n        this.gameManager = new GameManager_1.GameManager(this);\n        //this.scene = new WorldScene(this);\n        this.scene = new EditorScene_1.EditorScene(this);\n        this.input = new InputHandler_1.InputHandler(this);\n        this.tileHelper = new TileHelper_1.TileHelper(this);\n        this.soundManager = new SoundManager_1.SoundManager();\n        this.viewManager = new ViewManager_1.ViewManager(this);\n        this.dialogManager = new DialogManager_1.DialogManager(this);\n        this.textManager = new TextManager_1.TextManager(this);\n        this.battleManager = new BattleManager_1.BattleManager(this);\n        this.fps = new FpsController_1.FpsController(this);\n        this.assetManager = new AssetManager_1.AssetManager(this);\n        this.spritePerspectiveShader = new SpritePerspectiveShader_1.SpritePerspectiveShader(this.gl, 'spritePerspectiveShader');\n    }\n    changeScene() { }\n    /**\n     * Create the editor\n     * @param parentContainer\n     */\n    createEditor(parentContainer) {\n        this._editor = new Editor_1.Editor(this, parentContainer);\n    }\n    async initialize() {\n        // Browsers copy pixels from the loaded image in top-to-bottom order —\n        // from the top-left corner; but WebGL wants the pixels in bottom-to-top\n        // order — starting from the bottom-left corner. So in order to prevent\n        // the resulting image texture from having the wrong orientation when\n        // rendered, we need to make the following call, to cause the pixels to\n        // be flipped into the bottom-to-top order that WebGL expects.\n        // See jameshfisher.com/2020/10/22/why-is-my-webgl-texture-upside-down\n        // NOTE, this must be done before any textures are loaded\n        this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, true);\n        await this.gameManager.initialize();\n        await this.assetManager.initialize();\n        await this.textManager.initialize();\n        await this.scene.initialize({ level: level1_json_1.default });\n        await this.dialogManager.initialize();\n        await this.battleManager.initialize();\n        // some gl setup\n        this.gl.enable(this.gl.CULL_FACE);\n        this.gl.cullFace(this.gl.BACK);\n        this.gl.enable(this.gl.BLEND);\n        this.gl.blendFuncSeparate(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA, this.gl.ONE, this.gl.ZERO);\n        this.gl.blendFunc(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\n        this.gl.enable(this.gl.DEPTH_TEST); // Enable depth testing\n        this.gl.depthFunc(this.gl.LEQUAL); // Near things obscure far things\n    }\n    update(dt) {\n        // handle gamepad polling\n        this.input.preUpdate(dt);\n        // update the fps\n        this.fps.update(dt);\n        // handle input\n        if (this.input.action != UserAction_1.UserAction.None) {\n            this.soundManager.UserReady();\n            this.scene.handleUserAction({ action: this.input.action, touchPoint: this.input.touchPoint });\n        }\n        // clear the buffers\n        this.gl.clearColor(0.3, 0.3, 0.3, 1.0); // Clear to black, fully opaque\n        this.gl.clearDepth(1.0); // Clear everything\n        // update time for game manager\n        this.gameManager.update(dt);\n        this.battleManager.update(dt);\n        // update most of the game components\n        this.scene.update(dt);\n        // update the menu manager\n        this.dialogManager.update(dt);\n        // update text manager\n        this.textManager.update(dt);\n        // used to reset flags and update hold timers\n        this.input.postUpdate(dt);\n    }\n    resize(width, height) {\n        this.scene.resize(width, height);\n    }\n    dispose() {\n        this.scene.dispose();\n    }\n}\nexports.Engine = Engine;\n\n\n//# sourceURL=webpack://earthquest/./src/core/Engine.ts?");

/***/ }),

/***/ "./src/core/FpsController.ts":
/*!***********************************!*\
  !*** ./src/core/FpsController.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FpsController = void 0;\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\nconst vec2_1 = __importDefault(__webpack_require__(/*! ../math/vec2 */ \"./src/math/vec2.ts\"));\nconst vec4_1 = __importDefault(__webpack_require__(/*! ../math/vec4 */ \"./src/math/vec4.ts\"));\n/**\n * Shows the FPS\n */\nclass FpsController extends Component_1.Component {\n    constructor(eng) {\n        super(eng);\n        /** The frames per second (float) */\n        this.fps = 0;\n        /** Just a counter for displaying FPS to the console */\n        this.delayCounter = 0;\n        /** Show the FPS every second */\n        this.displayInterval = 1000;\n    }\n    /**\n     * Calculate the FPS\n     * @param {float} dt delta time in ms\n     */\n    update(dt) {\n        this.fps = 1000.0 / dt;\n        this.delayCounter += dt;\n        if (this.delayCounter >= this.displayInterval) {\n            //console.debug('ms ' + dt.toFixed(2) + ' FPS: ' + this.fps.toFixed(2));\n            this.eng.textManager.setTextBlock({\n                id: 'FPS',\n                text: 'FPS: ' + this.fps.toFixed(2),\n                position: new vec2_1.default([700, 580]),\n                color: new vec4_1.default([0.1, 0.5, 0.8, 1.0]),\n                depth: -1,\n                scale: 0.5,\n            });\n            this.delayCounter = 0;\n        }\n    }\n}\nexports.FpsController = FpsController;\n\n\n//# sourceURL=webpack://earthquest/./src/core/FpsController.ts?");

/***/ }),

/***/ "./src/core/InputHandler.ts":
/*!**********************************!*\
  !*** ./src/core/InputHandler.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InputHandler = void 0;\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\nconst vec2_1 = __importDefault(__webpack_require__(/*! ../math/vec2 */ \"./src/math/vec2.ts\"));\nconst UserAction_1 = __webpack_require__(/*! ./UserAction */ \"./src/core/UserAction.ts\");\n/**\n * Translates keyboard and gamepad events to game actions\n */\nclass InputHandler extends Component_1.Component {\n    constructor(eng) {\n        super(eng);\n        this.action = UserAction_1.UserAction.None;\n        this.hasGamePad = 'getGamepads' in navigator;\n        console.debug('initializing input:');\n        if (this.hasGamePad) {\n            console.debug(' gamepad supported');\n            window.addEventListener('gamepadconnected', (e) => {\n                this.connectGamepad(e);\n            });\n            window.addEventListener('gamepaddisconnected', (e) => {\n                this.disconnectGamepad(e);\n            });\n        }\n        else {\n            console.warn('gamepad not supported!');\n        }\n        window.addEventListener('keydown', (e) => {\n            this.keydown(e);\n        });\n        window.addEventListener('keyup', (e) => {\n            this.keyup(e);\n        });\n        if (!this.isTouchEnabled()) {\n            console.debug(' mouse enabled');\n            window.addEventListener('mouseup', (e) => {\n                this.action = this.action | UserAction_1.UserAction.Tap;\n                this.touchPoint = new vec2_1.default(e.offsetX, e.target.height - e.offsetY);\n                console.debug('mouse ' + this.touchPoint.x + ', ' + this.touchPoint.y);\n            });\n        }\n        else {\n            console.debug(' touch enabled');\n            window.addEventListener('touchstart', (e) => {\n                if (e.touches.length > 0 && e.touches[0].target === eng.gl.canvas) {\n                    this.action = this.action | UserAction_1.UserAction.Tap;\n                    const t = e.touches[0].target;\n                    this.touchPoint = new vec2_1.default(e.touches[0].pageX - t.clientTop, t.height - e.touches[0].screenY);\n                    console.debug('touch ' + this.touchPoint.x + ', ' + this.touchPoint.y, e);\n                }\n            });\n        }\n    }\n    isTouchEnabled() {\n        return 'ontouchstart' in window || navigator.maxTouchPoints > 0;\n    }\n    keydown(e) {\n        //console.log('keyboard down', e);\n        if (e.key == 'ArrowRight') {\n            this.action = this.action | UserAction_1.UserAction.Right;\n        }\n        if (e.key == 'ArrowLeft') {\n            this.action = this.action | UserAction_1.UserAction.Left;\n        }\n        if (e.key == 'ArrowUp') {\n            this.action = this.action | UserAction_1.UserAction.Up;\n        }\n        if (e.key == 'ArrowDown') {\n            this.action = this.action | UserAction_1.UserAction.Down;\n        }\n        if (e.key == ' ') {\n            this.action = this.action | UserAction_1.UserAction.Action;\n        }\n        if (e.key == 'Enter') {\n            this.action = this.action | UserAction_1.UserAction.Menu;\n        }\n        if (e.key == 'Backspace') {\n            this.action = this.action | UserAction_1.UserAction.Cancel;\n        }\n    }\n    keyup(e) {\n        //console.log('keyboard up ', e);\n        if (e.key == 'ArrowRight') {\n            this.action = this.action & ~UserAction_1.UserAction.Right;\n            this.action = this.action | UserAction_1.UserAction.RightPressed;\n        }\n        if (e.key == 'ArrowLeft') {\n            this.action = this.action & ~UserAction_1.UserAction.Left;\n            this.action = this.action | UserAction_1.UserAction.LeftPressed;\n        }\n        if (e.key == 'ArrowUp') {\n            this.action = this.action & ~UserAction_1.UserAction.Up;\n            this.action = this.action | UserAction_1.UserAction.UpPressed;\n        }\n        if (e.key == 'ArrowDown') {\n            this.action = this.action & ~UserAction_1.UserAction.Down;\n            this.action = this.action | UserAction_1.UserAction.DownPressed;\n        }\n        if (e.key == ' ') {\n            this.action = this.action & ~UserAction_1.UserAction.Action;\n            this.action = this.action | UserAction_1.UserAction.ActionPressed;\n        }\n        if (e.key == 'Enter') {\n            this.action = this.action & ~UserAction_1.UserAction.Menu;\n            this.action = this.action | UserAction_1.UserAction.MenuPressed;\n        }\n        if (e.key == 'Backspace') {\n            this.action = this.action & ~UserAction_1.UserAction.Cancel;\n            this.action = this.action | UserAction_1.UserAction.CancelPressed;\n        }\n    }\n    preUpdate(dt) {\n        // Always call `navigator.getGamepads()` inside of\n        // the game loop, not outside.\n        const gamepads = navigator.getGamepads();\n        for (const gamepad of gamepads) {\n            // Disregard empty slots.\n            if (!gamepad) {\n                continue;\n            }\n            //TODO capture state from game pads\n        }\n    }\n    postUpdate(dt) {\n        // reset press actions\n        this.action = this.action & ~UserAction_1.UserAction.LeftPressed;\n        this.action = this.action & ~UserAction_1.UserAction.RightPressed;\n        this.action = this.action & ~UserAction_1.UserAction.UpPressed;\n        this.action = this.action & ~UserAction_1.UserAction.DownPressed;\n        this.action = this.action & ~UserAction_1.UserAction.ActionPressed;\n        this.action = this.action & ~UserAction_1.UserAction.CancelPressed;\n        this.action = this.action & ~UserAction_1.UserAction.MenuPressed;\n        // reset tap\n        this.action = this.action & ~UserAction_1.UserAction.Tap;\n    }\n    connectGamepad(e) {\n        console.log('✅ 🎮 A gamepad was connected:', e.gamepad);\n    }\n    disconnectGamepad(e) {\n        console.debug('Gamepad disconnected', e.gamepad);\n    }\n}\nexports.InputHandler = InputHandler;\n\n\n//# sourceURL=webpack://earthquest/./src/core/InputHandler.ts?");

/***/ }),

/***/ "./src/core/UserAction.ts":
/*!********************************!*\
  !*** ./src/core/UserAction.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UserAction = void 0;\n/**\n * User input action.\n */\nvar UserAction;\n(function (UserAction) {\n    UserAction[UserAction[\"None\"] = 0] = \"None\";\n    UserAction[UserAction[\"Right\"] = 1] = \"Right\";\n    UserAction[UserAction[\"Left\"] = 2] = \"Left\";\n    UserAction[UserAction[\"Up\"] = 4] = \"Up\";\n    UserAction[UserAction[\"Down\"] = 8] = \"Down\";\n    UserAction[UserAction[\"UpRight\"] = 5] = \"UpRight\";\n    UserAction[UserAction[\"UpLeft\"] = 6] = \"UpLeft\";\n    UserAction[UserAction[\"DownRight\"] = 9] = \"DownRight\";\n    UserAction[UserAction[\"DownLeft\"] = 10] = \"DownLeft\";\n    UserAction[UserAction[\"Menu\"] = 16] = \"Menu\";\n    UserAction[UserAction[\"Action\"] = 32] = \"Action\";\n    UserAction[UserAction[\"Cancel\"] = 64] = \"Cancel\";\n    // press actions. This happens when the buttons is released\n    // and reset for the next frame.\n    UserAction[UserAction[\"RightPressed\"] = 128] = \"RightPressed\";\n    UserAction[UserAction[\"LeftPressed\"] = 256] = \"LeftPressed\";\n    UserAction[UserAction[\"UpPressed\"] = 512] = \"UpPressed\";\n    UserAction[UserAction[\"DownPressed\"] = 1024] = \"DownPressed\";\n    UserAction[UserAction[\"MenuPressed\"] = 2048] = \"MenuPressed\";\n    UserAction[UserAction[\"ActionPressed\"] = 4096] = \"ActionPressed\";\n    UserAction[UserAction[\"CancelPressed\"] = 8192] = \"CancelPressed\";\n    UserAction[UserAction[\"Tap\"] = 16384] = \"Tap\";\n})(UserAction = exports.UserAction || (exports.UserAction = {}));\n\n\n//# sourceURL=webpack://earthquest/./src/core/UserAction.ts?");

/***/ }),

/***/ "./src/data/EnvironmentData.ts":
/*!*************************************!*\
  !*** ./src/data/EnvironmentData.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EnvironmentData = void 0;\n/**\n * Environment data for the game\n */\nclass EnvironmentData {\n    constructor() {\n        /** seed for generating the level */\n        this.seed = 1001;\n        /** number of gold in this level */\n        this.gold = 20;\n    }\n}\nexports.EnvironmentData = EnvironmentData;\n\n\n//# sourceURL=webpack://earthquest/./src/data/EnvironmentData.ts?");

/***/ }),

/***/ "./src/data/GameData.ts":
/*!******************************!*\
  !*** ./src/data/GameData.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GameData = void 0;\nconst EnvironmentData_1 = __webpack_require__(/*! ./EnvironmentData */ \"./src/data/EnvironmentData.ts\");\nconst PlayerData_1 = __webpack_require__(/*! ./PlayerData */ \"./src/data/PlayerData.ts\");\nclass GameData {\n    constructor() {\n        this.environment = new EnvironmentData_1.EnvironmentData();\n        this.player = new PlayerData_1.PlayerData();\n    }\n}\nexports.GameData = GameData;\n\n\n//# sourceURL=webpack://earthquest/./src/data/GameData.ts?");

/***/ }),

/***/ "./src/data/PlayerData.ts":
/*!********************************!*\
  !*** ./src/data/PlayerData.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PlayerData = void 0;\n/**\n * Data for the player\n */\nclass PlayerData {\n    constructor() {\n        this.gold = 0;\n        this.timePlayed = { h: 0, m: 0, s: 0 };\n    }\n}\nexports.PlayerData = PlayerData;\n\n\n//# sourceURL=webpack://earthquest/./src/data/PlayerData.ts?");

/***/ }),

/***/ "./src/editor/Editor.ts":
/*!******************************!*\
  !*** ./src/editor/Editor.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Editor = void 0;\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\nclass Editor extends Component_1.Component {\n    constructor(eng, parentContainer) {\n        super(eng);\n        this.parentContainer = parentContainer;\n        this.buildHtml();\n    }\n    buildHtml() { }\n}\nexports.Editor = Editor;\n\n\n//# sourceURL=webpack://earthquest/./src/editor/Editor.ts?");

/***/ }),

/***/ "./src/environment/EditorScene.ts":
/*!****************************************!*\
  !*** ./src/environment/EditorScene.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EditorScene = void 0;\nconst GroundManager_1 = __webpack_require__(/*! ../systems/GroundManager */ \"./src/systems/GroundManager.ts\");\nconst PlayerController_1 = __webpack_require__(/*! ../components/PlayerController */ \"./src/components/PlayerController.ts\");\nconst DialogMenu_1 = __webpack_require__(/*! ../menus/DialogMenu */ \"./src/menus/DialogMenu.ts\");\nconst SceneComponent_1 = __webpack_require__(/*! ../components/SceneComponent */ \"./src/components/SceneComponent.ts\");\n/**\n * The main scene for walking around in the world. The player can\n * walk around talk to NPC pick up items and fight enemies.\n *\n */\nclass EditorScene extends SceneComponent_1.SceneComponent {\n    get spriteSheetTexture() {\n        return this._spriteSheetTexture;\n    }\n    get ground() {\n        return this._ground;\n    }\n    get player() {\n        return this._player;\n    }\n    get dialog() {\n        return this._dialog;\n    }\n    /**\n     * Constructor\n     * @param {WebGL2RenderingContext} gl The render context\n     */\n    constructor(eng) {\n        super(eng);\n        this._ground = new GroundManager_1.GroundManager(eng);\n        this._player = new PlayerController_1.PlayerController(eng);\n        this._dialog = new DialogMenu_1.DialogMenu(eng);\n    }\n    /**\n     * Sets up the scene\n     */\n    async initialize(options) {\n        this._spriteSheetTexture = this.eng.assetManager.character.texture;\n        const data = this.eng.assetManager.character.data;\n        this.player.initialize(this.spriteSheetTexture, data);\n        this.ground.initialize(options.level);\n        await this.dialog.initialize();\n    }\n    /**\n     * Handles user input. The logic goes through a chain of commands\n     *    1) Main menu\n     *    2) pause menu\n     *    3) battle menu\n     *    4) dialog menu\n     *    5) player in the environment\n     * @param action the action from keyboard or gamepad\n     * @returns True if the action was handled else false\n     */\n    handleUserAction(state) {\n        //console.debug('user action ', action);\n        // handle main menu, pause menu, battles menu, dialog menu, environment\n        return this.eng.dialogManager.handleUserAction(state) || this.player.handleUserAction(state);\n    }\n    /**\n     * Called for each frame.\n     * @param {float} dt delta time from the last frame\n     */\n    update(dt) {\n        // Clear the canvas before we start drawing on it.\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n        this.ground.update(dt);\n        this.player.update(dt);\n        //this.spriteDebugger.update(dt);\n        this.dialog.update(dt);\n    }\n    resize(width, height) { }\n    dispose() {\n        console.log('dispose');\n    }\n}\nexports.EditorScene = EditorScene;\n\n\n//# sourceURL=webpack://earthquest/./src/environment/EditorScene.ts?");

/***/ }),

/***/ "./src/environment/HillGenerator.ts":
/*!******************************************!*\
  !*** ./src/environment/HillGenerator.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HillGenerator = void 0;\nconst LevelComponent_1 = __webpack_require__(/*! ./LevelComponent */ \"./src/environment/LevelComponent.ts\");\n/**\n * Creates a hill\n */\nclass HillGenerator extends LevelComponent_1.LevelComponent {\n    constructor(eng) {\n        super(eng);\n    }\n    generate() {\n        this.size = 10;\n        this.height = 2;\n        const startI = 10;\n        const startJ = 10;\n        const startK = 1;\n        if (this._levelGenerator.HasSpace({\n            startI: startI,\n            startJ: startJ,\n            startK: startK,\n            height: this.height,\n            width: this.size,\n            length: this.size,\n        })) {\n            const endI = startI + this.size;\n            const endJ = startJ + this.size;\n            for (let i = startI; i < endI; i++) {\n                for (let j = startJ; j < endJ; j++) {\n                    let tileName;\n                    // this logic will place grass with black edges as an outline\n                    // around the blocks that are at a level above\n                    if (i == startI && j == startJ) {\n                        tileName = this._levelGenerator.getFloorTileEdgeBoth();\n                    }\n                    else if (i == startI) {\n                        tileName = this._levelGenerator.getFloorTileEdgeLeft();\n                    }\n                    else if (j == startJ) {\n                        tileName = this._levelGenerator.getFloorTileEdgeRight();\n                    }\n                    else {\n                        tileName = this._levelGenerator.getFloorTile();\n                    }\n                    this._levelGenerator.createTile(tileName, i, j, startK);\n                }\n            }\n        }\n        else {\n            console.debug('no space for a hill');\n        }\n    }\n}\nexports.HillGenerator = HillGenerator;\n\n\n//# sourceURL=webpack://earthquest/./src/environment/HillGenerator.ts?");

/***/ }),

/***/ "./src/environment/LevelComponent.ts":
/*!*******************************************!*\
  !*** ./src/environment/LevelComponent.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LevelComponent = void 0;\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\n/**\n * This is an abstract class used to create componets of a level.\n * Like buildings enemies, portals, complex items, etc.\n */\nclass LevelComponent extends Component_1.Component {\n    get params() {\n        return this._levelGenerator.creationParams;\n    }\n    get state() {\n        return this._levelGenerator.levelState;\n    }\n    constructor(eng) {\n        super(eng);\n    }\n    initialize(levelGenerator) {\n        this._levelGenerator = levelGenerator;\n    }\n}\nexports.LevelComponent = LevelComponent;\n\n\n//# sourceURL=webpack://earthquest/./src/environment/LevelComponent.ts?");

/***/ }),

/***/ "./src/environment/LevelGenerator.ts":
/*!*******************************************!*\
  !*** ./src/environment/LevelGenerator.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LevelGenerator = void 0;\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\nconst EmptyTileId_1 = __webpack_require__(/*! ../core/EmptyTileId */ \"./src/core/EmptyTileId.ts\");\nconst vec2_1 = __importDefault(__webpack_require__(/*! ../math/vec2 */ \"./src/math/vec2.ts\"));\nconst Random_1 = __webpack_require__(/*! ../utilities/Random */ \"./src/utilities/Random.ts\");\nconst Timer_1 = __webpack_require__(/*! ../utilities/Timer */ \"./src/utilities/Timer.ts\");\nconst HillGenerator_1 = __webpack_require__(/*! ./HillGenerator */ \"./src/environment/HillGenerator.ts\");\n/**\n * This class is used to generate levels\n */\nclass LevelGenerator extends Component_1.Component {\n    /**\n     * Get the state of the level generation\n     */\n    get levelState() {\n        return this._levelState;\n    }\n    get creationParams() {\n        return this._creationParams;\n    }\n    /**\n     * Get the next random number\n     */\n    get ran() {\n        return this._random.rand();\n    }\n    constructor(eng, _tileFactory) {\n        super(eng);\n        this._tileFactory = _tileFactory;\n        this._tiles = [[[]]];\n        this._hillGenerator = new HillGenerator_1.HillGenerator(eng);\n    }\n    /**\n     * Simple level generator\n     * @param opt\n     * @returns\n     */\n    Generate(param) {\n        this._creationParams = param;\n        this._random = new Random_1.Random(this._creationParams.seed);\n        // allocate empty scene\n        this.createEmpty();\n        // position the character\n        let characterPos = param.playerPos;\n        if (!characterPos) {\n            characterPos = this.getRandomPoint();\n        }\n        // this will just set the player's position\n        this._tileFactory.createStaticTile('player|', characterPos.x, characterPos.y, 1);\n        const timer = new Timer_1.Timer();\n        console.debug('creation params', param);\n        const tiles = this._tiles;\n        // set up your component generators\n        this._hillGenerator.initialize(this);\n        // generate ground\n        this.generateGround();\n        // create a hill\n        this._hillGenerator.generate();\n        const npcPos = this.getRandomPoint(new vec2_1.default(1, 1), new vec2_1.default(param.width - 2, param.length - 2));\n        const npc = this._tileFactory.createStaticTile('npc|poo', npcPos.x, npcPos.y, 1);\n        this._tiles[1][npcPos.y][npcPos.x] = npc;\n        console.debug('poos position ' + npcPos.toString());\n        this.generateLevel1();\n        console.debug('built level in ' + timer.elapsed.toFixed(2) + 'ms');\n        return tiles;\n    }\n    /**\n     * Create an empty world\n     */\n    createEmpty() {\n        const param = this._creationParams;\n        this._tiles = [[[]]];\n        const tiles = this._tiles;\n        // clear all sprites\n        this._tileFactory.clearSpriteBatch();\n        // clear all tiles\n        for (let k = 0; k < param.height; k++) {\n            tiles.push([]);\n            for (let j = 0; j < param.length; j++) {\n                // i is the rows that run from top left to bottom right\n                tiles[k].push([]);\n                for (let i = 0; i < param.width; i++) {\n                    tiles[k][j].push(this._tileFactory.empty);\n                }\n            }\n        }\n    }\n    /**\n     * Check if there is space at the location and size\n     * @param opt\n     * @returns\n     */\n    HasSpace(opt) {\n        const tiles = this._tiles;\n        for (let k = opt.startK; k < opt.startK + opt.height && k < tiles.length; k++) {\n            // check range\n            if (k >= tiles.length || k < 0) {\n                return false;\n            }\n            for (let j = opt.startJ; j < opt.startJ + opt.length; j++) {\n                // check range\n                if (j >= tiles[k].length || j < 0) {\n                    return false;\n                }\n                for (let i = opt.startI; i < opt.startI + opt.width; i++) {\n                    // check range\n                    if (i >= tiles[k][j].length || i < 0) {\n                        return false;\n                    }\n                    // finally check if the tile is empty\n                    if (!tiles[k][j][i].empty) {\n                        return false;\n                    }\n                    // check if there is something below the space we are checking\n                    if (opt.startK > 0 && k == opt.startK) {\n                        // if it's empty we don't want to put something there\n                        if (tiles[k - 1][j][i].empty) {\n                            return false;\n                        }\n                        if (i == 0) {\n                            console.debug('i == 0 ');\n                        }\n                    }\n                }\n            }\n        }\n        return true;\n    }\n    /**\n     * Create ground\n     */\n    generateGround() {\n        const tiles = this._tiles;\n        const groundIndex = 0;\n        const param = this._creationParams;\n        // when creating the ground add padding so we can add in portals\n        for (let j = 1; j < param.length - 1; j++) {\n            for (let i = 1; i < param.width - 1; i++) {\n                const option = Math.floor(this.ran * 50);\n                // get the type and sprite id\n                let tileTypeAndSprite = this.getFloorTile();\n                const newTile = this._tileFactory.createStaticTile(tileTypeAndSprite, i, j, groundIndex);\n                // add the new tile\n                tiles[groundIndex][j][i] = newTile;\n            }\n        }\n        {\n            // create a portal\n            const portalLoc = this.getRandomPoint(new vec2_1.default(param.width - 1, 1), new vec2_1.default(0, param.length - 2));\n            const i = portalLoc.x;\n            const j = portalLoc.y;\n            // add portal\n            const tilePortalSprite = this.getPortalTile();\n            const tilePortal1 = this._tileFactory.createStaticTile(tilePortalSprite, i, j + 0, groundIndex);\n            const tilePortal2 = this._tileFactory.createStaticTile(tilePortalSprite, i, j + 1, groundIndex);\n            // add the new tile\n            tiles[groundIndex][j + 0][i] = tilePortal1;\n            tiles[groundIndex][j + 1][i] = tilePortal2;\n        }\n    }\n    /**\n     * Sets a tile to a given location and type type\n     * @param tileType string in the format of <type|sprite|...>\n     * @param i lower left\n     * @param j lower right\n     * @param k height\n     */\n    createTile(tileType, i, j, k) {\n        const tile = this._tileFactory.createStaticTile(tileType, i, j, k);\n        this._tiles[k][j][i] = tile;\n    }\n    /**\n     * Create stuff above the ground\n     */\n    generateLevel1() {\n        const tiles = this._tiles;\n        const baseLevel = 1;\n        const param = this._creationParams;\n        for (let j = 0; j < param.length; j += 5) {\n            for (let i = 0; i < param.width; i += 5) {\n                const option = Math.floor(this.ran * 100);\n                let tileTypeAndSprite = EmptyTileId_1.EmptyTileId;\n                if (option > 0 && option < 50) {\n                    if (this.HasSpace({ startI: i - 5, startJ: j - 5, startK: 1, width: 10, height: 2, length: 10 })) {\n                        tileTypeAndSprite = this.getCollision();\n                    }\n                }\n                else if (option >= 50) {\n                    if (this.HasSpace({ startI: i - 5, startJ: j - 5, startK: 1, width: 10, height: 2, length: 10 })) {\n                        tileTypeAndSprite = this.getCoin();\n                    }\n                }\n                const newTile = this._tileFactory.createStaticTile(tileTypeAndSprite, i, j, baseLevel);\n                // add the new tile\n                if (tiles[baseLevel][j][i].empty) {\n                    tiles[baseLevel][j][i] = newTile;\n                }\n            }\n        }\n    }\n    /**\n     * Get a random position for the character\n     * @returns\n     */\n    getRandomPoint(offset, scale) {\n        const pos = new vec2_1.default();\n        const p = this._creationParams;\n        if (!offset) {\n            offset = new vec2_1.default(0, 0);\n        }\n        if (!scale) {\n            scale = new vec2_1.default(p.width, p.length);\n        }\n        pos.x = Math.floor(this.ran * scale.x + offset.x);\n        pos.y = Math.floor(this.ran * scale.y + offset.y);\n        return pos;\n    }\n    /**\n     * get a floor tile\n     * @returns\n     */\n    getFloorTile() {\n        const option = Math.floor(this.ran * 50);\n        if (option == 2) {\n            return 'open|block.grass.dirt';\n        }\n        else if (option == 3) {\n            return 'open|block.grass.patch';\n        }\n        else {\n            return 'open|block.grass';\n        }\n    }\n    getFloorTileEdgeLeft() {\n        return 'open|block.grass.edge.left';\n    }\n    getFloorTileEdgeRight() {\n        return 'open|block.grass.edge.right';\n    }\n    getFloorTileEdgeBoth() {\n        return 'open|block.grass.edge.both';\n    }\n    getPortalTile() {\n        const option = Math.floor(this.ran * 50);\n        if (option == 2) {\n            return 'portal|block.grass.dirt|town1';\n        }\n        else if (option == 3) {\n            return 'portal|block.grass.patch|town1';\n        }\n        else {\n            return 'portal|block.grass|town1';\n        }\n    }\n    getCoin() {\n        return 'gold|coin.1';\n    }\n    getCollision() {\n        return 'collide|tree';\n    }\n}\nexports.LevelGenerator = LevelGenerator;\n\n\n//# sourceURL=webpack://earthquest/./src/environment/LevelGenerator.ts?");

/***/ }),

/***/ "./src/graphics/GlBuffer.ts":
/*!**********************************!*\
  !*** ./src/graphics/GlBuffer.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GlBuffer = void 0;\n/**\n * Creates a buffer of a quad.\n */\nclass GlBuffer {\n    /** were the buffers created */\n    get buffersCreated() {\n        return this.vertArrayBuffer != 0;\n    }\n    /**\n     * Constructor\n     * @param {WebGL2RenderingContext} gl\n     */\n    constructor(gl) {\n        this.gl = gl;\n        this.vertBuffer = 0;\n        this.indexBuffer = 0;\n        this.indexCount = 0;\n        this.vertArrayBuffer = 0;\n    }\n    /**\n     * Creates the buffers\n     */\n    createBuffer() {\n        this.dispose();\n        // create vert array buffer\n        this.vertArrayBuffer = this.gl.createVertexArray();\n        // position buffer\n        this.vertBuffer = this.gl.createBuffer();\n        // index buffer\n        this.indexBuffer = this.gl.createBuffer();\n    }\n    /**\n     * Create the buffer\n     * @param quads A array of quads that will be added to this buffer\n     * @param isStatic Is this buffer static\n     * @returns\n     */\n    setBuffers(quads, isStatic = true, bufferIndex = 0) {\n        // Now create an array of positions for the square.\n        const verts = [];\n        const index = [];\n        // check if we have buffer\n        if (!this.vertBuffer || !this.indexBuffer) {\n            this.createBuffer();\n        }\n        // reset counters\n        this.indexCount = 0;\n        //               Building a quad\n        //\n        //    Pos[-1, 1]                Texture [0,1]\n        //   p0---------p1 (max)      p0 ---------p1 (max)\n        //   |        / |              |        / |\n        //   |      /   |              |      /   |\n        //   |    /     |              |    /     |\n        //   |  /       |              |  /       |\n        //   p3---------p2             p3---------p2\n        //  (min)                      (min)\n        //\n        let vertCount = 0;\n        quads.forEach((quad) => {\n            verts.push(quad.min[0], quad.min[1], quad.min[2]);\n            verts.push(quad.minTex[0], quad.maxTex[1]);\n            verts.push(quad.max[0], quad.min[1], quad.min[2]);\n            verts.push(quad.maxTex[0], quad.maxTex[1]);\n            verts.push(quad.max[0], quad.max[1], quad.max[2]);\n            verts.push(quad.maxTex[0], quad.minTex[1]);\n            verts.push(quad.min[0], quad.max[1], quad.max[2]);\n            verts.push(quad.minTex[0], quad.minTex[1]);\n            index.push(vertCount + 0);\n            index.push(vertCount + 1);\n            index.push(vertCount + 3);\n            index.push(vertCount + 1);\n            index.push(vertCount + 2);\n            index.push(vertCount + 3);\n            vertCount += 4;\n        });\n        // save the index count for rendering\n        this.indexCount = index.length;\n        // bind the array buffer\n        this.gl.bindVertexArray(this.vertArrayBuffer);\n        // Create a buffer for positions.\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(verts), isStatic ? this.gl.STATIC_DRAW : this.gl.DYNAMIC_DRAW, bufferIndex);\n        // in order for this to work the vertex shader will\n        // need to have position\n        //  vec3 aPos;\n        //  vec2 aTex;\n        //\n        const positionAttribute = 0;\n        const textureAttribute = 1;\n        // Tell WebGL how to pull out the positions from the position\n        // buffer into the vertexPosition attribute\n        {\n            const numComponents = 3; // position x, y, z\n            const type = this.gl.FLOAT;\n            const normalize = false;\n            const stride = 5 * 4; // pos(x,y,x) + tex(u,v) * 4 byte float\n            const offset = 0;\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertBuffer);\n            this.gl.vertexAttribPointer(positionAttribute, numComponents, type, normalize, stride, offset);\n            this.gl.enableVertexAttribArray(positionAttribute);\n        }\n        // Tell WebGL how to pull out the texture coordinates from\n        // the texture coordinate buffer into the textureCoord attribute.\n        {\n            const numComponents = 2;\n            const type = this.gl.FLOAT;\n            const normalize = false;\n            const stride = 5 * 4; // pos(x,y,x) + tex(u,v) * 4 byte float\n            const offset = 3 * 4; // start after the position\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertBuffer);\n            this.gl.vertexAttribPointer(textureAttribute, numComponents, type, normalize, stride, offset);\n            this.gl.enableVertexAttribArray(textureAttribute);\n        }\n        // index buffer\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(index), isStatic ? this.gl.STATIC_DRAW : this.gl.DYNAMIC_DRAW, bufferIndex);\n    }\n    /**\n     * Enable vertex attributes and element buffer\n     */\n    enable() {\n        if (!this.buffersCreated) {\n            console.error('buffers were not created!');\n        }\n        else {\n            // the vertex and index buffer are grouped with this so we only need\n            // to enable this array buffer\n            this.gl.bindVertexArray(this.vertArrayBuffer);\n        }\n    }\n    /**\n     * Clean up buffer\n     */\n    dispose() {\n        if (this.vertBuffer) {\n            this.gl.deleteBuffer(this.vertBuffer);\n            this.vertBuffer = 0;\n        }\n        if (this.indexBuffer) {\n            this.gl.deleteBuffer(this.indexBuffer);\n            this.indexBuffer = 0;\n        }\n        if (this.vertArrayBuffer) {\n            this.gl.deleteVertexArray(this.vertArrayBuffer);\n        }\n    }\n    draw() { }\n}\nexports.GlBuffer = GlBuffer;\n\n\n//# sourceURL=webpack://earthquest/./src/graphics/GlBuffer.ts?");

/***/ }),

/***/ "./src/graphics/ShaderController.ts":
/*!******************************************!*\
  !*** ./src/graphics/ShaderController.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ShaderController = void 0;\n/**\n * Manages one shader program\n */\nclass ShaderController {\n    /**\n     * Creates the shader controller\n     * @param {WebGL2RenderingContext} gl GL Context\n     * @param {string} shaderName The name of the shader. This is just a way to id different shader for debugging\n     */\n    constructor(gl, shaderName) {\n        this.gl = gl;\n        this.shaderName = shaderName;\n    }\n    /**\n     * Initialize a shader program, so WebGL knows how to draw our data\n     * @param {*} vsSource\n     * @param {*} fsSource\n     * @returns\n     */\n    initShaderProgram(vsSource, fsSource) {\n        const vertexShader = this._loadShader(this.gl.VERTEX_SHADER, vsSource);\n        const fragmentShader = this._loadShader(this.gl.FRAGMENT_SHADER, fsSource);\n        // Create the shader program\n        this.shaderProgram = this.gl.createProgram();\n        this.gl.attachShader(this.shaderProgram, vertexShader);\n        this.gl.attachShader(this.shaderProgram, fragmentShader);\n        // set the attribute locations\n        // not these must exist in the shader so that\n        // the buffer maps to the correct locations.\n        this.gl.bindAttribLocation(this.shaderProgram, 0, 'aPos');\n        this.gl.bindAttribLocation(this.shaderProgram, 1, 'aTex');\n        // link the program\n        this.gl.linkProgram(this.shaderProgram);\n        // needed for get program parameter\n        this.gl.useProgram(this.shaderProgram);\n        // If creating the shader program failed, alert\n        if (!this.gl.getProgramParameter(this.shaderProgram, this.gl.LINK_STATUS)) {\n            console.error(`Unable to initialize the shader program: ${this.gl.getProgramInfoLog(this.shaderProgram)}`);\n        }\n    }\n    /**\n     * Get a shader attribute location\n     * @param {string} name Name of the attribute\n     * @return {number} The attribute location\n     */\n    getAttribute(name) {\n        this.gl.useProgram(this.shaderProgram);\n        const loc = this.gl.getAttribLocation(this.shaderProgram, name);\n        if (loc === null) {\n            console.error('can not find attribute: ' + name + ' in shader ' + this.shaderName);\n        }\n        return loc;\n    }\n    /**\n     * Get a shader attribute location\n     * @param {string} name Name of the attribute\n     * @return {number} The attribute location\n     */\n    getUniform(name) {\n        this.gl.useProgram(this.shaderProgram);\n        const loc = this.gl.getUniformLocation(this.shaderProgram, name);\n        if (loc === null) {\n            console.error('can not find uniform: ' + name + ' in shader ' + this.shaderName);\n        }\n        return loc;\n    }\n    /**\n     * Sets a uniform for a vec4\n     * @param loc\n     * @param value\n     */\n    setVec4(loc, value) {\n        this.gl.uniform4f(loc, value.x, value.y, value.z, value.w);\n    }\n    /**\n     * Set the mat 4\n     * @param loc\n     * @param value\n     */\n    setMat4(loc, value) {\n        this.gl.uniformMatrix4fv(loc, false, value.getValues());\n    }\n    /**\n     * Sets a uniform for a vec3\n     * @param loc\n     * @param value\n     */\n    setVec3(loc, value) {\n        this.gl.uniform3f(loc, value.x, value.y, value.z);\n    }\n    /**\n     * Enable the shader\n     */\n    enable() {\n        // Tell WebGL to use our program when drawing\n        this.gl.useProgram(this.shaderProgram);\n    }\n    /**\n     * creates a shader of the given type, uploads the source and\n     * compiles it.\n     * @param {*} gl\n     * @param {*} type\n     * @param {*} source\n     * @returns\n     */\n    _loadShader(type, source) {\n        const shader = this.gl.createShader(type);\n        // Send the source to the shader object\n        this.gl.shaderSource(shader, source);\n        // Compile the shader program\n        this.gl.compileShader(shader);\n        // See if it compiled successfully\n        if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\n            const typeString = type == this.gl.VERTEX_SHADER ? 'vertex' : 'fragment';\n            console.error(`An error occurred compiling the ${typeString} shaders in ${this.shaderName}: ${this.gl.getShaderInfoLog(shader)}`);\n            this.gl.deleteShader(shader);\n            return null;\n        }\n        return shader;\n    }\n}\nexports.ShaderController = ShaderController;\n\n\n//# sourceURL=webpack://earthquest/./src/graphics/ShaderController.ts?");

/***/ }),

/***/ "./src/graphics/Sprite.ts":
/*!********************************!*\
  !*** ./src/graphics/Sprite.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Sprite = exports.SpriteFlip = void 0;\nconst mat2_1 = __importDefault(__webpack_require__(/*! ../math/mat2 */ \"./src/math/mat2.ts\"));\nconst vec2_1 = __importDefault(__webpack_require__(/*! ../math/vec2 */ \"./src/math/vec2.ts\"));\nconst MathConst = __importStar(__webpack_require__(/*! ../math/constants */ \"./src/math/constants.ts\"));\nvar SpriteFlip;\n(function (SpriteFlip) {\n    SpriteFlip[SpriteFlip[\"None\"] = 0] = \"None\";\n    SpriteFlip[SpriteFlip[\"XFlip\"] = 1] = \"XFlip\";\n    SpriteFlip[SpriteFlip[\"YFlip\"] = 2] = \"YFlip\";\n    SpriteFlip[SpriteFlip[\"Both\"] = 3] = \"Both\";\n})(SpriteFlip = exports.SpriteFlip || (exports.SpriteFlip = {}));\n/**\n * This is a utility class that is used to create a IQuadModel that\n * is used to create a GLBuffer.\n */\nclass Sprite {\n    get tag() {\n        return this._tag;\n    }\n    /**\n     * Get the position in pixels.\n     */\n    get position() {\n        return this._position;\n    }\n    get depth() {\n        return this._depth;\n    }\n    get rotation() {\n        return this._spriteRotate;\n    }\n    getSpriteWidth() {\n        return this._spriteLoc.width * this._scale.x;\n    }\n    getSpriteHeight() {\n        return this._spriteLoc.height * this._scale.y;\n    }\n    get quad() {\n        return this._quad;\n    }\n    constructor(tag) {\n        this._tag = tag;\n        this.initialize({ width: 0, height: 0 }, 800, 600);\n    }\n    /**\n     * Setup the sprite with a sprite sheet and screen size. All calculations are done in\n     * pixels.\n     * @param spriteSheet\n     * @param screenWidth\n     * @param screenHeight\n     */\n    initialize(spriteSheetSize, screenWidth, screenHeight) {\n        this._quad = {\n            min: [-1, -1, -1],\n            max: [1, 1, 1],\n            minTex: [0, 0],\n            maxTex: [1, 1],\n        };\n        this._position = { x: 0, y: 0 };\n        this._spriteLoc = { x: 0, y: 0, width: 0, height: 0 };\n        this._spriteSheetSize = {\n            width: spriteSheetSize.width,\n            height: spriteSheetSize.height,\n        };\n        this._screenSize = { width: screenWidth, height: screenHeight };\n        this._spriteFlip = SpriteFlip.None;\n        this._spriteRotate = 0;\n        this._scale = { x: 1.0, y: 1.0 };\n        this._depth = 0;\n        this._positionOffset = { x: 0, y: 0 };\n    }\n    /**\n     * This function is used to select a sprite from the sprite sheet\n     */\n    setSprite(opt) {\n        this._spriteLoc.x = opt.pixelXOffset;\n        this._spriteLoc.y = opt.pixelYOffset;\n        this._spriteLoc.width = opt.spriteWidth;\n        this._spriteLoc.height = opt.spriteHeight;\n        this.calculateQuad();\n    }\n    setSpriteFlip(spriteFlip) {\n        this._spriteFlip = spriteFlip ?? SpriteFlip.None;\n        this.calculateQuad();\n    }\n    /**\n     * Scale can be set uniform as one number or as separate components (x,y).\n     * @param scale a number or {x: number, y: number}\n     */\n    setSpriteScale(scale) {\n        if (typeof scale === 'number') {\n            this._scale = { x: scale, y: scale };\n        }\n        else {\n            this._scale.x = scale.x;\n            this._scale.y = scale.y;\n        }\n        this.calculateQuad();\n    }\n    /**\n     * Sets an offset for the position based on what the image is.\n     * This allows sprites to be position in the cells correctly.\n     * @param x in pixels\n     * @param y in pixels\n     */\n    setSpritePositionOffset(x, y) {\n        this._positionOffset.x = x;\n        this._positionOffset.y = y;\n    }\n    /**\n     * Set the rotate of the sprite\n     * @param rotation rotation in degrees\n     */\n    setSpriteRotate(rotation = 1.0) {\n        this._spriteRotate = rotation;\n        this.calculateQuad();\n    }\n    /**\n     * Set  x and y in pixels and depth in screen space\n     * @param x\n     * @param y\n     * @param depth screen space [-1, 1]. 1 is far -1 is close\n     */\n    setPosition(x, y, depth) {\n        this._position.x = x;\n        this._position.y = y;\n        if (depth != undefined) {\n            this._depth = depth;\n        }\n        this.calculateQuad();\n    }\n    /**\n     * Builds a IQuadModel\n     */\n    calculateQuad() {\n        const sheetW = this._spriteSheetSize.width;\n        const sheetH = this._spriteSheetSize.height;\n        let minX = this._spriteLoc.x / sheetW;\n        let minY = 1.0 - this._spriteLoc.y / sheetH;\n        let maxX = (this._spriteLoc.x + this._spriteLoc.width) / sheetW;\n        let maxY = 1.0 - (this._spriteLoc.y + this._spriteLoc.height) / sheetH;\n        if (this._spriteFlip == SpriteFlip.XFlip) {\n            this._quad.minTex = [maxX, minY];\n            this._quad.maxTex = [minX, maxY];\n        }\n        else if (this._spriteFlip == SpriteFlip.YFlip) {\n            this._quad.minTex = [minX, maxY];\n            this._quad.maxTex = [maxX, minY];\n        }\n        else if (this._spriteFlip == SpriteFlip.Both) {\n            this._quad.minTex = [maxX, maxY];\n            this._quad.maxTex = [minX, minY];\n        }\n        else {\n            this._quad.minTex = [minX, minY];\n            this._quad.maxTex = [maxX, maxY];\n        }\n        // convert to screen space, min is the top left corner\n        this._quad.min = [\n            this._position.x + this._positionOffset.x,\n            this._position.y + this._positionOffset.y,\n            this._depth,\n        ];\n        const spriteWidth = this._spriteLoc.width * this._scale.x;\n        const spriteHeight = this._spriteLoc.height * this._scale.y;\n        // max is the bottom right\n        this._quad.max = [\n            this._quad.min[0] + spriteWidth,\n            this._quad.min[1] + spriteHeight,\n            this._depth,\n        ];\n        // if we have some rotation then apply it\n        if (!MathConst.equals(this._spriteRotate, 0.0)) {\n            let minTmp = new vec2_1.default([-this._quad.min[0], -this._quad.min[1]]);\n            let maxTmp = new vec2_1.default([-this._quad.max[0], -this._quad.max[1]]);\n            const rotation = new mat2_1.default();\n            rotation.setIdentity();\n            rotation.rotate(MathConst.toRadian(this._spriteRotate));\n            minTmp.multiplyMat2(rotation);\n            maxTmp.multiplyMat2(rotation);\n            this._quad.min[0] = minTmp.x + this._quad.min[0];\n            this._quad.min[1] = minTmp.y + this._quad.min[1];\n            this._quad.max[0] = maxTmp.x + this._quad.max[0];\n            this._quad.max[1] = maxTmp.y + this._quad.max[1];\n        }\n    }\n}\nexports.Sprite = Sprite;\n\n\n//# sourceURL=webpack://earthquest/./src/graphics/Sprite.ts?");

/***/ }),

/***/ "./src/graphics/SpriteBaseController.ts":
/*!**********************************************!*\
  !*** ./src/graphics/SpriteBaseController.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SpritBaseController = void 0;\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\nconst GlBuffer_1 = __webpack_require__(/*! ./GlBuffer */ \"./src/graphics/GlBuffer.ts\");\n/**\n * This class controls a sprite's position and scale\n * given a sprite sheet and some json data that holds the\n * sprite offset and size in pixels.\n */\nclass SpritBaseController extends Component_1.Component {\n    get rotation() {\n        return this.sprite.rotation;\n    }\n    get buffer() {\n        return this._buffer;\n    }\n    get selectedSpriteIndex() {\n        return this._selectedSpriteIndex;\n    }\n    get selectedSpriteId() {\n        return this._selectedSpriteId;\n    }\n    get spriteCount() {\n        return this._spriteData.length;\n    }\n    constructor(eng) {\n        super(eng);\n        this._spriteData = [];\n        this._indexLookup = new Map();\n        this._selectedSpriteIndex = 0;\n        this._dirty = true;\n    }\n    /**\n     * setup the sprite\n     * @param texture\n     * @param spriteData\n     */\n    initialize(texture, spriteData, defaultSprite) {\n        // save the data\n        this._spriteData = spriteData;\n        // cache the indices\n        this._indexLookup.clear();\n        this._spriteData.forEach((val, i) => {\n            this._indexLookup.set(val.id, i);\n        });\n        // create the gl buffers for this sprite\n        this._buffer = new GlBuffer_1.GlBuffer(this.gl);\n        // setup the shader for the sprite\n        this._spriteTexture = texture;\n        // needs to be committed to buffer when update is called\n        this._dirty = true;\n    }\n    /**\n     * Gets the list of all the sprites\n     * @returns\n     */\n    getSpriteList() {\n        const idList = [];\n        this._spriteData.forEach((sprite) => idList.push(sprite.id));\n        return idList;\n    }\n    /**\n     * Sets the sprites position\n     * @param x in screen pixels\n     * @param y in screen pixels\n     * @param scale multiplied by the sprite width and height\n     * @param depth is depth buffer space (-1 to 1) 1 is far -1 is near\n     */\n    setSpritePosition(x, y, depth) {\n        this.sprite.setPosition(x, y, depth);\n        this._dirty = true;\n    }\n    spriteWidth() {\n        return this.sprite.getSpriteWidth();\n    }\n    spriteHeight() {\n        return this.sprite.getSpriteHeight();\n    }\n    /**\n     * Scale the image default is 1.0\n     * @param scale uniform scale or separate components (x,y)\n     */\n    scale(scale) {\n        this.sprite.setSpriteScale(scale);\n        this._dirty = true;\n    }\n    /**\n     * Flip the image.\n     * @param flipDirection\n     */\n    flip(flipDirection) {\n        this.sprite.setSpriteFlip(flipDirection);\n        this._dirty = true;\n    }\n    /**\n     * Rotate the angle in degrees\n     * @param angle In Degrees\n     */\n    rotate(angle) {\n        this.sprite.setSpriteRotate(angle);\n        this._dirty = true;\n    }\n    /**\n     * Sets the view offset for the projection. If undefined it will use the\n     * offset from ViewManager\n     * @param offset\n     */\n    viewOffset(offset) {\n        this._viewOffset = offset;\n        this._dirty = true;\n    }\n    /**\n     * Sets a view scale for the projection. If undefined it will use the\n     * offset from ViewManager\n     * @param scale\n     */\n    viewScale(scale) {\n        this._viewScale = scale;\n        this._dirty = true;\n    }\n    /**\n     * Select a sprite\n     * @param id the id in the sprite sheet\n     */\n    setSprite(id) {\n        // find the sprite of a given id\n        let index = 0;\n        // number or look up\n        if (typeof id === 'number') {\n            index = id;\n        }\n        else {\n            index = this._indexLookup.get(id);\n        }\n        const sprite = this._spriteData[index ?? 0];\n        if (sprite) {\n            // does the id match or if the id is null just pick the first one or if id is a\n            // number does the index match\n            this._selectedSpriteIndex = index;\n            this._selectedSpriteId = sprite.id;\n            const xOffset = sprite.offset ? sprite.offset[0] : 0;\n            const yOffset = sprite.offset ? sprite.offset[1] : 0;\n            this.sprite.setSpritePositionOffset(xOffset, yOffset);\n            this.sprite.setSprite({\n                pixelXOffset: sprite.loc[0],\n                pixelYOffset: sprite.loc[1],\n                spriteWidth: sprite.loc[2],\n                spriteHeight: sprite.loc[3],\n            });\n            this._dirty = true;\n        }\n        else {\n            console.error('cannot find sprite ' + id);\n        }\n    }\n    /**\n     * Draw the sprite\n     * @param dt\n     */\n    update(dt) {\n        // only commit to buffer if something changed\n        if (this._dirty) {\n            this.commitToBuffer();\n            this._dirty = false;\n        }\n        if (!this._buffer.buffersCreated) {\n            console.error('buffers are not created. Call commitToBuffers() first.');\n        }\n        else {\n            this._buffer.enable();\n            this.eng.spritePerspectiveShader.setSpriteSheet(this._spriteTexture);\n            this.eng.spritePerspectiveShader.enable();\n            const view = this.eng.viewManager;\n            let projection = view.projection;\n            if (this._viewOffset && this._viewScale) {\n                projection = view.calculateProjection(this._viewOffset, this._viewScale);\n            }\n            // set the project\n            this.eng.spritePerspectiveShader.setProj(projection);\n            this.render();\n        }\n    }\n}\nexports.SpritBaseController = SpritBaseController;\n\n\n//# sourceURL=webpack://earthquest/./src/graphics/SpriteBaseController.ts?");

/***/ }),

/***/ "./src/graphics/SpriteBatchController.ts":
/*!***********************************************!*\
  !*** ./src/graphics/SpriteBatchController.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SpritBatchController = void 0;\nconst Sprite_1 = __webpack_require__(/*! ../graphics/Sprite */ \"./src/graphics/Sprite.ts\");\nconst SpriteBaseController_1 = __webpack_require__(/*! ./SpriteBaseController */ \"./src/graphics/SpriteBaseController.ts\");\n/**\n * This class controls a sprite's position and scale\n * given a sprite sheet and some json data that holds the\n * sprite offset and size in pixels.\n */\nclass SpritBatchController extends SpriteBaseController_1.SpritBaseController {\n    /** The sprite */\n    get sprite() {\n        return this.getSprite(this._activeSprite);\n    }\n    /**\n     * Get the number of sprites\n     */\n    get spriteCount() {\n        return this._spriteData.length;\n    }\n    constructor(eng) {\n        super(eng);\n        this._sprites = new Map();\n    }\n    /**\n     * setup the sprite\n     * @param texture\n     * @param spriteData\n     */\n    initialize(texture, spriteData, defaultSprite) {\n        super.initialize(texture, spriteData, defaultSprite);\n    }\n    /**\n     * A way of keeping track of our sprites\n     * @param id\n     * @returns\n     */\n    getSprite(id) {\n        let sprite = this._sprites.get(id);\n        if (!this._sprites.has(id)) {\n            // create new sprite and initialize it\n            sprite = new Sprite_1.Sprite(id);\n            sprite.initialize({\n                width: this._spriteTexture.width,\n                height: this._spriteTexture.height,\n            }, this.gl.canvas.width, this.gl.canvas.height);\n            this._sprites.set(id, sprite);\n        }\n        return sprite;\n    }\n    /**\n     * Do we have a sprite with this id\n     * @param id\n     * @returns\n     */\n    hasSprite(id) {\n        return this._sprites.has(id);\n    }\n    /**\n     * clear all sprites\n     */\n    clearAllSprites() {\n        this._sprites.clear();\n        this._dirty = true;\n    }\n    /**\n     * Sets an active sprite\n     * @param spriteId\n     */\n    activeSprite(spriteId) {\n        this._activeSprite = spriteId;\n    }\n    /**\n     * remove a sprite. You will need to call Commit for the\n     * sprite to be removed.\n     * @param spriteId\n     * @returns\n     */\n    removeSprite(spriteId) {\n        this._dirty = true;\n        return this._sprites.delete(spriteId);\n    }\n    /**\n     * Commit all sprites to the buffer\n     */\n    commitToBuffer() {\n        const quads = [];\n        //console.debug('Committing ' + this._sprites.size);\n        this._sprites.forEach((sprite) => {\n            quads.push(sprite.quad);\n        });\n        // update the buffer\n        this._buffer.setBuffers(quads, false);\n    }\n    render() {\n        const vertexCount = this._buffer.indexCount;\n        const type = this.gl.UNSIGNED_SHORT;\n        const offset = 0;\n        this.gl.drawElements(this.gl.TRIANGLES, vertexCount, type, offset);\n    }\n}\nexports.SpritBatchController = SpritBatchController;\n\n\n//# sourceURL=webpack://earthquest/./src/graphics/SpriteBatchController.ts?");

/***/ }),

/***/ "./src/graphics/SpriteController.ts":
/*!******************************************!*\
  !*** ./src/graphics/SpriteController.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SpritController = void 0;\nconst Sprite_1 = __webpack_require__(/*! ../graphics/Sprite */ \"./src/graphics/Sprite.ts\");\nconst SpriteBaseController_1 = __webpack_require__(/*! ./SpriteBaseController */ \"./src/graphics/SpriteBaseController.ts\");\n/**\n * This class controls a sprite's position and scale\n * given a sprite sheet and some json data that holds the\n * sprite offset and size in pixels.\n */\nclass SpritController extends SpriteBaseController_1.SpritBaseController {\n    get sprite() {\n        return this._sprite;\n    }\n    constructor(eng) {\n        super(eng);\n        this._sprite = new Sprite_1.Sprite();\n    }\n    /**\n     * setup the sprite\n     * @param texture\n     * @param spriteData\n     */\n    initialize(texture, spriteData, defaultSprite) {\n        super.initialize(texture, spriteData, defaultSprite);\n        // set up the sprite\n        this.sprite.initialize({ width: texture.width, height: texture.height }, this.gl.canvas.width, this.gl.canvas.height);\n        // set a default sprite\n        this.setSprite(defaultSprite);\n        // set the position of the sprite on the screen\n        this.sprite.setPosition(0, 0, 0);\n    }\n    commitToBuffer() {\n        this._buffer.setBuffers([this._sprite.quad], false);\n    }\n    render() {\n        const vertexCount = this._buffer.indexCount;\n        const type = this.gl.UNSIGNED_SHORT;\n        const offset = 0;\n        this.gl.drawElements(this.gl.TRIANGLES, vertexCount, type, offset);\n    }\n}\nexports.SpritController = SpritController;\n\n\n//# sourceURL=webpack://earthquest/./src/graphics/SpriteController.ts?");

/***/ }),

/***/ "./src/graphics/TextController.ts":
/*!****************************************!*\
  !*** ./src/graphics/TextController.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TextController = void 0;\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\nconst GlBuffer_1 = __webpack_require__(/*! ./GlBuffer */ \"./src/graphics/GlBuffer.ts\");\nclass TextController extends Component_1.Component {\n    constructor(eng, fontData) {\n        super(eng);\n        this.fontData = fontData;\n        // Create a new buffer\n        this.buffer = new GlBuffer_1.GlBuffer(this.gl);\n    }\n    /**\n     * Initialize a new text block\n     * @param block Text properties\n     * @param lineHeight The height of the tallest character in pixels\n     */\n    initialize(block, lineHeight) {\n        const screenHeight = this.eng.height;\n        const screenWidth = this.eng.width;\n        const originX = block.position.x;\n        const originY = this.eng.height - block.position.y;\n        let offsetX = originX;\n        let offsetY = originY;\n        let xpos1 = offsetX;\n        let ypos1 = offsetY;\n        let xpos2 = offsetX;\n        let ypos2 = offsetY;\n        this.color = block.color;\n        const zpos = block.depth;\n        let charCount = 0;\n        const text = block.text;\n        // if the text is empty there is nothing to do\n        if (!text) {\n            return;\n        }\n        const quads = [];\n        // loop over all the characters in the text block\n        // and create geometry for them.\n        for (let i = 0; i < text.length; i++) {\n            // get the character\n            let ch = text.charAt(i);\n            // check for new line and out of range\n            if (ch == '\\n') {\n                offsetY -= lineHeight;\n                offsetX = originX;\n                continue;\n            }\n            else if (ch < ' ' || ch > '~') {\n                ch = '?';\n            }\n            const font = this.fontData.find((value) => value.ch == ch);\n            if (!font) {\n                console.warn(\"Don't have data for ch: \" + ch);\n            }\n            xpos1 = offsetX + font.bearingX;\n            ypos1 = offsetY - (font.sizeY - font.bearingY); // bottom of the letter\n            xpos2 = offsetX + block.scale * font.advance;\n            ypos2 = offsetY + block.scale * font.bearingY; // top of the letter\n            // set for the next letter\n            offsetX = xpos2;\n            const tu1 = font.u1;\n            const tv1 = 1 - font.v2;\n            const tu2 = font.u2;\n            const tv2 = 1 - font.v1;\n            const quad = {\n                min: [(xpos1 / screenWidth) * 2 - 1.0, (ypos1 / screenHeight) * 2 - 1.0, zpos],\n                max: [(xpos2 / screenWidth) * 2 - 1.0, (ypos2 / screenHeight) * 2 - 1.0, zpos],\n                minTex: [tu1, tv2],\n                maxTex: [tu2, tv1],\n            };\n            charCount++;\n            quads.push(quad);\n        }\n        this.buffer.setBuffers(quads, false);\n    }\n    /**\n     * Updates the text animations.\n     * @param {float} dt Delta time in ms\n     */\n    update(dt) {\n        if (this.buffer.buffersCreated) {\n            // enable the buffer\n            this.buffer.enable();\n            {\n                const vertexCount = this.buffer.indexCount;\n                const type = this.gl.UNSIGNED_SHORT;\n                const offset = 0;\n                this.gl.drawElements(this.gl.TRIANGLES, vertexCount, type, offset);\n            }\n        }\n    }\n}\nexports.TextController = TextController;\n\n\n//# sourceURL=webpack://earthquest/./src/graphics/TextController.ts?");

/***/ }),

/***/ "./src/graphics/Texture.ts":
/*!*********************************!*\
  !*** ./src/graphics/Texture.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Texture = void 0;\n/**\n * OpenGL texture\n */\nclass Texture {\n    constructor(gl) {\n        this.gl = gl;\n        this.glTexture = 0;\n    }\n    /**\n     * Enable this texture, activate the texture and set the uniform for the shader\n     */\n    enable(uniformIndex, slot = 0, activeTexture = this.gl.TEXTURE0) {\n        // Tell WebGL we want to affect texture unit\n        this.gl.activeTexture(activeTexture);\n        // Bind the texture to texture unit 0\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.glTexture);\n        // Tell the shader we bound the texture to texture unit\n        this.gl.uniform1i(uniformIndex, slot);\n    }\n    async loadImage(imagePath) {\n        return new Promise((resolve, reject) => {\n            this.texturePath = imagePath;\n            this.glTexture = this.gl.createTexture();\n            this.gl.bindTexture(this.gl.TEXTURE_2D, this.glTexture);\n            // Because images have to be download over the internet\n            // they might take a moment until they are ready.\n            // Until then put a single pixel in the texture so we can\n            // use it immediately. When the image has finished downloading\n            // we'll update the texture with the contents of the image.\n            const level = 0;\n            const internalFormat = this.gl.RGBA;\n            const width = 1;\n            const height = 1;\n            const border = 0;\n            const srcFormat = this.gl.RGBA;\n            const srcType = this.gl.UNSIGNED_BYTE;\n            const pixel = new Uint8Array([0, 0, 255, 255]); // opaque blue\n            this.gl.texImage2D(this.gl.TEXTURE_2D, level, internalFormat, width, height, border, srcFormat, srcType, pixel);\n            const image = new Image();\n            image.onload = () => {\n                this.gl.bindTexture(this.gl.TEXTURE_2D, this.glTexture);\n                this.width = image.width;\n                this.height = image.height;\n                this.gl.texImage2D(this.gl.TEXTURE_2D, level, internalFormat, srcFormat, srcType, image);\n                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.MIRRORED_REPEAT);\n                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.MIRRORED_REPEAT);\n                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.NEAREST);\n                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.NEAREST);\n                this.gl.generateMipmap(this.gl.TEXTURE_2D);\n                return resolve();\n            };\n            image.onerror = (event) => {\n                console.error(event);\n                return reject();\n            };\n            image.src = imagePath;\n        });\n    }\n    isPowerOf2(value) {\n        return (value & (value - 1)) == 0;\n    }\n}\nexports.Texture = Texture;\n\n\n//# sourceURL=webpack://earthquest/./src/graphics/Texture.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst CanvasController_1 = __webpack_require__(/*! ./core/CanvasController */ \"./src/core/CanvasController.ts\");\nconst Engine_1 = __webpack_require__(/*! ./core/Engine */ \"./src/core/Engine.ts\");\n__webpack_require__(/*! ./css/canvas.css */ \"./src/css/canvas.css\");\n/**\n * Create the only instance of a canvas controller\n */\nconst canvas = new CanvasController_1.CanvasController(onResize);\nconst engine = new Engine_1.Engine(canvas.gl);\n/**\n * Handle resize\n * @param width\n * @param height\n */\nfunction onResize(width, height) {\n    engine.resize(width, height);\n}\n/** time tracking variables */\nlet previousTimeStamp;\nfunction step(timestamp) {\n    // save the start time\n    if (previousTimeStamp === undefined) {\n        previousTimeStamp = timestamp;\n    }\n    // calculate the elapsed\n    const elapsed = timestamp - previousTimeStamp;\n    // update the scene\n    engine.update(elapsed);\n    // request a new frame\n    previousTimeStamp = timestamp;\n    window.requestAnimationFrame(step);\n}\n/**\n * Start the engine then request and animation frame\n */\nengine\n    .initialize()\n    .then(() => {\n    // request the first frame\n    window.requestAnimationFrame(step);\n})\n    .catch((e) => {\n    console.error('Error initializing ', e);\n});\n// add the canvas to the body\ndocument.body.appendChild(canvas.element());\n\n\n//# sourceURL=webpack://earthquest/./src/index.ts?");

/***/ }),

/***/ "./src/math/Curve.ts":
/*!***************************!*\
  !*** ./src/math/Curve.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Curve = exports.CurveType = void 0;\nconst MathConst = __importStar(__webpack_require__(/*! ../math/constants */ \"./src/math/constants.ts\"));\nvar CurveType;\n(function (CurveType) {\n    CurveType[CurveType[\"discreet\"] = 0] = \"discreet\";\n    CurveType[CurveType[\"linear\"] = 1] = \"linear\";\n})(CurveType = exports.CurveType || (exports.CurveType = {}));\n/**\n * Class used to create an animation.\n */\nclass Curve {\n    isRunning() {\n        return this._running;\n    }\n    getValue() {\n        return this._position;\n    }\n    getTime() {\n        return this._time;\n    }\n    isDone() {\n        return this._isDone;\n    }\n    constructor() {\n        this._points = [];\n        this._point0 = 0;\n        this._point1 = 1;\n        this._position = 0;\n        this._time = 0;\n        this._reverse = false;\n        this._pingPong = false;\n        this._type = CurveType.discreet;\n        this._isDone = false;\n    }\n    start(restart, onDone, onUpdate) {\n        if (restart) {\n            this._time = 0;\n            this._position = 0;\n            this._isDone = false;\n            if (onDone) {\n                this.onDone = onDone;\n            }\n            if (onUpdate) {\n                this.onUpdate = onUpdate;\n            }\n            // if there are points use them\n            if (this._points.length > 0) {\n                // handle reverse\n                if (this._reverse) {\n                    this._time = this._points[this._points.length - 1].t;\n                    this._position = this._points[this._points.length - 1].p;\n                }\n                else {\n                    this._time = this._points[0].t;\n                    this._position = this._points[0].p;\n                }\n            }\n        }\n        this._running = true;\n        return this;\n    }\n    /**\n     * Pause the animation and set a custom position if wanted\n     * @param position\n     * @returns\n     */\n    pause(position) {\n        if (position != undefined) {\n            this._position = position;\n        }\n        this._running = false;\n        return this;\n    }\n    /**\n     * Repeat the curve.\n     * @param value How many times to repeat. -1 is forever\n     * @returns\n     */\n    repeat(value) {\n        this._repeat = value;\n        return this;\n    }\n    curve(type) {\n        this._type = type;\n        return this;\n    }\n    points(points) {\n        // make a copy and sort it by time\n        this._points = points.slice().sort((a, b) => a.t - b.t);\n        return this;\n    }\n    reverse(reverse) {\n        this._reverse = reverse;\n        return this;\n    }\n    pingPong(pingPong) {\n        this._pingPong = pingPong;\n        return this;\n    }\n    update(dt) {\n        // if it is running and not done calculate\n        // a new position\n        if (this._running && !this._isDone) {\n            // update time.\n            if (this._reverse) {\n                this._time -= dt;\n            }\n            else {\n                this._time += dt;\n            }\n            // find the closest point\n            this._point0 = this.findClosetTimeIndex(this._time);\n            const lastPointOrFirst = (this._reverse && this._point0 == 0) || (!this._reverse && this._point0 >= this._points.length - 1);\n            // if there are still more points or are we done\n            if (!lastPointOrFirst) {\n                this._point1 = this._point0 + 1;\n            }\n            else {\n                // set the position. We only have one point\n                // so this is easy.\n                this._position = this._points[this._point0].p;\n                // handle update\n                if (this.onUpdate) {\n                    this.onUpdate(this._position, this);\n                }\n                // handle the repeat and ping pong\n                if (this._repeat > 0 || this._repeat == -1) {\n                    // if we are ping ponging\n                    if (this._pingPong) {\n                        this._reverse = !this._reverse;\n                    }\n                    else {\n                        // reset time\n                        this._time = 0;\n                    }\n                    if (this._repeat > 0) {\n                        this._repeat--;\n                    }\n                }\n                else {\n                    // we are done. Set flag.\n                    this._isDone = true;\n                    // raise event as needed\n                    if (this.onDone) {\n                        this.onDone(this);\n                    }\n                }\n                // no more calculations we hit the last point\n                return;\n            }\n            let p0 = this._points[this._point0].p;\n            let p1 = this._points[this._point1].p;\n            // calculate the position\n            if (this._type == CurveType.linear) {\n                const t0 = this._points[this._point0].t;\n                const t1 = this._points[this._point1].t;\n                const t = MathConst.Clamp((this._time - t0) / (t1 - t0), 0, 1.0);\n                this._position = p0 + t * (p1 - p0);\n            }\n            else if (this._type == CurveType.discreet) {\n                this._position = p0;\n            }\n            if (this.onUpdate) {\n                this.onUpdate(this._position, this);\n            }\n        }\n    }\n    /**\n     * Finds the index closest to the given time value.\n     * @param time\n     * @returns\n     */\n    findClosetTimeIndex(time) {\n        let startIndex = 0;\n        const clip = this._points;\n        let endIndex = clip.length - 1;\n        let startTime = clip[startIndex].t;\n        let lastTime = clip[endIndex].t;\n        // check time bounds\n        if (time <= startTime) {\n            return startIndex;\n        }\n        else if (time >= lastTime) {\n            return endIndex;\n        }\n        while (true) {\n            // if the current is the time we are looking for\n            // or the startIndex is one less then endIndex\n            // then we are done.\n            if (time == startTime || startIndex >= endIndex - 1) {\n                return startIndex;\n            }\n            const midIndex = Math.floor((startIndex + endIndex) / 2.0);\n            const midFrame = clip[midIndex].t;\n            if (time > midFrame) {\n                startIndex = midIndex;\n            }\n            else if (time < midFrame) {\n                endIndex = midIndex;\n            }\n            else {\n                // found it in the middle\n                return midIndex;\n            }\n        }\n    }\n}\nexports.Curve = Curve;\n\n\n//# sourceURL=webpack://earthquest/./src/math/Curve.ts?");

/***/ }),

/***/ "./src/math/constants.ts":
/*!*******************************!*\
  !*** ./src/math/constants.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Clamp = exports.equals = exports.toRadian = exports.degree = exports.round = exports.RANDOM = exports.epsilon = void 0;\nexports.epsilon = 0.00001;\n//\n// Custom math functions\n//\n/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexports.RANDOM = Math.random;\n/**\n * Symmetric round\n * see https://www.npmjs.com/package/round-half-up-symmetric#user-content-detailed-background\n *\n * @param {Number} a value to round\n */\nfunction round(a) {\n    if (a >= 0)\n        return Math.round(a);\n    return a % 0.5 === 0 ? Math.floor(a) : Math.round(a);\n}\nexports.round = round;\nexports.degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\nfunction toRadian(a) {\n    return a * exports.degree;\n}\nexports.toRadian = toRadian;\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nfunction equals(a, b) {\n    return Math.abs(a - b) <= exports.epsilon * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nexports.equals = equals;\n/**\n * Clamp a number between values\n * @param num\n * @param min\n * @param max\n * @returns\n */\nfunction Clamp(num, min, max) {\n    return Math.min(Math.max(num, min), max);\n}\nexports.Clamp = Clamp;\n\n\n//# sourceURL=webpack://earthquest/./src/math/constants.ts?");

/***/ }),

/***/ "./src/math/mat2.ts":
/*!**************************!*\
  !*** ./src/math/mat2.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst vec2_1 = __importDefault(__webpack_require__(/*! ./vec2 */ \"./src/math/vec2.ts\"));\nconst constants_1 = __webpack_require__(/*! ./constants */ \"./src/math/constants.ts\");\nclass mat2 {\n    constructor(values) {\n        this.values = new Float32Array(4);\n        if (values !== undefined) {\n            this.init(values);\n        }\n    }\n    at(index) {\n        return this.values[index];\n    }\n    init(values) {\n        for (let i = 0; i < 4; i++) {\n            this.values[i] = values[i];\n        }\n        return this;\n    }\n    reset() {\n        for (let i = 0; i < 4; i++) {\n            this.values[i] = 0;\n        }\n    }\n    copy(dest) {\n        if (!dest) {\n            dest = new mat2();\n        }\n        for (let i = 0; i < 4; i++) {\n            dest.values[i] = this.values[i];\n        }\n        return dest;\n    }\n    all() {\n        const data = [];\n        for (let i = 0; i < 4; i++) {\n            data[i] = this.values[i];\n        }\n        return data;\n    }\n    row(index) {\n        return [\n            this.values[index * 2 + 0],\n            this.values[index * 2 + 1],\n        ];\n    }\n    col(index) {\n        return [\n            this.values[index],\n            this.values[index + 2],\n        ];\n    }\n    equals(matrix, threshold = constants_1.epsilon) {\n        for (let i = 0; i < 4; i++) {\n            if (Math.abs(this.values[i] - matrix.at(i)) > threshold) {\n                return false;\n            }\n        }\n        return true;\n    }\n    determinant() {\n        return this.values[0] * this.values[3] - this.values[2] * this.values[1];\n    }\n    setIdentity() {\n        this.values[0] = 1;\n        this.values[1] = 0;\n        this.values[2] = 0;\n        this.values[3] = 1;\n        return this;\n    }\n    transpose() {\n        const temp = this.values[1];\n        this.values[1] = this.values[2];\n        this.values[2] = temp;\n        return this;\n    }\n    inverse() {\n        let det = this.determinant();\n        if (!det) {\n            return null;\n        }\n        det = 1.0 / det;\n        const a11 = this.values[0];\n        this.values[0] = det * (this.values[3]);\n        this.values[1] = det * (-this.values[1]);\n        this.values[2] = det * (-this.values[2]);\n        this.values[3] = det * a11;\n        return this;\n    }\n    multiply(matrix) {\n        const a11 = this.values[0];\n        const a12 = this.values[1];\n        const a21 = this.values[2];\n        const a22 = this.values[3];\n        this.values[0] = a11 * matrix.at(0) + a12 * matrix.at(2);\n        this.values[1] = a11 * matrix.at(1) + a12 * matrix.at(3);\n        this.values[2] = a21 * matrix.at(0) + a22 * matrix.at(2);\n        this.values[3] = a21 * matrix.at(1) + a22 * matrix.at(3);\n        return this;\n    }\n    rotate(angle) {\n        const a11 = this.values[0];\n        const a12 = this.values[1];\n        const a21 = this.values[2];\n        const a22 = this.values[3];\n        const sin = Math.sin(angle);\n        const cos = Math.cos(angle);\n        this.values[0] = a11 * cos + a12 * sin;\n        this.values[1] = a11 * -sin + a12 * cos;\n        this.values[2] = a21 * cos + a22 * sin;\n        this.values[3] = a21 * -sin + a22 * cos;\n        return this;\n    }\n    multiplyVec2(vector, result) {\n        const x = vector.x;\n        const y = vector.y;\n        if (result) {\n            result.xy = [\n                x * this.values[0] + y * this.values[1],\n                x * this.values[2] + y * this.values[3],\n            ];\n            return result;\n        }\n        else {\n            return new vec2_1.default([\n                x * this.values[0] + y * this.values[1],\n                x * this.values[2] + y * this.values[3],\n            ]);\n        }\n    }\n    scale(vector) {\n        const a11 = this.values[0];\n        const a12 = this.values[1];\n        const a21 = this.values[2];\n        const a22 = this.values[3];\n        const x = vector.x;\n        const y = vector.y;\n        this.values[0] = a11 * x;\n        this.values[1] = a12 * y;\n        this.values[2] = a21 * x;\n        this.values[3] = a22 * y;\n        return this;\n    }\n    static product(m1, m2, result) {\n        const a11 = m1.at(0);\n        const a12 = m1.at(1);\n        const a21 = m1.at(2);\n        const a22 = m1.at(3);\n        if (result) {\n            result.init([\n                a11 * m2.at(0) + a12 * m2.at(2),\n                a11 * m2.at(1) + a12 * m2.at(3),\n                a21 * m2.at(0) + a22 * m2.at(2),\n                a21 * m2.at(1) + a22 * m2.at(3),\n            ]);\n            return result;\n        }\n        else {\n            return new mat2([\n                a11 * m2.at(0) + a12 * m2.at(2),\n                a11 * m2.at(1) + a12 * m2.at(3),\n                a21 * m2.at(0) + a22 * m2.at(2),\n                a21 * m2.at(1) + a22 * m2.at(3),\n            ]);\n        }\n    }\n}\nexports[\"default\"] = mat2;\nmat2.identity = new mat2().setIdentity();\n\n\n//# sourceURL=webpack://earthquest/./src/math/mat2.ts?");

/***/ }),

/***/ "./src/math/mat3.ts":
/*!**************************!*\
  !*** ./src/math/mat3.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst mat4_1 = __importDefault(__webpack_require__(/*! ./mat4 */ \"./src/math/mat4.ts\"));\nconst quat_1 = __importDefault(__webpack_require__(/*! ./quat */ \"./src/math/quat.ts\"));\nconst vec2_1 = __importDefault(__webpack_require__(/*! ./vec2 */ \"./src/math/vec2.ts\"));\nconst vec3_1 = __importDefault(__webpack_require__(/*! ./vec3 */ \"./src/math/vec3.ts\"));\nconst constants_1 = __webpack_require__(/*! ./constants */ \"./src/math/constants.ts\");\nclass mat3 {\n    constructor(values) {\n        this.values = new Float32Array(9);\n        if (values !== undefined) {\n            this.init(values);\n        }\n    }\n    at(index) {\n        return this.values[index];\n    }\n    init(values) {\n        for (let i = 0; i < 9; i++) {\n            this.values[i] = values[i];\n        }\n        return this;\n    }\n    reset() {\n        for (let i = 0; i < 9; i++) {\n            this.values[i] = 0;\n        }\n    }\n    copy(dest) {\n        if (!dest) {\n            dest = new mat3();\n        }\n        for (let i = 0; i < 9; i++) {\n            dest.values[i] = this.values[i];\n        }\n        return dest;\n    }\n    all() {\n        const data = [];\n        for (let i = 0; i < 9; i++) {\n            data[i] = this.values[i];\n        }\n        return data;\n    }\n    row(index) {\n        return [\n            this.values[index * 3 + 0],\n            this.values[index * 3 + 1],\n            this.values[index * 3 + 2],\n        ];\n    }\n    col(index) {\n        return [\n            this.values[index],\n            this.values[index + 3],\n            this.values[index + 6],\n        ];\n    }\n    equals(matrix, threshold = constants_1.epsilon) {\n        for (let i = 0; i < 9; i++) {\n            if (Math.abs(this.values[i] - matrix.at(i)) > threshold) {\n                return false;\n            }\n        }\n        return true;\n    }\n    determinant() {\n        const a00 = this.values[0];\n        const a01 = this.values[1];\n        const a02 = this.values[2];\n        const a10 = this.values[3];\n        const a11 = this.values[4];\n        const a12 = this.values[5];\n        const a20 = this.values[6];\n        const a21 = this.values[7];\n        const a22 = this.values[8];\n        const det01 = a22 * a11 - a12 * a21;\n        const det11 = -a22 * a10 + a12 * a20;\n        const det21 = a21 * a10 - a11 * a20;\n        return a00 * det01 + a01 * det11 + a02 * det21;\n    }\n    setIdentity() {\n        this.values[0] = 1;\n        this.values[1] = 0;\n        this.values[2] = 0;\n        this.values[3] = 0;\n        this.values[4] = 1;\n        this.values[5] = 0;\n        this.values[6] = 0;\n        this.values[7] = 0;\n        this.values[8] = 1;\n        return this;\n    }\n    transpose() {\n        const temp01 = this.values[1];\n        const temp02 = this.values[2];\n        const temp12 = this.values[5];\n        this.values[1] = this.values[3];\n        this.values[2] = this.values[6];\n        this.values[3] = temp01;\n        this.values[5] = this.values[7];\n        this.values[6] = temp02;\n        this.values[7] = temp12;\n        return this;\n    }\n    inverse() {\n        const a00 = this.values[0];\n        const a01 = this.values[1];\n        const a02 = this.values[2];\n        const a10 = this.values[3];\n        const a11 = this.values[4];\n        const a12 = this.values[5];\n        const a20 = this.values[6];\n        const a21 = this.values[7];\n        const a22 = this.values[8];\n        const det01 = a22 * a11 - a12 * a21;\n        const det11 = -a22 * a10 + a12 * a20;\n        const det21 = a21 * a10 - a11 * a20;\n        let det = a00 * det01 + a01 * det11 + a02 * det21;\n        if (!det) {\n            return null;\n        }\n        det = 1.0 / det;\n        this.values[0] = det01 * det;\n        this.values[1] = (-a22 * a01 + a02 * a21) * det;\n        this.values[2] = (a12 * a01 - a02 * a11) * det;\n        this.values[3] = det11 * det;\n        this.values[4] = (a22 * a00 - a02 * a20) * det;\n        this.values[5] = (-a12 * a00 + a02 * a10) * det;\n        this.values[6] = det21 * det;\n        this.values[7] = (-a21 * a00 + a01 * a20) * det;\n        this.values[8] = (a11 * a00 - a01 * a10) * det;\n        return this;\n    }\n    multiply(matrix) {\n        const a00 = this.values[0];\n        const a01 = this.values[1];\n        const a02 = this.values[2];\n        const a10 = this.values[3];\n        const a11 = this.values[4];\n        const a12 = this.values[5];\n        const a20 = this.values[6];\n        const a21 = this.values[7];\n        const a22 = this.values[8];\n        const b00 = matrix.at(0);\n        const b01 = matrix.at(1);\n        const b02 = matrix.at(2);\n        const b10 = matrix.at(3);\n        const b11 = matrix.at(4);\n        const b12 = matrix.at(5);\n        const b20 = matrix.at(6);\n        const b21 = matrix.at(7);\n        const b22 = matrix.at(8);\n        this.values[0] = b00 * a00 + b01 * a10 + b02 * a20;\n        this.values[1] = b00 * a01 + b01 * a11 + b02 * a21;\n        this.values[2] = b00 * a02 + b01 * a12 + b02 * a22;\n        this.values[3] = b10 * a00 + b11 * a10 + b12 * a20;\n        this.values[4] = b10 * a01 + b11 * a11 + b12 * a21;\n        this.values[5] = b10 * a02 + b11 * a12 + b12 * a22;\n        this.values[6] = b20 * a00 + b21 * a10 + b22 * a20;\n        this.values[7] = b20 * a01 + b21 * a11 + b22 * a21;\n        this.values[8] = b20 * a02 + b21 * a12 + b22 * a22;\n        return this;\n    }\n    multiplyVec2(vector, result) {\n        const x = vector.x;\n        const y = vector.y;\n        if (result) {\n            result.xy = [\n                x * this.values[0] + y * this.values[3] + this.values[6],\n                x * this.values[1] + y * this.values[4] + this.values[7],\n            ];\n            return result;\n        }\n        else {\n            return new vec2_1.default([\n                x * this.values[0] + y * this.values[3] + this.values[6],\n                x * this.values[1] + y * this.values[4] + this.values[7],\n            ]);\n        }\n    }\n    multiplyVec3(vector, result) {\n        const x = vector.x;\n        const y = vector.y;\n        const z = vector.z;\n        if (result) {\n            result.xyz = [\n                x * this.values[0] + y * this.values[3] + z * this.values[6],\n                x * this.values[1] + y * this.values[4] + z * this.values[7],\n                x * this.values[2] + y * this.values[5] + z * this.values[8],\n            ];\n            return result;\n        }\n        else {\n            return new vec3_1.default([\n                x * this.values[0] + y * this.values[3] + z * this.values[6],\n                x * this.values[1] + y * this.values[4] + z * this.values[7],\n                x * this.values[2] + y * this.values[5] + z * this.values[8],\n            ]);\n        }\n    }\n    toMat4(result) {\n        if (result) {\n            result.init([\n                this.values[0],\n                this.values[1],\n                this.values[2],\n                0,\n                this.values[3],\n                this.values[4],\n                this.values[5],\n                0,\n                this.values[6],\n                this.values[7],\n                this.values[8],\n                0,\n                0,\n                0,\n                0,\n                1,\n            ]);\n            return result;\n        }\n        else {\n            return new mat4_1.default([\n                this.values[0],\n                this.values[1],\n                this.values[2],\n                0,\n                this.values[3],\n                this.values[4],\n                this.values[5],\n                0,\n                this.values[6],\n                this.values[7],\n                this.values[8],\n                0,\n                0,\n                0,\n                0,\n                1,\n            ]);\n        }\n    }\n    toQuat() {\n        const m00 = this.values[0];\n        const m01 = this.values[1];\n        const m02 = this.values[2];\n        const m10 = this.values[3];\n        const m11 = this.values[4];\n        const m12 = this.values[5];\n        const m20 = this.values[6];\n        const m21 = this.values[7];\n        const m22 = this.values[8];\n        const fourXSquaredMinus1 = m00 - m11 - m22;\n        const fourYSquaredMinus1 = m11 - m00 - m22;\n        const fourZSquaredMinus1 = m22 - m00 - m11;\n        const fourWSquaredMinus1 = m00 + m11 + m22;\n        let biggestIndex = 0;\n        let fourBiggestSquaredMinus1 = fourWSquaredMinus1;\n        if (fourXSquaredMinus1 > fourBiggestSquaredMinus1) {\n            fourBiggestSquaredMinus1 = fourXSquaredMinus1;\n            biggestIndex = 1;\n        }\n        if (fourYSquaredMinus1 > fourBiggestSquaredMinus1) {\n            fourBiggestSquaredMinus1 = fourYSquaredMinus1;\n            biggestIndex = 2;\n        }\n        if (fourZSquaredMinus1 > fourBiggestSquaredMinus1) {\n            fourBiggestSquaredMinus1 = fourZSquaredMinus1;\n            biggestIndex = 3;\n        }\n        const biggestVal = Math.sqrt(fourBiggestSquaredMinus1 + 1) * 0.5;\n        const mult = 0.25 / biggestVal;\n        const result = new quat_1.default();\n        switch (biggestIndex) {\n            case 0:\n                result.w = biggestVal;\n                result.x = (m12 - m21) * mult;\n                result.y = (m20 - m02) * mult;\n                result.z = (m01 - m10) * mult;\n                break;\n            case 1:\n                result.w = (m12 - m21) * mult;\n                result.x = biggestVal;\n                result.y = (m01 + m10) * mult;\n                result.z = (m20 + m02) * mult;\n                break;\n            case 2:\n                result.w = (m20 - m02) * mult;\n                result.x = (m01 + m10) * mult;\n                result.y = biggestVal;\n                result.z = (m12 + m21) * mult;\n                break;\n            case 3:\n                result.w = (m01 - m10) * mult;\n                result.x = (m20 + m02) * mult;\n                result.y = (m12 + m21) * mult;\n                result.z = biggestVal;\n                break;\n        }\n        return result;\n    }\n    rotate(angle, axis) {\n        let x = axis.x;\n        let y = axis.y;\n        let z = axis.z;\n        let length = Math.sqrt(x * x + y * y + z * z);\n        if (!length) {\n            return null;\n        }\n        if (length !== 1) {\n            length = 1 / length;\n            x *= length;\n            y *= length;\n            z *= length;\n        }\n        const s = Math.sin(angle);\n        const c = Math.cos(angle);\n        const t = 1.0 - c;\n        const a00 = this.values[0];\n        const a01 = this.values[1];\n        const a02 = this.values[2];\n        const a10 = this.values[4];\n        const a11 = this.values[5];\n        const a12 = this.values[6];\n        const a20 = this.values[8];\n        const a21 = this.values[9];\n        const a22 = this.values[10];\n        const b00 = x * x * t + c;\n        const b01 = y * x * t + z * s;\n        const b02 = z * x * t - y * s;\n        const b10 = x * y * t - z * s;\n        const b11 = y * y * t + c;\n        const b12 = z * y * t + x * s;\n        const b20 = x * z * t + y * s;\n        const b21 = y * z * t - x * s;\n        const b22 = z * z * t + c;\n        this.values[0] = a00 * b00 + a10 * b01 + a20 * b02;\n        this.values[1] = a01 * b00 + a11 * b01 + a21 * b02;\n        this.values[2] = a02 * b00 + a12 * b01 + a22 * b02;\n        this.values[3] = a00 * b10 + a10 * b11 + a20 * b12;\n        this.values[4] = a01 * b10 + a11 * b11 + a21 * b12;\n        this.values[5] = a02 * b10 + a12 * b11 + a22 * b12;\n        this.values[6] = a00 * b20 + a10 * b21 + a20 * b22;\n        this.values[7] = a01 * b20 + a11 * b21 + a21 * b22;\n        this.values[8] = a02 * b20 + a12 * b21 + a22 * b22;\n        return this;\n    }\n    static product(m1, m2, result) {\n        const a00 = m1.at(0);\n        const a01 = m1.at(1);\n        const a02 = m1.at(2);\n        const a10 = m1.at(3);\n        const a11 = m1.at(4);\n        const a12 = m1.at(5);\n        const a20 = m1.at(6);\n        const a21 = m1.at(7);\n        const a22 = m1.at(8);\n        const b00 = m2.at(0);\n        const b01 = m2.at(1);\n        const b02 = m2.at(2);\n        const b10 = m2.at(3);\n        const b11 = m2.at(4);\n        const b12 = m2.at(5);\n        const b20 = m2.at(6);\n        const b21 = m2.at(7);\n        const b22 = m2.at(8);\n        if (result) {\n            result.init([\n                b00 * a00 + b01 * a10 + b02 * a20,\n                b00 * a01 + b01 * a11 + b02 * a21,\n                b00 * a02 + b01 * a12 + b02 * a22,\n                b10 * a00 + b11 * a10 + b12 * a20,\n                b10 * a01 + b11 * a11 + b12 * a21,\n                b10 * a02 + b11 * a12 + b12 * a22,\n                b20 * a00 + b21 * a10 + b22 * a20,\n                b20 * a01 + b21 * a11 + b22 * a21,\n                b20 * a02 + b21 * a12 + b22 * a22,\n            ]);\n            return result;\n        }\n        else {\n            return new mat3([\n                b00 * a00 + b01 * a10 + b02 * a20,\n                b00 * a01 + b01 * a11 + b02 * a21,\n                b00 * a02 + b01 * a12 + b02 * a22,\n                b10 * a00 + b11 * a10 + b12 * a20,\n                b10 * a01 + b11 * a11 + b12 * a21,\n                b10 * a02 + b11 * a12 + b12 * a22,\n                b20 * a00 + b21 * a10 + b22 * a20,\n                b20 * a01 + b21 * a11 + b22 * a21,\n                b20 * a02 + b21 * a12 + b22 * a22,\n            ]);\n        }\n    }\n}\nexports[\"default\"] = mat3;\nmat3.identity = new mat3().setIdentity();\n\n\n//# sourceURL=webpack://earthquest/./src/math/mat3.ts?");

/***/ }),

/***/ "./src/math/mat4.ts":
/*!**************************!*\
  !*** ./src/math/mat4.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst mat3_1 = __importDefault(__webpack_require__(/*! ./mat3 */ \"./src/math/mat3.ts\"));\nconst vec3_1 = __importDefault(__webpack_require__(/*! ./vec3 */ \"./src/math/vec3.ts\"));\nconst vec4_1 = __importDefault(__webpack_require__(/*! ./vec4 */ \"./src/math/vec4.ts\"));\nconst constants_1 = __webpack_require__(/*! ./constants */ \"./src/math/constants.ts\");\nclass mat4 {\n    constructor(values) {\n        this.values = new Float32Array(16);\n        if (values !== undefined) {\n            this.init(values);\n        }\n    }\n    getValues() {\n        return this.values;\n    }\n    at(index) {\n        return this.values[index];\n    }\n    init(values) {\n        for (let i = 0; i < 16; i++) {\n            this.values[i] = values[i];\n        }\n        return this;\n    }\n    reset() {\n        for (let i = 0; i < 16; i++) {\n            this.values[i] = 0;\n        }\n    }\n    copy(dest) {\n        if (!dest) {\n            dest = new mat4();\n        }\n        for (let i = 0; i < 16; i++) {\n            dest.values[i] = this.values[i];\n        }\n        return dest;\n    }\n    all() {\n        const data = [];\n        for (let i = 0; i < 16; i++) {\n            data[i] = this.values[i];\n        }\n        return data;\n    }\n    row(index) {\n        return [\n            this.values[index * 4 + 0],\n            this.values[index * 4 + 1],\n            this.values[index * 4 + 2],\n            this.values[index * 4 + 3],\n        ];\n    }\n    col(index) {\n        return [this.values[index], this.values[index + 4], this.values[index + 8], this.values[index + 12]];\n    }\n    equals(matrix, threshold = constants_1.epsilon) {\n        for (let i = 0; i < 16; i++) {\n            if (Math.abs(this.values[i] - matrix.at(i)) > threshold) {\n                return false;\n            }\n        }\n        return true;\n    }\n    determinant() {\n        const a00 = this.values[0];\n        const a01 = this.values[1];\n        const a02 = this.values[2];\n        const a03 = this.values[3];\n        const a10 = this.values[4];\n        const a11 = this.values[5];\n        const a12 = this.values[6];\n        const a13 = this.values[7];\n        const a20 = this.values[8];\n        const a21 = this.values[9];\n        const a22 = this.values[10];\n        const a23 = this.values[11];\n        const a30 = this.values[12];\n        const a31 = this.values[13];\n        const a32 = this.values[14];\n        const a33 = this.values[15];\n        const det00 = a00 * a11 - a01 * a10;\n        const det01 = a00 * a12 - a02 * a10;\n        const det02 = a00 * a13 - a03 * a10;\n        const det03 = a01 * a12 - a02 * a11;\n        const det04 = a01 * a13 - a03 * a11;\n        const det05 = a02 * a13 - a03 * a12;\n        const det06 = a20 * a31 - a21 * a30;\n        const det07 = a20 * a32 - a22 * a30;\n        const det08 = a20 * a33 - a23 * a30;\n        const det09 = a21 * a32 - a22 * a31;\n        const det10 = a21 * a33 - a23 * a31;\n        const det11 = a22 * a33 - a23 * a32;\n        return det00 * det11 - det01 * det10 + det02 * det09 + det03 * det08 - det04 * det07 + det05 * det06;\n    }\n    setIdentity() {\n        this.values[0] = 1;\n        this.values[1] = 0;\n        this.values[2] = 0;\n        this.values[3] = 0;\n        this.values[4] = 0;\n        this.values[5] = 1;\n        this.values[6] = 0;\n        this.values[7] = 0;\n        this.values[8] = 0;\n        this.values[9] = 0;\n        this.values[10] = 1;\n        this.values[11] = 0;\n        this.values[12] = 0;\n        this.values[13] = 0;\n        this.values[14] = 0;\n        this.values[15] = 1;\n        return this;\n    }\n    transpose() {\n        const temp01 = this.values[1];\n        const temp02 = this.values[2];\n        const temp03 = this.values[3];\n        const temp12 = this.values[6];\n        const temp13 = this.values[7];\n        const temp23 = this.values[11];\n        this.values[1] = this.values[4];\n        this.values[2] = this.values[8];\n        this.values[3] = this.values[12];\n        this.values[4] = temp01;\n        this.values[6] = this.values[9];\n        this.values[7] = this.values[13];\n        this.values[8] = temp02;\n        this.values[9] = temp12;\n        this.values[11] = this.values[14];\n        this.values[12] = temp03;\n        this.values[13] = temp13;\n        this.values[14] = temp23;\n        return this;\n    }\n    inverse() {\n        const a00 = this.values[0];\n        const a01 = this.values[1];\n        const a02 = this.values[2];\n        const a03 = this.values[3];\n        const a10 = this.values[4];\n        const a11 = this.values[5];\n        const a12 = this.values[6];\n        const a13 = this.values[7];\n        const a20 = this.values[8];\n        const a21 = this.values[9];\n        const a22 = this.values[10];\n        const a23 = this.values[11];\n        const a30 = this.values[12];\n        const a31 = this.values[13];\n        const a32 = this.values[14];\n        const a33 = this.values[15];\n        const det00 = a00 * a11 - a01 * a10;\n        const det01 = a00 * a12 - a02 * a10;\n        const det02 = a00 * a13 - a03 * a10;\n        const det03 = a01 * a12 - a02 * a11;\n        const det04 = a01 * a13 - a03 * a11;\n        const det05 = a02 * a13 - a03 * a12;\n        const det06 = a20 * a31 - a21 * a30;\n        const det07 = a20 * a32 - a22 * a30;\n        const det08 = a20 * a33 - a23 * a30;\n        const det09 = a21 * a32 - a22 * a31;\n        const det10 = a21 * a33 - a23 * a31;\n        const det11 = a22 * a33 - a23 * a32;\n        let det = det00 * det11 - det01 * det10 + det02 * det09 + det03 * det08 - det04 * det07 + det05 * det06;\n        if (!det) {\n            return null;\n        }\n        det = 1.0 / det;\n        this.values[0] = (a11 * det11 - a12 * det10 + a13 * det09) * det;\n        this.values[1] = (-a01 * det11 + a02 * det10 - a03 * det09) * det;\n        this.values[2] = (a31 * det05 - a32 * det04 + a33 * det03) * det;\n        this.values[3] = (-a21 * det05 + a22 * det04 - a23 * det03) * det;\n        this.values[4] = (-a10 * det11 + a12 * det08 - a13 * det07) * det;\n        this.values[5] = (a00 * det11 - a02 * det08 + a03 * det07) * det;\n        this.values[6] = (-a30 * det05 + a32 * det02 - a33 * det01) * det;\n        this.values[7] = (a20 * det05 - a22 * det02 + a23 * det01) * det;\n        this.values[8] = (a10 * det10 - a11 * det08 + a13 * det06) * det;\n        this.values[9] = (-a00 * det10 + a01 * det08 - a03 * det06) * det;\n        this.values[10] = (a30 * det04 - a31 * det02 + a33 * det00) * det;\n        this.values[11] = (-a20 * det04 + a21 * det02 - a23 * det00) * det;\n        this.values[12] = (-a10 * det09 + a11 * det07 - a12 * det06) * det;\n        this.values[13] = (a00 * det09 - a01 * det07 + a02 * det06) * det;\n        this.values[14] = (-a30 * det03 + a31 * det01 - a32 * det00) * det;\n        this.values[15] = (a20 * det03 - a21 * det01 + a22 * det00) * det;\n        return this;\n    }\n    multiply(matrix) {\n        const a00 = this.values[0];\n        const a01 = this.values[1];\n        const a02 = this.values[2];\n        const a03 = this.values[3];\n        const a10 = this.values[4];\n        const a11 = this.values[5];\n        const a12 = this.values[6];\n        const a13 = this.values[7];\n        const a20 = this.values[8];\n        const a21 = this.values[9];\n        const a22 = this.values[10];\n        const a23 = this.values[11];\n        const a30 = this.values[12];\n        const a31 = this.values[13];\n        const a32 = this.values[14];\n        const a33 = this.values[15];\n        let b0 = matrix.at(0);\n        let b1 = matrix.at(1);\n        let b2 = matrix.at(2);\n        let b3 = matrix.at(3);\n        this.values[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        this.values[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        this.values[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        this.values[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n        b0 = matrix.at(4);\n        b1 = matrix.at(5);\n        b2 = matrix.at(6);\n        b3 = matrix.at(7);\n        this.values[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        this.values[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        this.values[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        this.values[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n        b0 = matrix.at(8);\n        b1 = matrix.at(9);\n        b2 = matrix.at(10);\n        b3 = matrix.at(11);\n        this.values[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        this.values[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        this.values[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        this.values[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n        b0 = matrix.at(12);\n        b1 = matrix.at(13);\n        b2 = matrix.at(14);\n        b3 = matrix.at(15);\n        this.values[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        this.values[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        this.values[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        this.values[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n        return this;\n    }\n    multiplyVec3(vector) {\n        const x = vector.x;\n        const y = vector.y;\n        const z = vector.z;\n        return new vec3_1.default([\n            this.values[0] * x + this.values[4] * y + this.values[8] * z + this.values[12],\n            this.values[1] * x + this.values[5] * y + this.values[9] * z + this.values[13],\n            this.values[2] * x + this.values[6] * y + this.values[10] * z + this.values[14],\n        ]);\n    }\n    multiplyVec4(vector, dest) {\n        if (!dest) {\n            dest = new vec4_1.default();\n        }\n        const x = vector.x;\n        const y = vector.y;\n        const z = vector.z;\n        const w = vector.w;\n        dest.x = this.values[0] * x + this.values[4] * y + this.values[8] * z + this.values[12] * w;\n        dest.y = this.values[1] * x + this.values[5] * y + this.values[9] * z + this.values[13] * w;\n        dest.z = this.values[2] * x + this.values[6] * y + this.values[10] * z + this.values[14] * w;\n        dest.w = this.values[3] * x + this.values[7] * y + this.values[11] * z + this.values[15] * w;\n        return dest;\n    }\n    toMat3() {\n        return new mat3_1.default([\n            this.values[0],\n            this.values[1],\n            this.values[2],\n            this.values[4],\n            this.values[5],\n            this.values[6],\n            this.values[8],\n            this.values[9],\n            this.values[10],\n        ]);\n    }\n    toInverseMat3() {\n        const a00 = this.values[0];\n        const a01 = this.values[1];\n        const a02 = this.values[2];\n        const a10 = this.values[4];\n        const a11 = this.values[5];\n        const a12 = this.values[6];\n        const a20 = this.values[8];\n        const a21 = this.values[9];\n        const a22 = this.values[10];\n        const det01 = a22 * a11 - a12 * a21;\n        const det11 = -a22 * a10 + a12 * a20;\n        const det21 = a21 * a10 - a11 * a20;\n        let det = a00 * det01 + a01 * det11 + a02 * det21;\n        if (!det) {\n            return null;\n        }\n        det = 1.0 / det;\n        return new mat3_1.default([\n            det01 * det,\n            (-a22 * a01 + a02 * a21) * det,\n            (a12 * a01 - a02 * a11) * det,\n            det11 * det,\n            (a22 * a00 - a02 * a20) * det,\n            (-a12 * a00 + a02 * a10) * det,\n            det21 * det,\n            (-a21 * a00 + a01 * a20) * det,\n            (a11 * a00 - a01 * a10) * det,\n        ]);\n    }\n    translate(vector) {\n        const x = vector.x;\n        const y = vector.y;\n        const z = vector.z;\n        this.values[12] += this.values[0] * x + this.values[4] * y + this.values[8] * z;\n        this.values[13] += this.values[1] * x + this.values[5] * y + this.values[9] * z;\n        this.values[14] += this.values[2] * x + this.values[6] * y + this.values[10] * z;\n        this.values[15] += this.values[3] * x + this.values[7] * y + this.values[11] * z;\n        return this;\n    }\n    scale(vector) {\n        const x = vector.x;\n        const y = vector.y;\n        const z = vector.z;\n        this.values[0] *= x;\n        this.values[1] *= x;\n        this.values[2] *= x;\n        this.values[3] *= x;\n        this.values[4] *= y;\n        this.values[5] *= y;\n        this.values[6] *= y;\n        this.values[7] *= y;\n        this.values[8] *= z;\n        this.values[9] *= z;\n        this.values[10] *= z;\n        this.values[11] *= z;\n        return this;\n    }\n    rotate(angle, axis) {\n        let x = axis.x;\n        let y = axis.y;\n        let z = axis.z;\n        let length = Math.sqrt(x * x + y * y + z * z);\n        if (!length) {\n            return null;\n        }\n        if (length !== 1) {\n            length = 1 / length;\n            x *= length;\n            y *= length;\n            z *= length;\n        }\n        const s = Math.sin(angle);\n        const c = Math.cos(angle);\n        const t = 1.0 - c;\n        const a00 = this.values[0];\n        const a01 = this.values[1];\n        const a02 = this.values[2];\n        const a03 = this.values[3];\n        const a10 = this.values[4];\n        const a11 = this.values[5];\n        const a12 = this.values[6];\n        const a13 = this.values[7];\n        const a20 = this.values[8];\n        const a21 = this.values[9];\n        const a22 = this.values[10];\n        const a23 = this.values[11];\n        const b00 = x * x * t + c;\n        const b01 = y * x * t + z * s;\n        const b02 = z * x * t - y * s;\n        const b10 = x * y * t - z * s;\n        const b11 = y * y * t + c;\n        const b12 = z * y * t + x * s;\n        const b20 = x * z * t + y * s;\n        const b21 = y * z * t - x * s;\n        const b22 = z * z * t + c;\n        this.values[0] = a00 * b00 + a10 * b01 + a20 * b02;\n        this.values[1] = a01 * b00 + a11 * b01 + a21 * b02;\n        this.values[2] = a02 * b00 + a12 * b01 + a22 * b02;\n        this.values[3] = a03 * b00 + a13 * b01 + a23 * b02;\n        this.values[4] = a00 * b10 + a10 * b11 + a20 * b12;\n        this.values[5] = a01 * b10 + a11 * b11 + a21 * b12;\n        this.values[6] = a02 * b10 + a12 * b11 + a22 * b12;\n        this.values[7] = a03 * b10 + a13 * b11 + a23 * b12;\n        this.values[8] = a00 * b20 + a10 * b21 + a20 * b22;\n        this.values[9] = a01 * b20 + a11 * b21 + a21 * b22;\n        this.values[10] = a02 * b20 + a12 * b21 + a22 * b22;\n        this.values[11] = a03 * b20 + a13 * b21 + a23 * b22;\n        return this;\n    }\n    static frustum(left, right, bottom, top, near, far) {\n        const rl = right - left;\n        const tb = top - bottom;\n        const fn = far - near;\n        return new mat4([\n            (near * 2) / rl,\n            0,\n            0,\n            0,\n            0,\n            (near * 2) / tb,\n            0,\n            0,\n            (right + left) / rl,\n            (top + bottom) / tb,\n            -(far + near) / fn,\n            -1,\n            0,\n            0,\n            -(far * near * 2) / fn,\n            0,\n        ]);\n    }\n    static perspective(fov, aspect, near, far) {\n        const top = near * Math.tan((fov * Math.PI) / 360.0);\n        const right = top * aspect;\n        return mat4.frustum(-right, right, -top, top, near, far);\n    }\n    static orthographic(left, right, bottom, top, near, far) {\n        const rl = right - left;\n        const tb = top - bottom;\n        const fn = far - near;\n        return new mat4([\n            2 / rl,\n            0,\n            0,\n            0,\n            0,\n            2 / tb,\n            0,\n            0,\n            0,\n            0,\n            -2 / fn,\n            0,\n            -(left + right) / rl,\n            -(top + bottom) / tb,\n            -(far + near) / fn,\n            1,\n        ]);\n    }\n    static lookAt(position, target, up = vec3_1.default.up) {\n        if (position.equals(target)) {\n            return this.identity;\n        }\n        const z = vec3_1.default.difference(position, target).normalize();\n        const x = vec3_1.default.cross(up, z).normalize();\n        const y = vec3_1.default.cross(z, x).normalize();\n        return new mat4([\n            x.x,\n            y.x,\n            z.x,\n            0,\n            x.y,\n            y.y,\n            z.y,\n            0,\n            x.z,\n            y.z,\n            z.z,\n            0,\n            -vec3_1.default.dot(x, position),\n            -vec3_1.default.dot(y, position),\n            -vec3_1.default.dot(z, position),\n            1,\n        ]);\n    }\n    static product(m1, m2, result) {\n        const a00 = m1.at(0);\n        const a01 = m1.at(1);\n        const a02 = m1.at(2);\n        const a03 = m1.at(3);\n        const a10 = m1.at(4);\n        const a11 = m1.at(5);\n        const a12 = m1.at(6);\n        const a13 = m1.at(7);\n        const a20 = m1.at(8);\n        const a21 = m1.at(9);\n        const a22 = m1.at(10);\n        const a23 = m1.at(11);\n        const a30 = m1.at(12);\n        const a31 = m1.at(13);\n        const a32 = m1.at(14);\n        const a33 = m1.at(15);\n        const b00 = m2.at(0);\n        const b01 = m2.at(1);\n        const b02 = m2.at(2);\n        const b03 = m2.at(3);\n        const b10 = m2.at(4);\n        const b11 = m2.at(5);\n        const b12 = m2.at(6);\n        const b13 = m2.at(7);\n        const b20 = m2.at(8);\n        const b21 = m2.at(9);\n        const b22 = m2.at(10);\n        const b23 = m2.at(11);\n        const b30 = m2.at(12);\n        const b31 = m2.at(13);\n        const b32 = m2.at(14);\n        const b33 = m2.at(15);\n        if (result) {\n            result.init([\n                b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30,\n                b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31,\n                b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32,\n                b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33,\n                b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30,\n                b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31,\n                b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32,\n                b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33,\n                b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30,\n                b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31,\n                b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32,\n                b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33,\n                b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30,\n                b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31,\n                b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32,\n                b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33,\n            ]);\n            return result;\n        }\n        else {\n            return new mat4([\n                b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30,\n                b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31,\n                b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32,\n                b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33,\n                b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30,\n                b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31,\n                b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32,\n                b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33,\n                b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30,\n                b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31,\n                b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32,\n                b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33,\n                b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30,\n                b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31,\n                b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32,\n                b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33,\n            ]);\n        }\n    }\n}\nexports[\"default\"] = mat4;\nmat4.identity = new mat4().setIdentity();\n\n\n//# sourceURL=webpack://earthquest/./src/math/mat4.ts?");

/***/ }),

/***/ "./src/math/quat.ts":
/*!**************************!*\
  !*** ./src/math/quat.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst mat3_1 = __importDefault(__webpack_require__(/*! ./mat3 */ \"./src/math/mat3.ts\"));\nconst mat4_1 = __importDefault(__webpack_require__(/*! ./mat4 */ \"./src/math/mat4.ts\"));\nconst vec3_1 = __importDefault(__webpack_require__(/*! ./vec3 */ \"./src/math/vec3.ts\"));\nconst constants_1 = __webpack_require__(/*! ./constants */ \"./src/math/constants.ts\");\nclass quat {\n    get x() {\n        return this.values[0];\n    }\n    get y() {\n        return this.values[1];\n    }\n    get z() {\n        return this.values[2];\n    }\n    get w() {\n        return this.values[3];\n    }\n    get xy() {\n        return [\n            this.values[0],\n            this.values[1],\n        ];\n    }\n    get xyz() {\n        return [\n            this.values[0],\n            this.values[1],\n            this.values[2],\n        ];\n    }\n    get xyzw() {\n        return [\n            this.values[0],\n            this.values[1],\n            this.values[2],\n            this.values[3],\n        ];\n    }\n    set x(value) {\n        this.values[0] = value;\n    }\n    set y(value) {\n        this.values[1] = value;\n    }\n    set z(value) {\n        this.values[2] = value;\n    }\n    set w(value) {\n        this.values[3] = value;\n    }\n    set xy(values) {\n        this.values[0] = values[0];\n        this.values[1] = values[1];\n    }\n    set xyz(values) {\n        this.values[0] = values[0];\n        this.values[1] = values[1];\n        this.values[2] = values[2];\n    }\n    set xyzw(values) {\n        this.values[0] = values[0];\n        this.values[1] = values[1];\n        this.values[2] = values[2];\n        this.values[3] = values[3];\n    }\n    constructor(values) {\n        this.values = new Float32Array(4);\n        if (values !== undefined) {\n            this.xyzw = values;\n        }\n    }\n    at(index) {\n        return this.values[index];\n    }\n    reset() {\n        for (let i = 0; i < 4; i++) {\n            this.values[i] = 0;\n        }\n    }\n    copy(dest) {\n        if (!dest) {\n            dest = new quat();\n        }\n        for (let i = 0; i < 4; i++) {\n            dest.values[i] = this.values[i];\n        }\n        return dest;\n    }\n    roll() {\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        const w = this.w;\n        return Math.atan2(2.0 * (x * y + w * z), w * w + x * x - y * y - z * z);\n    }\n    pitch() {\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        const w = this.w;\n        return Math.atan2(2.0 * (y * z + w * x), w * w - x * x - y * y + z * z);\n    }\n    yaw() {\n        return Math.asin(2.0 * (this.x * this.z - this.w * this.y));\n    }\n    equals(vector, threshold = constants_1.epsilon) {\n        for (let i = 0; i < 4; i++) {\n            if (Math.abs(this.values[i] - vector.at(i)) > threshold) {\n                return false;\n            }\n        }\n        return true;\n    }\n    setIdentity() {\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n        this.w = 1;\n        return this;\n    }\n    calculateW() {\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        this.w = -(Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z)));\n        return this;\n    }\n    inverse() {\n        const dot = quat.dot(this, this);\n        if (!dot) {\n            this.xyzw = [0, 0, 0, 0];\n            return this;\n        }\n        const invDot = dot ? 1.0 / dot : 0;\n        this.x *= -invDot;\n        this.y *= -invDot;\n        this.z *= -invDot;\n        this.w *= invDot;\n        return this;\n    }\n    conjugate() {\n        this.values[0] *= -1;\n        this.values[1] *= -1;\n        this.values[2] *= -1;\n        return this;\n    }\n    length() {\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        const w = this.w;\n        return Math.sqrt(x * x + y * y + z * z + w * w);\n    }\n    normalize(dest) {\n        if (!dest) {\n            dest = this;\n        }\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        const w = this.w;\n        let length = Math.sqrt(x * x + y * y + z * z + w * w);\n        if (!length) {\n            dest.x = 0;\n            dest.y = 0;\n            dest.z = 0;\n            dest.w = 0;\n            return dest;\n        }\n        length = 1 / length;\n        dest.x = x * length;\n        dest.y = y * length;\n        dest.z = z * length;\n        dest.w = w * length;\n        return dest;\n    }\n    add(other) {\n        for (let i = 0; i < 4; i++) {\n            this.values[i] += other.at(i);\n        }\n        return this;\n    }\n    multiply(other) {\n        const q1x = this.values[0];\n        const q1y = this.values[1];\n        const q1z = this.values[2];\n        const q1w = this.values[3];\n        const q2x = other.x;\n        const q2y = other.y;\n        const q2z = other.z;\n        const q2w = other.w;\n        this.x = q1x * q2w + q1w * q2x + q1y * q2z - q1z * q2y;\n        this.y = q1y * q2w + q1w * q2y + q1z * q2x - q1x * q2z;\n        this.z = q1z * q2w + q1w * q2z + q1x * q2y - q1y * q2x;\n        this.w = q1w * q2w - q1x * q2x - q1y * q2y - q1z * q2z;\n        return this;\n    }\n    multiplyVec3(vector, dest) {\n        if (!dest) {\n            dest = new vec3_1.default();\n        }\n        const x = vector.x;\n        const y = vector.y;\n        const z = vector.z;\n        const qx = this.x;\n        const qy = this.y;\n        const qz = this.z;\n        const qw = this.w;\n        const ix = qw * x + qy * z - qz * y;\n        const iy = qw * y + qz * x - qx * z;\n        const iz = qw * z + qx * y - qy * x;\n        const iw = -qx * x - qy * y - qz * z;\n        dest.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n        dest.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n        dest.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n        return dest;\n    }\n    toMat3(dest) {\n        if (!dest) {\n            dest = new mat3_1.default();\n        }\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        const w = this.w;\n        const x2 = x + x;\n        const y2 = y + y;\n        const z2 = z + z;\n        const xx = x * x2;\n        const xy = x * y2;\n        const xz = x * z2;\n        const yy = y * y2;\n        const yz = y * z2;\n        const zz = z * z2;\n        const wx = w * x2;\n        const wy = w * y2;\n        const wz = w * z2;\n        dest.init([\n            1 - (yy + zz),\n            xy + wz,\n            xz - wy,\n            xy - wz,\n            1 - (xx + zz),\n            yz + wx,\n            xz + wy,\n            yz - wx,\n            1 - (xx + yy),\n        ]);\n        return dest;\n    }\n    toMat4(dest) {\n        if (!dest) {\n            dest = new mat4_1.default();\n        }\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        const w = this.w;\n        const x2 = x + x;\n        const y2 = y + y;\n        const z2 = z + z;\n        const xx = x * x2;\n        const xy = x * y2;\n        const xz = x * z2;\n        const yy = y * y2;\n        const yz = y * z2;\n        const zz = z * z2;\n        const wx = w * x2;\n        const wy = w * y2;\n        const wz = w * z2;\n        dest.init([\n            1 - (yy + zz),\n            xy + wz,\n            xz - wy,\n            0,\n            xy - wz,\n            1 - (xx + zz),\n            yz + wx,\n            0,\n            xz + wy,\n            yz - wx,\n            1 - (xx + yy),\n            0,\n            0,\n            0,\n            0,\n            1,\n        ]);\n        return dest;\n    }\n    static dot(q1, q2) {\n        return q1.x * q2.x + q1.y * q2.y + q1.z * q2.z + q1.w * q2.w;\n    }\n    static sum(q1, q2, dest) {\n        if (!dest) {\n            dest = new quat();\n        }\n        dest.x = q1.x + q2.x;\n        dest.y = q1.y + q2.y;\n        dest.z = q1.z + q2.z;\n        dest.w = q1.w + q2.w;\n        return dest;\n    }\n    static product(q1, q2, dest) {\n        if (!dest) {\n            dest = new quat();\n        }\n        const q1x = q1.x;\n        const q1y = q1.y;\n        const q1z = q1.z;\n        const q1w = q1.w;\n        const q2x = q2.x;\n        const q2y = q2.y;\n        const q2z = q2.z;\n        const q2w = q2.w;\n        dest.x = q1x * q2w + q1w * q2x + q1y * q2z - q1z * q2y;\n        dest.y = q1y * q2w + q1w * q2y + q1z * q2x - q1x * q2z;\n        dest.z = q1z * q2w + q1w * q2z + q1x * q2y - q1y * q2x;\n        dest.w = q1w * q2w - q1x * q2x - q1y * q2y - q1z * q2z;\n        return dest;\n    }\n    static cross(q1, q2, dest) {\n        if (!dest) {\n            dest = new quat();\n        }\n        const q1x = q1.x;\n        const q1y = q1.y;\n        const q1z = q1.z;\n        const q1w = q1.w;\n        const q2x = q2.x;\n        const q2y = q2.y;\n        const q2z = q2.z;\n        const q2w = q2.w;\n        dest.x = q1w * q2z + q1z * q2w + q1x * q2y - q1y * q2x;\n        dest.y = q1w * q2w - q1x * q2x - q1y * q2y - q1z * q2z;\n        dest.z = q1w * q2x + q1x * q2w + q1y * q2z - q1z * q2y;\n        dest.w = q1w * q2y + q1y * q2w + q1z * q2x - q1x * q2z;\n        return dest;\n    }\n    static shortMix(q1, q2, time, dest) {\n        if (!dest) {\n            dest = new quat();\n        }\n        if (time <= 0.0) {\n            dest.xyzw = q1.xyzw;\n            return dest;\n        }\n        else if (time >= 1.0) {\n            dest.xyzw = q2.xyzw;\n            return dest;\n        }\n        let cos = quat.dot(q1, q2);\n        const q2a = q2.copy();\n        if (cos < 0.0) {\n            q2a.inverse();\n            cos = -cos;\n        }\n        let k0;\n        let k1;\n        if (cos > 0.9999) {\n            k0 = 1 - time;\n            k1 = 0 + time;\n        }\n        else {\n            const sin = Math.sqrt(1 - cos * cos);\n            const angle = Math.atan2(sin, cos);\n            const oneOverSin = 1 / sin;\n            k0 = Math.sin((1 - time) * angle) * oneOverSin;\n            k1 = Math.sin((0 + time) * angle) * oneOverSin;\n        }\n        dest.x = k0 * q1.x + k1 * q2a.x;\n        dest.y = k0 * q1.y + k1 * q2a.y;\n        dest.z = k0 * q1.z + k1 * q2a.z;\n        dest.w = k0 * q1.w + k1 * q2a.w;\n        return dest;\n    }\n    static mix(q1, q2, time, dest) {\n        if (!dest) {\n            dest = new quat();\n        }\n        const cosHalfTheta = q1.x * q2.x + q1.y * q2.y + q1.z * q2.z + q1.w * q2.w;\n        if (Math.abs(cosHalfTheta) >= 1.0) {\n            dest.xyzw = q1.xyzw;\n            return dest;\n        }\n        const halfTheta = Math.acos(cosHalfTheta);\n        const sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);\n        if (Math.abs(sinHalfTheta) < 0.001) {\n            dest.x = q1.x * 0.5 + q2.x * 0.5;\n            dest.y = q1.y * 0.5 + q2.y * 0.5;\n            dest.z = q1.z * 0.5 + q2.z * 0.5;\n            dest.w = q1.w * 0.5 + q2.w * 0.5;\n            return dest;\n        }\n        const ratioA = Math.sin((1 - time) * halfTheta) / sinHalfTheta;\n        const ratioB = Math.sin(time * halfTheta) / sinHalfTheta;\n        dest.x = q1.x * ratioA + q2.x * ratioB;\n        dest.y = q1.y * ratioA + q2.y * ratioB;\n        dest.z = q1.z * ratioA + q2.z * ratioB;\n        dest.w = q1.w * ratioA + q2.w * ratioB;\n        return dest;\n    }\n    static fromAxisAngle(axis, angle, dest) {\n        if (!dest) {\n            dest = new quat();\n        }\n        angle *= 0.5;\n        const sin = Math.sin(angle);\n        dest.x = axis.x * sin;\n        dest.y = axis.y * sin;\n        dest.z = axis.z * sin;\n        dest.w = Math.cos(angle);\n        return dest;\n    }\n}\nexports[\"default\"] = quat;\nquat.identity = new quat().setIdentity();\n\n\n//# sourceURL=webpack://earthquest/./src/math/quat.ts?");

/***/ }),

/***/ "./src/math/vec2.ts":
/*!**************************!*\
  !*** ./src/math/vec2.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst vec3_1 = __importDefault(__webpack_require__(/*! ./vec3 */ \"./src/math/vec3.ts\"));\nconst constants_1 = __webpack_require__(/*! ./constants */ \"./src/math/constants.ts\");\nclass vec2 {\n    get x() {\n        return this.values[0];\n    }\n    get y() {\n        return this.values[1];\n    }\n    get xy() {\n        return [this.values[0], this.values[1]];\n    }\n    set x(value) {\n        this.values[0] = value;\n    }\n    set y(value) {\n        this.values[1] = value;\n    }\n    set xy(values) {\n        this.values[0] = values[0];\n        this.values[1] = values[1];\n    }\n    constructor(values, y) {\n        this.values = new Float32Array(2);\n        if (values !== undefined) {\n            if (typeof values === 'number') {\n                this.values[0] = values;\n            }\n            else if (Array.isArray(values)) {\n                this.xy = values;\n            }\n            if (y !== undefined) {\n                this.values[1] = y;\n            }\n        }\n    }\n    at(index) {\n        return this.values[index];\n    }\n    reset() {\n        this.x = 0;\n        this.y = 0;\n    }\n    copy(dest) {\n        if (!dest) {\n            dest = new vec2();\n        }\n        dest.x = this.x;\n        dest.y = this.y;\n        return dest;\n    }\n    negate(dest) {\n        if (!dest) {\n            dest = this;\n        }\n        dest.x = -this.x;\n        dest.y = -this.y;\n        return dest;\n    }\n    equals(vector, threshold = constants_1.epsilon) {\n        if (Math.abs(this.x - vector.x) > threshold) {\n            return false;\n        }\n        if (Math.abs(this.y - vector.y) > threshold) {\n            return false;\n        }\n        return true;\n    }\n    length() {\n        return Math.sqrt(this.squaredLength());\n    }\n    squaredLength() {\n        const x = this.x;\n        const y = this.y;\n        return x * x + y * y;\n    }\n    add(vector) {\n        this.x += vector.x;\n        this.y += vector.y;\n        return this;\n    }\n    subtract(vector) {\n        this.x -= vector.x;\n        this.y -= vector.y;\n        return this;\n    }\n    multiply(vector) {\n        this.x *= vector.x;\n        this.y *= vector.y;\n        return this;\n    }\n    divide(vector) {\n        this.x /= vector.x;\n        this.y /= vector.y;\n        return this;\n    }\n    scale(value, dest) {\n        if (!dest) {\n            dest = this;\n        }\n        dest.x *= value;\n        dest.y *= value;\n        return dest;\n    }\n    normalize(dest) {\n        if (!dest) {\n            dest = this;\n        }\n        let length = this.length();\n        if (length === 1) {\n            return this;\n        }\n        if (length === 0) {\n            dest.x = 0;\n            dest.y = 0;\n            return dest;\n        }\n        length = 1.0 / length;\n        dest.x *= length;\n        dest.y *= length;\n        return dest;\n    }\n    multiplyMat2(matrix, dest) {\n        if (!dest) {\n            dest = this;\n        }\n        return matrix.multiplyVec2(this, dest);\n    }\n    multiplyMat3(matrix, dest) {\n        if (!dest) {\n            dest = this;\n        }\n        return matrix.multiplyVec2(this, dest);\n    }\n    static cross(vector, vector2, dest) {\n        if (!dest) {\n            dest = new vec3_1.default();\n        }\n        const x = vector.x;\n        const y = vector.y;\n        const x2 = vector2.x;\n        const y2 = vector2.y;\n        const z = x * y2 - y * x2;\n        dest.x = 0;\n        dest.y = 0;\n        dest.z = z;\n        return dest;\n    }\n    static dot(vector, vector2) {\n        return vector.x * vector2.x + vector.y * vector2.y;\n    }\n    static distance(vector, vector2) {\n        return Math.sqrt(this.squaredDistance(vector, vector2));\n    }\n    static squaredDistance(vector, vector2) {\n        const x = vector2.x - vector.x;\n        const y = vector2.y - vector.y;\n        return x * x + y * y;\n    }\n    static direction(vector, vector2, dest) {\n        if (!dest) {\n            dest = new vec2();\n        }\n        const x = vector.x - vector2.x;\n        const y = vector.y - vector2.y;\n        let length = Math.sqrt(x * x + y * y);\n        if (length === 0) {\n            dest.x = 0;\n            dest.y = 0;\n            return dest;\n        }\n        length = 1 / length;\n        dest.x = x * length;\n        dest.y = y * length;\n        return dest;\n    }\n    static mix(vector, vector2, time, dest) {\n        if (!dest) {\n            dest = new vec2();\n        }\n        const x = vector.x;\n        const y = vector.y;\n        const x2 = vector2.x;\n        const y2 = vector2.y;\n        dest.x = x + time * (x2 - x);\n        dest.y = y + time * (y2 - y);\n        return dest;\n    }\n    static sum(vector, vector2, dest) {\n        if (!dest) {\n            dest = new vec2();\n        }\n        dest.x = vector.x + vector2.x;\n        dest.y = vector.y + vector2.y;\n        return dest;\n    }\n    static difference(vector, vector2, dest) {\n        if (!dest) {\n            dest = new vec2();\n        }\n        dest.x = vector.x - vector2.x;\n        dest.y = vector.y - vector2.y;\n        return dest;\n    }\n    static product(vector, vector2, dest) {\n        if (!dest) {\n            dest = new vec2();\n        }\n        dest.x = vector.x * vector2.x;\n        dest.y = vector.y * vector2.y;\n        return dest;\n    }\n    static quotient(vector, vector2, dest) {\n        if (!dest) {\n            dest = new vec2();\n        }\n        dest.x = vector.x / vector2.x;\n        dest.y = vector.y / vector2.y;\n        return dest;\n    }\n    toString() {\n        return this.x.toFixed(5) + ', ' + this.y.toFixed(5);\n    }\n}\nexports[\"default\"] = vec2;\nvec2.zero = new vec2([0, 0]);\nvec2.one = new vec2([1, 1]);\n\n\n//# sourceURL=webpack://earthquest/./src/math/vec2.ts?");

/***/ }),

/***/ "./src/math/vec3.ts":
/*!**************************!*\
  !*** ./src/math/vec3.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst quat_1 = __importDefault(__webpack_require__(/*! ./quat */ \"./src/math/quat.ts\"));\nconst constants_1 = __webpack_require__(/*! ./constants */ \"./src/math/constants.ts\");\nclass vec3 {\n    get x() {\n        return this.values[0];\n    }\n    get y() {\n        return this.values[1];\n    }\n    get z() {\n        return this.values[2];\n    }\n    get xy() {\n        return [this.values[0], this.values[1]];\n    }\n    get xyz() {\n        return [this.values[0], this.values[1], this.values[2]];\n    }\n    set x(value) {\n        this.values[0] = value;\n    }\n    set y(value) {\n        this.values[1] = value;\n    }\n    set z(value) {\n        this.values[2] = value;\n    }\n    set xy(values) {\n        this.values[0] = values[0];\n        this.values[1] = values[1];\n    }\n    set xyz(values) {\n        this.values[0] = values[0];\n        this.values[1] = values[1];\n        this.values[2] = values[2];\n    }\n    constructor(values, y, z) {\n        this.values = new Float32Array(3);\n        if (values !== undefined) {\n            if (typeof values === 'number') {\n                this.values[0] = values;\n            }\n            else if (Array.isArray(values)) {\n                this.xyz = values;\n            }\n            if (y !== undefined) {\n                this.values[1] = y;\n            }\n            if (y !== undefined) {\n                this.values[2] = z;\n            }\n        }\n    }\n    at(index) {\n        return this.values[index];\n    }\n    reset() {\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n    }\n    copy(dest) {\n        if (!dest) {\n            dest = new vec3();\n        }\n        dest.x = this.x;\n        dest.y = this.y;\n        dest.z = this.z;\n        return dest;\n    }\n    negate(dest) {\n        if (!dest) {\n            dest = this;\n        }\n        dest.x = -this.x;\n        dest.y = -this.y;\n        dest.z = -this.z;\n        return dest;\n    }\n    equals(vector, threshold = constants_1.epsilon) {\n        if (Math.abs(this.x - vector.x) > threshold) {\n            return false;\n        }\n        if (Math.abs(this.y - vector.y) > threshold) {\n            return false;\n        }\n        if (Math.abs(this.z - vector.z) > threshold) {\n            return false;\n        }\n        return true;\n    }\n    length() {\n        return Math.sqrt(this.squaredLength());\n    }\n    squaredLength() {\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        return x * x + y * y + z * z;\n    }\n    add(vector) {\n        this.x += vector.x;\n        this.y += vector.y;\n        this.z += vector.z;\n        return this;\n    }\n    subtract(vector) {\n        this.x -= vector.x;\n        this.y -= vector.y;\n        this.z -= vector.z;\n        return this;\n    }\n    multiply(vector) {\n        this.x *= vector.x;\n        this.y *= vector.y;\n        this.z *= vector.z;\n        return this;\n    }\n    divide(vector) {\n        this.x /= vector.x;\n        this.y /= vector.y;\n        this.z /= vector.z;\n        return this;\n    }\n    scale(value, dest) {\n        if (!dest) {\n            dest = this;\n        }\n        dest.x *= value;\n        dest.y *= value;\n        dest.z *= value;\n        return dest;\n    }\n    normalize(dest) {\n        if (!dest) {\n            dest = this;\n        }\n        let length = this.length();\n        if (length === 1) {\n            return this;\n        }\n        if (length === 0) {\n            dest.x = 0;\n            dest.y = 0;\n            dest.z = 0;\n            return dest;\n        }\n        length = 1.0 / length;\n        dest.x *= length;\n        dest.y *= length;\n        dest.z *= length;\n        return dest;\n    }\n    multiplyByMat3(matrix, dest) {\n        if (!dest) {\n            dest = this;\n        }\n        return matrix.multiplyVec3(this, dest);\n    }\n    multiplyByQuat(quaternion, dest) {\n        if (!dest) {\n            dest = this;\n        }\n        return quaternion.multiplyVec3(this, dest);\n    }\n    toQuat(dest) {\n        if (!dest) {\n            dest = new quat_1.default();\n        }\n        const c = new vec3();\n        const s = new vec3();\n        c.x = Math.cos(this.x * 0.5);\n        s.x = Math.sin(this.x * 0.5);\n        c.y = Math.cos(this.y * 0.5);\n        s.y = Math.sin(this.y * 0.5);\n        c.z = Math.cos(this.z * 0.5);\n        s.z = Math.sin(this.z * 0.5);\n        dest.x = s.x * c.y * c.z - c.x * s.y * s.z;\n        dest.y = c.x * s.y * c.z + s.x * c.y * s.z;\n        dest.z = c.x * c.y * s.z - s.x * s.y * c.z;\n        dest.w = c.x * c.y * c.z + s.x * s.y * s.z;\n        return dest;\n    }\n    static cross(vector, vector2, dest) {\n        if (!dest) {\n            dest = new vec3();\n        }\n        const x = vector.x;\n        const y = vector.y;\n        const z = vector.z;\n        const x2 = vector2.x;\n        const y2 = vector2.y;\n        const z2 = vector2.z;\n        dest.x = y * z2 - z * y2;\n        dest.y = z * x2 - x * z2;\n        dest.z = x * y2 - y * x2;\n        return dest;\n    }\n    static dot(vector, vector2) {\n        const x = vector.x;\n        const y = vector.y;\n        const z = vector.z;\n        const x2 = vector2.x;\n        const y2 = vector2.y;\n        const z2 = vector2.z;\n        return x * x2 + y * y2 + z * z2;\n    }\n    static distance(vector, vector2) {\n        const x = vector2.x - vector.x;\n        const y = vector2.y - vector.y;\n        const z = vector2.z - vector.z;\n        return Math.sqrt(this.squaredDistance(vector, vector2));\n    }\n    static squaredDistance(vector, vector2) {\n        const x = vector2.x - vector.x;\n        const y = vector2.y - vector.y;\n        const z = vector2.z - vector.z;\n        return x * x + y * y + z * z;\n    }\n    static direction(vector, vector2, dest) {\n        if (!dest) {\n            dest = new vec3();\n        }\n        const x = vector.x - vector2.x;\n        const y = vector.y - vector2.y;\n        const z = vector.z - vector2.z;\n        let length = Math.sqrt(x * x + y * y + z * z);\n        if (length === 0) {\n            dest.x = 0;\n            dest.y = 0;\n            dest.z = 0;\n            return dest;\n        }\n        length = 1 / length;\n        dest.x = x * length;\n        dest.y = y * length;\n        dest.z = z * length;\n        return dest;\n    }\n    static mix(vector, vector2, time, dest) {\n        if (!dest) {\n            dest = new vec3();\n        }\n        dest.x = vector.x + time * (vector2.x - vector.x);\n        dest.y = vector.y + time * (vector2.y - vector.y);\n        dest.z = vector.z + time * (vector2.z - vector.z);\n        return dest;\n    }\n    static sum(vector, vector2, dest) {\n        if (!dest) {\n            dest = new vec3();\n        }\n        dest.x = vector.x + vector2.x;\n        dest.y = vector.y + vector2.y;\n        dest.z = vector.z + vector2.z;\n        return dest;\n    }\n    static difference(vector, vector2, dest) {\n        if (!dest) {\n            dest = new vec3();\n        }\n        dest.x = vector.x - vector2.x;\n        dest.y = vector.y - vector2.y;\n        dest.z = vector.z - vector2.z;\n        return dest;\n    }\n    static product(vector, vector2, dest) {\n        if (!dest) {\n            dest = new vec3();\n        }\n        dest.x = vector.x * vector2.x;\n        dest.y = vector.y * vector2.y;\n        dest.z = vector.z * vector2.z;\n        return dest;\n    }\n    static quotient(vector, vector2, dest) {\n        if (!dest) {\n            dest = new vec3();\n        }\n        dest.x = vector.x / vector2.x;\n        dest.y = vector.y / vector2.y;\n        dest.z = vector.z / vector2.z;\n        return dest;\n    }\n    toString() {\n        return this.x.toFixed(5) + ', ' + this.y.toFixed(5) + ', ' + this.z.toFixed(5);\n    }\n}\nexports[\"default\"] = vec3;\nvec3.zero = new vec3([0, 0, 0]);\nvec3.one = new vec3([1, 1, 1]);\nvec3.up = new vec3([0, 1, 0]);\nvec3.right = new vec3([1, 0, 0]);\nvec3.forward = new vec3([0, 0, 1]);\n\n\n//# sourceURL=webpack://earthquest/./src/math/vec3.ts?");

/***/ }),

/***/ "./src/math/vec4.ts":
/*!**************************!*\
  !*** ./src/math/vec4.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst constants_1 = __webpack_require__(/*! ./constants */ \"./src/math/constants.ts\");\nclass vec4 {\n    get x() {\n        return this.values[0];\n    }\n    get y() {\n        return this.values[1];\n    }\n    get z() {\n        return this.values[2];\n    }\n    get w() {\n        return this.values[3];\n    }\n    get xy() {\n        return [this.values[0], this.values[1]];\n    }\n    get xyz() {\n        return [this.values[0], this.values[1], this.values[2]];\n    }\n    get xyzw() {\n        return [this.values[0], this.values[1], this.values[2], this.values[3]];\n    }\n    set x(value) {\n        this.values[0] = value;\n    }\n    set y(value) {\n        this.values[1] = value;\n    }\n    set z(value) {\n        this.values[2] = value;\n    }\n    set w(value) {\n        this.values[3] = value;\n    }\n    set xy(values) {\n        this.values[0] = values[0];\n        this.values[1] = values[1];\n    }\n    set xyz(values) {\n        this.values[0] = values[0];\n        this.values[1] = values[1];\n        this.values[2] = values[2];\n    }\n    set xyzw(values) {\n        this.values[0] = values[0];\n        this.values[1] = values[1];\n        this.values[2] = values[2];\n        this.values[3] = values[3];\n    }\n    get r() {\n        return this.values[0];\n    }\n    get g() {\n        return this.values[1];\n    }\n    get b() {\n        return this.values[2];\n    }\n    get a() {\n        return this.values[3];\n    }\n    get rg() {\n        return [this.values[0], this.values[1]];\n    }\n    get rgb() {\n        return [this.values[0], this.values[1], this.values[2]];\n    }\n    get rgba() {\n        return [this.values[0], this.values[1], this.values[2], this.values[3]];\n    }\n    set r(value) {\n        this.values[0] = value;\n    }\n    set g(value) {\n        this.values[1] = value;\n    }\n    set b(value) {\n        this.values[2] = value;\n    }\n    set a(value) {\n        this.values[3] = value;\n    }\n    set rg(values) {\n        this.values[0] = values[0];\n        this.values[1] = values[1];\n    }\n    set rgb(values) {\n        this.values[0] = values[0];\n        this.values[1] = values[1];\n        this.values[2] = values[2];\n    }\n    set rgba(values) {\n        this.values[0] = values[0];\n        this.values[1] = values[1];\n        this.values[2] = values[2];\n        this.values[3] = values[3];\n    }\n    constructor(values) {\n        this.values = new Float32Array(4);\n        if (values !== undefined) {\n            this.xyzw = values;\n        }\n    }\n    at(index) {\n        return this.values[index];\n    }\n    reset() {\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n        this.w = 0;\n    }\n    copy(dest) {\n        if (!dest) {\n            dest = new vec4();\n        }\n        dest.x = this.x;\n        dest.y = this.y;\n        dest.z = this.z;\n        dest.w = this.w;\n        return dest;\n    }\n    negate(dest) {\n        if (!dest) {\n            dest = this;\n        }\n        dest.x = -this.x;\n        dest.y = -this.y;\n        dest.z = -this.z;\n        dest.w = -this.w;\n        return dest;\n    }\n    equals(vector, threshold = constants_1.epsilon) {\n        if (Math.abs(this.x - vector.x) > threshold) {\n            return false;\n        }\n        if (Math.abs(this.y - vector.y) > threshold) {\n            return false;\n        }\n        if (Math.abs(this.z - vector.z) > threshold) {\n            return false;\n        }\n        if (Math.abs(this.w - vector.w) > threshold) {\n            return false;\n        }\n        return true;\n    }\n    length() {\n        return Math.sqrt(this.squaredLength());\n    }\n    squaredLength() {\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        const w = this.w;\n        return x * x + y * y + z * z + w * w;\n    }\n    add(vector) {\n        this.x += vector.x;\n        this.y += vector.y;\n        this.z += vector.z;\n        this.w += vector.w;\n        return this;\n    }\n    subtract(vector) {\n        this.x -= vector.x;\n        this.y -= vector.y;\n        this.z -= vector.z;\n        this.w -= vector.w;\n        return this;\n    }\n    multiply(vector) {\n        this.x *= vector.x;\n        this.y *= vector.y;\n        this.z *= vector.z;\n        this.w *= vector.w;\n        return this;\n    }\n    divide(vector) {\n        this.x /= vector.x;\n        this.y /= vector.y;\n        this.z /= vector.z;\n        this.w /= vector.w;\n        return this;\n    }\n    scale(value, dest) {\n        if (!dest) {\n            dest = this;\n        }\n        dest.x *= value;\n        dest.y *= value;\n        dest.z *= value;\n        dest.w *= value;\n        return dest;\n    }\n    normalize(dest) {\n        if (!dest) {\n            dest = this;\n        }\n        let length = this.length();\n        if (length === 1) {\n            return this;\n        }\n        if (length === 0) {\n            dest.x *= 0;\n            dest.y *= 0;\n            dest.z *= 0;\n            dest.w *= 0;\n            return dest;\n        }\n        length = 1.0 / length;\n        dest.x *= length;\n        dest.y *= length;\n        dest.z *= length;\n        dest.w *= length;\n        return dest;\n    }\n    multiplyMat4(matrix, dest) {\n        if (!dest) {\n            dest = this;\n        }\n        return matrix.multiplyVec4(this, dest);\n    }\n    static mix(vector, vector2, time, dest) {\n        if (!dest) {\n            dest = new vec4();\n        }\n        dest.x = vector.x + time * (vector2.x - vector.x);\n        dest.y = vector.y + time * (vector2.y - vector.y);\n        dest.z = vector.z + time * (vector2.z - vector.z);\n        dest.w = vector.w + time * (vector2.w - vector.w);\n        return dest;\n    }\n    static sum(vector, vector2, dest) {\n        if (!dest) {\n            dest = new vec4();\n        }\n        dest.x = vector.x + vector2.x;\n        dest.y = vector.y + vector2.y;\n        dest.z = vector.z + vector2.z;\n        dest.w = vector.w + vector2.w;\n        return dest;\n    }\n    static difference(vector, vector2, dest) {\n        if (!dest) {\n            dest = new vec4();\n        }\n        dest.x = vector.x - vector2.x;\n        dest.y = vector.y - vector2.y;\n        dest.z = vector.z - vector2.z;\n        dest.w = vector.w - vector2.w;\n        return dest;\n    }\n    static product(vector, vector2, dest) {\n        if (!dest) {\n            dest = new vec4();\n        }\n        dest.x = vector.x * vector2.x;\n        dest.y = vector.y * vector2.y;\n        dest.z = vector.z * vector2.z;\n        dest.w = vector.w * vector2.w;\n        return dest;\n    }\n    static quotient(vector, vector2, dest) {\n        if (!dest) {\n            dest = new vec4();\n        }\n        dest.x = vector.x / vector2.x;\n        dest.y = vector.y / vector2.y;\n        dest.z = vector.z / vector2.z;\n        dest.w = vector.w / vector2.w;\n        return dest;\n    }\n    toString() {\n        return (this.x.toFixed(5) +\n            ', ' +\n            this.y.toFixed(5) +\n            ', ' +\n            this.z.toFixed(5) +\n            ', ' +\n            this.a.toFixed(5));\n    }\n}\nexports[\"default\"] = vec4;\nvec4.zero = new vec4([0, 0, 0, 1]);\nvec4.one = new vec4([1, 1, 1, 1]);\n\n\n//# sourceURL=webpack://earthquest/./src/math/vec4.ts?");

/***/ }),

/***/ "./src/menus/DialogBuilder.ts":
/*!************************************!*\
  !*** ./src/menus/DialogBuilder.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DialogBuilder = void 0;\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\nconst vec2_1 = __importDefault(__webpack_require__(/*! ../math/vec2 */ \"./src/math/vec2.ts\"));\n/**\n * This class is used to build the visual dialog box\n */\nclass DialogBuilder extends Component_1.Component {\n    constructor(eng) {\n        super(eng);\n        this.continueIconX = 350;\n        this.continueIconY = 75;\n        this.tileWidth = 64;\n        this.tileHeight = 64;\n        this.iconScale = 1;\n        this.minWidth = 20;\n        this.minHeight = 20;\n    }\n    /**\n     * Set the sprite controller\n     * @param spriteController\n     */\n    initialize(spriteController) {\n        this._spriteController = spriteController;\n    }\n    /**\n     * Hides all the dialog box\n     * @param dialogId\n     */\n    hideDialog(dialogId) {\n        this._spriteController.removeSprite(dialogId + 'menu.left.top');\n        this._spriteController.removeSprite(dialogId + 'menu.right.top');\n        this._spriteController.removeSprite(dialogId + 'menu.right.bottom');\n        this._spriteController.removeSprite(dialogId + 'menu.left.bottom');\n        this._spriteController.removeSprite(dialogId + 'menu.center.top');\n        this._spriteController.removeSprite(dialogId + 'menu.center.bottom');\n        this._spriteController.removeSprite(dialogId + 'menu.left.middle');\n        this._spriteController.removeSprite(dialogId + 'menu.right.middle');\n        this._spriteController.removeSprite(dialogId + 'menu.center.middle');\n    }\n    /**\n     * Creates and positions a dialog box\n     * @param dialogId\n     * @param spriteController\n     * @param p\n     */\n    buildDialog(dialogId, p) {\n        // inner y is like the bottom corner of the text filed.\n        // p.yPos is pixels from the top of the screen\n        const innerTopLeft = new vec2_1.default(p.x + this.tileWidth * this.iconScale, p.y + this.tileWidth * this.iconScale);\n        const innerTopRight = new vec2_1.default(p.x + (p.width - this.tileWidth * this.iconScale), p.y + this.tileHeight * this.iconScale);\n        const innerBottomRight = new vec2_1.default(p.x + (p.width - this.tileWidth * this.iconScale), p.height + p.y - this.tileHeight * this.iconScale);\n        const innerBottomLeft = new vec2_1.default(p.x + this.tileWidth * this.iconScale, p.height + p.y - this.tileHeight * this.iconScale);\n        const bottomRight = new vec2_1.default(p.x + (p.width - this.tileWidth * this.iconScale), p.height + p.y);\n        const bottomLeft = new vec2_1.default(p.x + this.tileWidth * this.iconScale, p.height + p.y);\n        // top left corner\n        this._spriteController.activeSprite(dialogId + 'menu.left.top');\n        this._spriteController.scale(this.iconScale);\n        this._spriteController.viewOffset(new vec2_1.default(0, 0));\n        this._spriteController.viewScale(1.0);\n        this._spriteController.setSpritePosition(p.x, this.eng.height - innerTopLeft.y, -1);\n        this._spriteController.setSprite('menu.left.top');\n        // top right corner\n        this._spriteController.activeSprite(dialogId + 'menu.right.top');\n        this._spriteController.scale(this.iconScale);\n        this._spriteController.viewOffset(new vec2_1.default(0, 0));\n        this._spriteController.viewScale(1.0);\n        this._spriteController.setSpritePosition(innerTopRight.x, this.eng.height - innerTopRight.y, -1);\n        this._spriteController.setSprite('menu.right.top');\n        // bottom right corner\n        this._spriteController.activeSprite(dialogId + 'menu.right.bottom');\n        this._spriteController.scale(this.iconScale);\n        this._spriteController.viewOffset(new vec2_1.default(0, 0));\n        this._spriteController.viewScale(1.0);\n        this._spriteController.setSpritePosition(innerTopRight.x, this.eng.height - bottomRight.y, -1);\n        this._spriteController.setSprite('menu.right.bottom');\n        // bottom left corner\n        this._spriteController.activeSprite(dialogId + 'menu.left.bottom');\n        this._spriteController.scale(this.iconScale);\n        this._spriteController.viewOffset(new vec2_1.default(0, 0));\n        this._spriteController.viewScale(1.0);\n        this._spriteController.setSpritePosition(p.x, this.eng.height - bottomLeft.y, -1);\n        this._spriteController.setSprite('menu.left.bottom');\n        // position the edges\n        const topEdgeScale = (innerTopRight.x - innerTopLeft.x) / this.tileWidth;\n        const rightEdgeScale = (innerBottomRight.y - innerTopRight.y) / this.tileHeight;\n        // top edge\n        this._spriteController.activeSprite(dialogId + 'menu.center.top');\n        this._spriteController.scale({ x: topEdgeScale, y: this.iconScale });\n        this._spriteController.viewOffset(new vec2_1.default(0, 0));\n        this._spriteController.viewScale(1.0);\n        this._spriteController.setSpritePosition(innerTopLeft.x, this.eng.height - innerTopRight.y, -1);\n        this._spriteController.setSprite('menu.center.top');\n        // bottom edge\n        this._spriteController.activeSprite(dialogId + 'menu.center.bottom');\n        this._spriteController.scale({ x: topEdgeScale, y: this.iconScale });\n        this._spriteController.viewOffset(new vec2_1.default(0, 0));\n        this._spriteController.viewScale(1.0);\n        this._spriteController.setSpritePosition(innerTopLeft.x, this.eng.height - bottomRight.y, -1);\n        this._spriteController.setSprite('menu.center.bottom');\n        // left edge\n        this._spriteController.activeSprite(dialogId + 'menu.left.middle');\n        this._spriteController.scale({ x: this.iconScale, y: rightEdgeScale });\n        this._spriteController.viewOffset(new vec2_1.default(0, 0));\n        this._spriteController.viewScale(1.0);\n        this._spriteController.setSpritePosition(p.x, this.eng.height - innerBottomRight.y, -1);\n        this._spriteController.setSprite('menu.left.middle');\n        // right edge\n        this._spriteController.activeSprite(dialogId + 'menu.right.middle');\n        this._spriteController.scale({ x: this.iconScale, y: rightEdgeScale });\n        this._spriteController.viewOffset(new vec2_1.default(0, 0));\n        this._spriteController.viewScale(1.0);\n        this._spriteController.setSpritePosition(innerTopRight.x, this.eng.height - innerBottomRight.y, -1);\n        this._spriteController.setSprite('menu.right.middle');\n        // center\n        this._spriteController.activeSprite(dialogId + 'menu.center.middle');\n        this._spriteController.scale({ x: topEdgeScale, y: rightEdgeScale });\n        this._spriteController.viewOffset(new vec2_1.default(0, 0));\n        this._spriteController.viewScale(1.0);\n        this._spriteController.setSpritePosition(innerTopLeft.x, this.eng.height - innerBottomRight.y, -1);\n        this._spriteController.setSprite('menu.center.middle');\n    }\n}\nexports.DialogBuilder = DialogBuilder;\n\n\n//# sourceURL=webpack://earthquest/./src/menus/DialogBuilder.ts?");

/***/ }),

/***/ "./src/menus/DialogComponent.ts":
/*!**************************************!*\
  !*** ./src/menus/DialogComponent.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DialogComponent = void 0;\nconst Curve_1 = __webpack_require__(/*! ../math/Curve */ \"./src/math/Curve.ts\");\nconst PanelComponent_1 = __webpack_require__(/*! ./PanelComponent */ \"./src/menus/PanelComponent.ts\");\nconst UserAction_1 = __webpack_require__(/*! ../core/UserAction */ \"./src/core/UserAction.ts\");\n/**\n * A dialog component that can be sized and display text in the game.\n * There is also an onHide event to handle user input\n */\nclass DialogComponent extends PanelComponent_1.PanelComponent {\n    get id() {\n        return this._id;\n    }\n    get visible() {\n        return this._visible;\n    }\n    constructor(eng, dialogBuild) {\n        super(eng, 'dialog1', dialogBuild);\n        this._expandAnimation = new Curve_1.Curve();\n        this._expandAnimation.curve(Curve_1.CurveType.linear);\n        this._expandAnimation.points([\n            { t: 0, p: 0 },\n            { t: 250, p: 1 },\n            { t: 500, p: 2 },\n        ]);\n    }\n    /**\n     * Handle user interaction with the dialog\n     * @param state\n     * @returns\n     */\n    handleUserAction(state) {\n        const active = this.visible;\n        if (active && (state.action & UserAction_1.UserAction.ActionPressed) > 0) {\n            let canHide = true;\n            // if there is an onHide event fire that\n            if (this.onHide) {\n                canHide = this.onHide(this);\n            }\n            if (canHide) {\n                this.hide();\n            }\n        }\n        return active;\n    }\n    show() {\n        super.show();\n    }\n    hide() {\n        super.hide();\n    }\n    update(dt) {\n        super.update(dt);\n        this._expandAnimation.update(dt);\n    }\n}\nexports.DialogComponent = DialogComponent;\n\n\n//# sourceURL=webpack://earthquest/./src/menus/DialogComponent.ts?");

/***/ }),

/***/ "./src/menus/DialogCursor.ts":
/*!***********************************!*\
  !*** ./src/menus/DialogCursor.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DialogCursor = void 0;\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\nconst Curve_1 = __webpack_require__(/*! ../math/Curve */ \"./src/math/Curve.ts\");\nconst vec2_1 = __importDefault(__webpack_require__(/*! ../math/vec2 */ \"./src/math/vec2.ts\"));\n/**\n * A cursor used for player selection in menus and dialogs\n */\nclass DialogCursor extends Component_1.Component {\n    get index() {\n        return this._activeIndex;\n    }\n    get position() {\n        return this._activePosition;\n    }\n    set index(value) {\n        this._activeIndex = value;\n        this._dirty = true;\n        // let the user handle the select change\n        if (this._onSelect) {\n            this._onSelect(this._activeIndex, this);\n        }\n    }\n    /**\n     * Number of positions this cursor can have\n     */\n    get indexCount() {\n        return this._positions.length;\n    }\n    constructor(eng) {\n        super(eng);\n        this._positions = [];\n        this._activeIndex = -1;\n        this._activePosition = new vec2_1.default(0, 0);\n        this._cursorCurve = new Curve_1.Curve();\n        this._cursorCurve.points([\n            {\n                p: 0,\n                t: 0,\n            },\n            {\n                p: 10,\n                t: 500,\n            },\n            {\n                p: 0,\n                t: 1000,\n            },\n        ]);\n        this._cursorCurve.curve(Curve_1.CurveType.linear);\n        this._cursorCurve.repeat(-1);\n        this._dirty = true;\n        this._visible = false;\n    }\n    initialize(id, spriteController, positions, onSelect) {\n        this._spriteController = spriteController;\n        this._positions = positions;\n        this._cursorId = id;\n        this._onSelect = onSelect;\n    }\n    show(index) {\n        if (index != undefined) {\n            this._activeIndex = index;\n        }\n        this._visible = true;\n        this._dirty = true;\n    }\n    /**\n     * Cause the cursor to stop moving as the player selected something\n     */\n    lock() {\n        this._cursorCurve.pause(0);\n    }\n    /**\n     * Hide the cursor\n     */\n    hide() {\n        this._visible = false;\n        this._dirty = true;\n    }\n    redraw() {\n        if (this._visible) {\n            const position = this._positions[this._activeIndex];\n            if (position) {\n                this._activePosition = position;\n                this._spriteController.activeSprite(this._cursorId);\n                this._spriteController.scale(0.9);\n                this._spriteController.viewOffset(new vec2_1.default(0, 0));\n                this._spriteController.viewScale(1.0);\n                this._spriteController.setSprite('cursor');\n                this._spriteController.setSpritePosition(position.x, position.y, -0.3);\n                this._cursorCurve.start(true, undefined, (val) => {\n                    this._spriteController.activeSprite(this._cursorId);\n                    this._spriteController.setSpritePosition(position.x + val, position.y, -0.3);\n                });\n            }\n        }\n        else {\n            this._spriteController.removeSprite(this._cursorId);\n        }\n    }\n    /**\n     * Updates the animation\n     * @param dt\n     */\n    update(dt) {\n        this._cursorCurve.update(dt);\n        if (this._dirty) {\n            this.redraw();\n            this._dirty = false;\n        }\n    }\n}\nexports.DialogCursor = DialogCursor;\n\n\n//# sourceURL=webpack://earthquest/./src/menus/DialogCursor.ts?");

/***/ }),

/***/ "./src/menus/DialogMenu.ts":
/*!*********************************!*\
  !*** ./src/menus/DialogMenu.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DialogMenu = void 0;\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\nconst SpriteBatchController_1 = __webpack_require__(/*! ../graphics/SpriteBatchController */ \"./src/graphics/SpriteBatchController.ts\");\n/**\n * Test sprite batch vs normal sprites\n */\nclass DialogMenu extends Component_1.Component {\n    constructor(eng) {\n        super(eng);\n        this._spriteBatch = new SpriteBatchController_1.SpritBatchController(eng);\n    }\n    /**\n     * Simulate some menu data\n     */\n    async initialize() {\n        const spriteData = [\n            {\n                id: 'menu.top.right',\n                loc: [0, 0, 7, 7],\n            },\n            {\n                id: 'menu.top.left',\n                loc: [16, 0, 7, 7],\n            },\n            {\n                id: 'menu.bottom.left',\n                loc: [16, 13, 7, 7],\n            },\n            {\n                id: 'menu.bottom.right',\n                loc: [0, 13, 7, 7],\n            },\n            {\n                id: 'menu.bottom',\n                loc: [8, 13, 7, 7],\n            },\n            {\n                id: 'menu.right',\n                loc: [16, 7, 7, 7],\n            },\n            {\n                id: 'menu.left',\n                loc: [0, 7, 7, 7],\n            },\n            {\n                id: 'menu.top',\n                loc: [8, 0, 7, 7],\n            },\n            {\n                id: 'menu.cursor',\n                loc: [27, 6, 12, 9],\n            },\n        ];\n        const texture = this.eng.assetManager.menu.texture;\n        const data = this.eng.assetManager.menu.data;\n        this._spriteBatch.initialize(texture, data);\n        let step = 0;\n        //TODO add the menu parts to the sprite batch\n        //this._spriteBatch.setSprite('sprite_' + i, 0);\n        //this._spriteBatch.setSpritePosition('sprite_' + i, x, y, 5, 0.5);\n        this._spriteBatch.commitToBuffer();\n    }\n    /**\n     * Handles user input. The logic goes through a chain of command.\n     * @param action the action from keyboard or gamepad\n     * @returns True if the action was handled else false\n     */\n    handleUserAction(action) {\n        return false;\n    }\n    /**\n     * Renders the sprites or sprite batches\n     * @param dt\n     */\n    update(dt) {\n        this._spriteBatch.update(dt);\n    }\n}\nexports.DialogMenu = DialogMenu;\n\n\n//# sourceURL=webpack://earthquest/./src/menus/DialogMenu.ts?");

/***/ }),

/***/ "./src/menus/GameMenuBuilder.ts":
/*!**************************************!*\
  !*** ./src/menus/GameMenuBuilder.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GameMenuBuilder = void 0;\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\nconst Curve_1 = __webpack_require__(/*! ../math/Curve */ \"./src/math/Curve.ts\");\nconst vec2_1 = __importDefault(__webpack_require__(/*! ../math/vec2 */ \"./src/math/vec2.ts\"));\nclass GameMenuBuilder extends Component_1.Component {\n    constructor(eng) {\n        super(eng);\n        this._cursorCurve = new Curve_1.Curve();\n        this._cursorCurve.points([\n            {\n                p: 0,\n                t: 0,\n            },\n            {\n                p: 10,\n                t: 500,\n            },\n        ]);\n    }\n    /**\n     * Set the sprite controller\n     * @param spriteController\n     */\n    initialize(spriteController) {\n        this._spriteController = spriteController;\n    }\n    show() {\n        this._spriteController.activeSprite('gameMenu');\n        this._spriteController.scale(1);\n        this._spriteController.viewOffset(new vec2_1.default(0, 0));\n        this._spriteController.viewScale(1.0);\n        this._spriteController.setSprite('gameMenu');\n        this._spriteController.setSpritePosition(0, 0, -0.2);\n    }\n    hide() {\n        this._spriteController.removeSprite('gameMenu');\n        this._spriteController.commitToBuffer();\n    }\n}\nexports.GameMenuBuilder = GameMenuBuilder;\n\n\n//# sourceURL=webpack://earthquest/./src/menus/GameMenuBuilder.ts?");

/***/ }),

/***/ "./src/menus/GameMenuComponent.ts":
/*!****************************************!*\
  !*** ./src/menus/GameMenuComponent.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GameMenuComponent = void 0;\nconst vec2_1 = __importDefault(__webpack_require__(/*! ../math/vec2 */ \"./src/math/vec2.ts\"));\nconst vec4_1 = __importDefault(__webpack_require__(/*! ../math/vec4 */ \"./src/math/vec4.ts\"));\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\nconst UserAction_1 = __webpack_require__(/*! ../core/UserAction */ \"./src/core/UserAction.ts\");\nconst DialogCursor_1 = __webpack_require__(/*! ./DialogCursor */ \"./src/menus/DialogCursor.ts\");\n/**\n * The game menu. The player can equip, use items and see stats\n */\nclass GameMenuComponent extends Component_1.Component {\n    get id() {\n        return this._id;\n    }\n    get visible() {\n        return this._visible;\n    }\n    constructor(eng, id, _dialogBuild) {\n        super(eng);\n        this._dialogBuild = _dialogBuild;\n        this._id = id;\n        this._visible = false;\n        this._pos = new vec2_1.default();\n        this._size = new vec2_1.default(300, 200);\n        this._textOffset = new vec2_1.default(50, 60);\n        this._dirty = false;\n        this._cursor = new DialogCursor_1.DialogCursor(eng);\n    }\n    initialize(spriteController) {\n        this._spriteController = spriteController;\n        this._dialogBuild.initialize(this._spriteController);\n        // menu options positions\n        const items = new vec2_1.default(30, 540);\n        const status = new vec2_1.default(30, 480);\n        const equip = new vec2_1.default(30, 430);\n        const map = new vec2_1.default(30, 370);\n        const save = new vec2_1.default(30, 320);\n        this._cursor.initialize('cursor.1', this._spriteController, [items, status, equip, map, save], (index) => {\n            switch (index) {\n                case 0:\n                    break;\n                case 1:\n                    break;\n                case 2:\n                    break;\n                case 3:\n                    break;\n                case 4:\n                    this.save();\n                    break;\n            }\n            console.debug('selecting index ' + index);\n        });\n    }\n    save() {\n        this.eng.gameManager.save();\n    }\n    setPosition(x, y) {\n        this._pos.x = x;\n        this._pos.y = y;\n        this._dirty = true;\n    }\n    show() {\n        this._visible = true;\n        this._dirty = true;\n        this._cursor.show(0);\n    }\n    getFormattedTime() {\n        const t = this.eng.gameManager.data.player.timePlayed;\n        let time = t.h.toString().padStart(2, '0');\n        time += ':' + t.m.toString().padStart(2, '0');\n        time += ':' + t.s.toString().padStart(2, '0');\n        return time;\n    }\n    hide() {\n        this._visible = false;\n        this._dirty = true;\n    }\n    /**\n     * Handle user interaction with the dialog\n     * @param state\n     * @returns\n     */\n    handleUserAction(state) {\n        const active = this.visible;\n        if (active) {\n            if ((state.action & UserAction_1.UserAction.MenuPressed) > 0) {\n                let canHide = true;\n                // if there is an onHide event fire that\n                if (this.onHide) {\n                    canHide = this.onHide(this);\n                }\n                if (canHide) {\n                    this.hide();\n                }\n            }\n            // select next option\n            if ((state.action & UserAction_1.UserAction.DownPressed) > 0) {\n                if (this._cursor.index < this._cursor.indexCount - 1) {\n                    this._cursor.index++;\n                }\n                else {\n                    this._cursor.index = 0;\n                }\n            }\n            // select previous option\n            if ((state.action & UserAction_1.UserAction.UpPressed) > 0) {\n                if (this._cursor.index > 0) {\n                    this._cursor.index--;\n                }\n                else {\n                    this._cursor.index = this._cursor.indexCount - 1;\n                }\n            }\n        }\n        return active;\n    }\n    redraw() {\n        if (this.visible) {\n            this._dialogBuild.show();\n            this._spriteController.commitToBuffer();\n            const gold = this.eng.gameManager.data.player.gold.toString();\n            this.eng.textManager.setTextBlock({\n                id: 'menu.gold',\n                text: gold.padStart(7, '0'),\n                position: new vec2_1.default([90, 370]),\n                color: new vec4_1.default([0.0, 0.0, 0.0, 1.0]),\n                depth: -1,\n                scale: 1.0,\n            });\n        }\n        else {\n            this._dialogBuild.hide();\n            this._cursor.hide();\n            this.eng.textManager.hideText('menu.gold');\n            this.eng.textManager.hideText('menu.time');\n        }\n    }\n    update(dt) {\n        if (this._dirty) {\n            this.redraw();\n            this._dirty = false;\n        }\n        // show the time updates\n        if (this.visible) {\n            if (this._formattedTime != this.getFormattedTime()) {\n                this._formattedTime = this.getFormattedTime();\n                this.eng.textManager.setTextBlock({\n                    id: 'menu.time',\n                    text: this._formattedTime,\n                    position: new vec2_1.default([90, 430]),\n                    color: new vec4_1.default([0.0, 0.0, 0.0, 1.0]),\n                    depth: -1,\n                    scale: 1.0,\n                });\n            }\n        }\n        this._cursor.update(dt);\n    }\n}\nexports.GameMenuComponent = GameMenuComponent;\n\n\n//# sourceURL=webpack://earthquest/./src/menus/GameMenuComponent.ts?");

/***/ }),

/***/ "./src/menus/PanelComponent.ts":
/*!*************************************!*\
  !*** ./src/menus/PanelComponent.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PanelComponent = void 0;\nconst vec2_1 = __importDefault(__webpack_require__(/*! ../math/vec2 */ \"./src/math/vec2.ts\"));\nconst vec4_1 = __importDefault(__webpack_require__(/*! ../math/vec4 */ \"./src/math/vec4.ts\"));\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\nclass PanelComponent extends Component_1.Component {\n    get id() {\n        return this._id;\n    }\n    get visible() {\n        return this._visible;\n    }\n    constructor(eng, id, _dialogBuild) {\n        super(eng);\n        this._dialogBuild = _dialogBuild;\n        this._id = id;\n        this._visible = false;\n        this._pos = new vec2_1.default();\n        this._size = new vec2_1.default(300, 200);\n        this._textOffset = new vec2_1.default(50, 60);\n        this._dirty = false;\n    }\n    initialize(spriteController) {\n        this._spriteController = spriteController;\n        this._dialogBuild.initialize(this._spriteController);\n    }\n    setPosition(x, y) {\n        this._pos.x = x;\n        this._pos.y = y;\n        this._dirty = true;\n    }\n    /**\n     * Sets the text for this panel\n     * @param text\n     */\n    setText(text) {\n        this._text = text;\n        this._dirty = true;\n    }\n    setSize(width, height) {\n        this._size.x = width;\n        this._size.y = height;\n        this._dirty = true;\n    }\n    show() {\n        this._visible = true;\n        this._dirty = true;\n    }\n    hide() {\n        this._visible = false;\n        this._dirty = true;\n    }\n    redraw() {\n        if (this.visible) {\n            const p = { x: this._pos.x, y: this._pos.y, width: this._size.x, height: this._size.y };\n            this._dialogBuild.buildDialog(this.id, p);\n            const textPos = new vec2_1.default(this._pos.x + this._textOffset.x, p.y + this._textOffset.y);\n            this.eng.textManager.setTextBlock({\n                id: this.id,\n                text: this._text,\n                position: textPos,\n                color: new vec4_1.default([0.9, 0.9, 1.0, 1.0]),\n                depth: -1,\n                scale: 1.0,\n            });\n        }\n        else {\n            this.eng.textManager.hideText(this.id);\n            this._dialogBuild.hideDialog(this.id);\n        }\n    }\n    update(dt) {\n        if (this._dirty) {\n            this.redraw();\n            this._dirty = false;\n        }\n    }\n}\nexports.PanelComponent = PanelComponent;\n\n\n//# sourceURL=webpack://earthquest/./src/menus/PanelComponent.ts?");

/***/ }),

/***/ "./src/shaders/SpritePerspectiveShader.ts":
/*!************************************************!*\
  !*** ./src/shaders/SpritePerspectiveShader.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SpritePerspectiveShader = void 0;\nconst ShaderController_1 = __webpack_require__(/*! ../graphics/ShaderController */ \"./src/graphics/ShaderController.ts\");\n//\n// Vertex Shader program\n//\nconst vsSource = `\nattribute vec3 aPos;\nattribute vec2 aTex;\nuniform mat4 uProj;\nvarying mediump vec2 vTex;\nvarying mediump vec3 depth;\n\nvoid main() {\n    vTex = aTex;\n    vec4 pos = uProj * vec4(aPos.xyz, 1.0);\n    gl_Position =  pos;\n    depth = vec3((pos.z + 1.0) *.5);\n}\n`;\n//\n// Fragment shader program\n//\nconst fsSource = `\nvarying mediump vec2 vTex;\nvarying mediump  vec3 depth;\nuniform sampler2D uSampler;\n\nvoid main() {\n  mediump vec4 color = texture2D(uSampler, vTex);\n    if(color.a < .001) {\n      discard;\n    } \n\n    // uncomment to show depth\n    //gl_FragColor = vec4(depth.xyz, 1.0);\n    gl_FragColor = color;\n  \n}\n`;\n/**\n * Shader for sprites\n */\nclass SpritePerspectiveShader {\n    constructor(gl, shaderId) {\n        this.gl = gl;\n        this._shader = new ShaderController_1.ShaderController(this.gl, shaderId);\n        this._shader.initShaderProgram(vsSource, fsSource);\n        // set the info\n        this._aPos = this._shader.getAttribute('aPos');\n        this._aTex = this._shader.getAttribute('aTex');\n        this._uSampler = this._shader.getUniform('uSampler');\n        this._uProj = this._shader.getUniform('uProj');\n    }\n    setProj(proj) {\n        this._shader.setMat4(this._uProj, proj);\n    }\n    setSpriteSheet(texture) {\n        this._texture = texture;\n    }\n    enable() {\n        this._shader.enable();\n        if (!this._texture) {\n            console.warn('texture is null. Call setSpriteSheet()');\n        }\n        else {\n            // Bind the texture to texture unit 0\n            this._texture.enable(this._uSampler);\n        }\n    }\n}\nexports.SpritePerspectiveShader = SpritePerspectiveShader;\n\n\n//# sourceURL=webpack://earthquest/./src/shaders/SpritePerspectiveShader.ts?");

/***/ }),

/***/ "./src/systems/AssetManager.ts":
/*!*************************************!*\
  !*** ./src/systems/AssetManager.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AssetManager = void 0;\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\nconst font_png_1 = __importDefault(__webpack_require__(/*! ../assets/font.png */ \"./src/assets/font.png\"));\nconst font_json_1 = __importDefault(__webpack_require__(/*! ../assets/font.json */ \"./src/assets/font.json\"));\nconst characters_png_1 = __importDefault(__webpack_require__(/*! ../assets/characters.png */ \"./src/assets/characters.png\"));\nconst characters_json_1 = __importDefault(__webpack_require__(/*! ../assets/characters.json */ \"./src/assets/characters.json\"));\nconst isometricTile_png_1 = __importDefault(__webpack_require__(/*! ../assets/isometricTile.png */ \"./src/assets/isometricTile.png\"));\nconst isometricTile_json_1 = __importDefault(__webpack_require__(/*! ../assets/isometricTile.json */ \"./src/assets/isometricTile.json\"));\nconst menu_png_1 = __importDefault(__webpack_require__(/*! ../assets/menu.png */ \"./src/assets/menu.png\"));\nconst menu_json_1 = __importDefault(__webpack_require__(/*! ../assets/menu.json */ \"./src/assets/menu.json\"));\nconst Texture_1 = __webpack_require__(/*! ../graphics/Texture */ \"./src/graphics/Texture.ts\");\n/**\n * Manages texture assets\n */\nclass AssetManager extends Component_1.Component {\n    get font() {\n        return { texture: this._font, data: font_json_1.default };\n    }\n    get character() {\n        return { texture: this._character, data: characters_json_1.default };\n    }\n    get tile() {\n        return { texture: this._tile, data: isometricTile_json_1.default };\n    }\n    get menu() {\n        return { texture: this._menu, data: menu_json_1.default };\n    }\n    constructor(eng) {\n        super(eng);\n    }\n    async initialize() {\n        this._tile = new Texture_1.Texture(this.gl);\n        await this._tile.loadImage(isometricTile_png_1.default);\n        this._character = new Texture_1.Texture(this.gl);\n        await this._character.loadImage(characters_png_1.default);\n        this._font = new Texture_1.Texture(this.gl);\n        await this._font.loadImage(font_png_1.default);\n        this._menu = new Texture_1.Texture(this.gl);\n        await this._menu.loadImage(menu_png_1.default);\n    }\n}\nexports.AssetManager = AssetManager;\n\n\n//# sourceURL=webpack://earthquest/./src/systems/AssetManager.ts?");

/***/ }),

/***/ "./src/systems/BattleManager.ts":
/*!**************************************!*\
  !*** ./src/systems/BattleManager.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BattleManager = exports.BattleState = void 0;\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\nconst SpriteBatchController_1 = __webpack_require__(/*! ../graphics/SpriteBatchController */ \"./src/graphics/SpriteBatchController.ts\");\nconst Curve_1 = __webpack_require__(/*! ../math/Curve */ \"./src/math/Curve.ts\");\nconst TileFactory_1 = __webpack_require__(/*! ./TileFactory */ \"./src/systems/TileFactory.ts\");\nvar BattleState;\n(function (BattleState) {\n    BattleState[BattleState[\"None\"] = 0] = \"None\";\n    BattleState[BattleState[\"ScreenWipeToBattle\"] = 1] = \"ScreenWipeToBattle\";\n    BattleState[BattleState[\"LoadBattleScene\"] = 2] = \"LoadBattleScene\";\n    BattleState[BattleState[\"ShowEnemies\"] = 3] = \"ShowEnemies\";\n    BattleState[BattleState[\"ShowPlayer\"] = 4] = \"ShowPlayer\";\n    BattleState[BattleState[\"ShowMenu\"] = 5] = \"ShowMenu\";\n    BattleState[BattleState[\"PlayerAttack\"] = 6] = \"PlayerAttack\";\n    BattleState[BattleState[\"EnemyHit\"] = 7] = \"EnemyHit\";\n    BattleState[BattleState[\"EnemyAttack\"] = 8] = \"EnemyAttack\";\n    BattleState[BattleState[\"PlayerHit\"] = 9] = \"PlayerHit\";\n    BattleState[BattleState[\"PlayerUseItem\"] = 10] = \"PlayerUseItem\";\n    BattleState[BattleState[\"EnemyDie\"] = 11] = \"EnemyDie\";\n    BattleState[BattleState[\"PlayerDie\"] = 12] = \"PlayerDie\";\n    BattleState[BattleState[\"PlayerWin\"] = 13] = \"PlayerWin\";\n    BattleState[BattleState[\"StatsUpdate\"] = 14] = \"StatsUpdate\";\n    BattleState[BattleState[\"LevelUp\"] = 15] = \"LevelUp\";\n    BattleState[BattleState[\"ScreenWipeToWorld\"] = 16] = \"ScreenWipeToWorld\";\n})(BattleState = exports.BattleState || (exports.BattleState = {}));\n/**\n * Manages the active battle\n */\nclass BattleManager extends Component_1.Component {\n    constructor(eng) {\n        super(eng);\n        this._active = false;\n        this._curve = new Curve_1.Curve();\n        this._curve.points([\n            { p: 1, t: 0 },\n            { p: 0.55, t: 500 },\n            { p: 1, t: 1000 },\n        ]);\n        this._curve.curve(Curve_1.CurveType.linear);\n        this._curve.pause();\n        this._curve.onDone = () => {\n            this._ready = true;\n        };\n        this._battleState = BattleState.None;\n        this._spriteController = new SpriteBatchController_1.SpritBatchController(this.eng);\n    }\n    /**\n     * Initialize the battle\n     */\n    async initialize() {\n        const texture = this.eng.assetManager.tile.texture;\n        const data = this.eng.assetManager.tile.data;\n        this._spriteController.initialize(texture, data);\n        this._tileFactory = new TileFactory_1.TileFactory(this.eng, this._spriteController);\n    }\n    startBattle(battleData) {\n        if (this._active) {\n            console.warn('already in a battle');\n            return;\n        }\n        // TODO show transition\n        // load battle scene\n        // show enemies\n        // show player\n        // show menu options\n        // show stats\n        this._ready = false;\n        this._active = true;\n        this._curve.start(true, () => {\n            this._ready = true;\n            //TODO build battle scene\n            this.eng.scene.ground.buildBattleScene();\n            this.eng.dialogManager.showDialog('Start Fighting', { x: 200, y: 20, width: 600, height: 200 });\n            //this.eng.soundManager.\n        }, (value) => {\n            this.eng.viewManager.scale = this._curve.getValue();\n        });\n    }\n    update(dt) {\n        this._curve.update(dt);\n        if (this._ready) {\n        }\n    }\n}\nexports.BattleManager = BattleManager;\n\n\n//# sourceURL=webpack://earthquest/./src/systems/BattleManager.ts?");

/***/ }),

/***/ "./src/systems/DialogManager.ts":
/*!**************************************!*\
  !*** ./src/systems/DialogManager.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DialogManager = void 0;\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\nconst SpriteBatchController_1 = __webpack_require__(/*! ../graphics/SpriteBatchController */ \"./src/graphics/SpriteBatchController.ts\");\nconst DialogComponent_1 = __webpack_require__(/*! ../menus/DialogComponent */ \"./src/menus/DialogComponent.ts\");\nconst GameMenuComponent_1 = __webpack_require__(/*! ../menus/GameMenuComponent */ \"./src/menus/GameMenuComponent.ts\");\nconst DialogBuilder_1 = __webpack_require__(/*! ../menus/DialogBuilder */ \"./src/menus/DialogBuilder.ts\");\nconst GameMenuBuilder_1 = __webpack_require__(/*! ../menus/GameMenuBuilder */ \"./src/menus/GameMenuBuilder.ts\");\n/**\n * Manages dialog boxes\n */\nclass DialogManager extends Component_1.Component {\n    /**\n     * Get the game menu\n     */\n    get gameMenu() {\n        return this._gameMenu;\n    }\n    /**\n     * Get the dialog menu\n     */\n    get dialog() {\n        return this._dialog;\n    }\n    constructor(eng) {\n        super(eng);\n        this._dialogBuild = new DialogBuilder_1.DialogBuilder(eng);\n        this._gameMenuBuilder = new GameMenuBuilder_1.GameMenuBuilder(eng);\n        this._spriteController = new SpriteBatchController_1.SpritBatchController(eng);\n        this._dialog = new DialogComponent_1.DialogComponent(this.eng, this._dialogBuild);\n        this._gameMenu = new GameMenuComponent_1.GameMenuComponent(this.eng, 'gameMenu', this._gameMenuBuilder);\n    }\n    async initialize() {\n        const texture = this.eng.assetManager.menu.texture;\n        const data = this.eng.assetManager.menu.data;\n        this._spriteController.initialize(texture, data);\n        this._dialog.initialize(this._spriteController);\n        this._gameMenu.initialize(this._spriteController);\n        this._spriteController.commitToBuffer();\n    }\n    /**\n     * Handles user actions for the menu\n     * @param action\n     * @returns\n     */\n    handleUserAction(state) {\n        return this._dialog.handleUserAction(state) || this._gameMenu.handleUserAction(state);\n    }\n    /**\n     * Shows a dialog box\n     * @param text\n     * @param loc\n     */\n    showDialog(text, loc, onHide, options) {\n        this._dialog.setPosition(loc.x, loc.y);\n        this._dialog.setSize(loc.width, loc.height);\n        this._dialog.setText(text);\n        this._dialog.onHide = onHide;\n        this._dialog.show();\n    }\n    showGameMenu(onHide) {\n        this._gameMenu.onHide = onHide;\n        this._gameMenu.show();\n    }\n    /**\n     * Updates the dialog box\n     * @param dt\n     */\n    update(dt) {\n        this._dialog.update(dt);\n        this._gameMenu.update(dt);\n        this._spriteController.update(dt);\n    }\n}\nexports.DialogManager = DialogManager;\n\n\n//# sourceURL=webpack://earthquest/./src/systems/DialogManager.ts?");

/***/ }),

/***/ "./src/systems/GameManager.ts":
/*!************************************!*\
  !*** ./src/systems/GameManager.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GameManager = void 0;\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\nconst GameData_1 = __webpack_require__(/*! ../data/GameData */ \"./src/data/GameData.ts\");\n/** Key for local storage */\nconst localStorageKey = 'EarthQuest';\n/**\n * This is the main class that manages game state\n */\nclass GameManager extends Component_1.Component {\n    constructor(eng) {\n        super(eng);\n        this._timeCounter = 0;\n    }\n    /**\n     * Load game data from local storage\n     */\n    initialize() {\n        if (localStorage.getItem(localStorageKey)) {\n            this.data = JSON.parse(localStorage[localStorageKey]);\n        }\n        else {\n            this.data = new GameData_1.GameData();\n        }\n    }\n    /**\n     * Save game data in local storage\n     */\n    save() {\n        localStorage[localStorageKey] = JSON.stringify(this.data);\n    }\n    /**\n     * Update the game time\n     * @param dt\n     */\n    update(dt) {\n        const t = this.data.player.timePlayed;\n        this._timeCounter += dt;\n        if (this._timeCounter > 1000) {\n            t.s++;\n            this._timeCounter = this._timeCounter % 1000;\n            if (t.s >= 60) {\n                t.s -= 60;\n                t.m++;\n            }\n            if (t.m >= 60) {\n                t.m -= 60;\n                t.h++;\n            }\n        }\n    }\n}\nexports.GameManager = GameManager;\n\n\n//# sourceURL=webpack://earthquest/./src/systems/GameManager.ts?");

/***/ }),

/***/ "./src/systems/GroundManager.ts":
/*!**************************************!*\
  !*** ./src/systems/GroundManager.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GroundManager = void 0;\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\nconst SpriteBatchController_1 = __webpack_require__(/*! ../graphics/SpriteBatchController */ \"./src/graphics/SpriteBatchController.ts\");\nconst TileFactory_1 = __webpack_require__(/*! ./TileFactory */ \"./src/systems/TileFactory.ts\");\nconst LevelGenerator_1 = __webpack_require__(/*! ../environment/LevelGenerator */ \"./src/environment/LevelGenerator.ts\");\n/**\n * The ground class is the cell environment the player interacts with. Cells are block that\n * that different tile components interact with. Think of it as the world tile components live in.\n * This class is driven by Tile image data and LevelData.\n */\nclass GroundManager extends Component_1.Component {\n    constructor(eng) {\n        super(eng);\n        this._spriteController = new SpriteBatchController_1.SpritBatchController(eng);\n        this._tileFactory = new TileFactory_1.TileFactory(eng, this._spriteController);\n    }\n    /**\n     * Initialize a level\n     * @param levelData\n     */\n    async initialize(levelData) {\n        this._levelData = levelData;\n        // reset tiles that need updates\n        this._updateTiles = [];\n        const texture = this.eng.assetManager.tile.texture;\n        const data = this.eng.assetManager.tile.data;\n        this._spriteController.initialize(texture, data);\n        console.debug('sprite list: ', this._spriteController.getSpriteList());\n        // generate a level\n        this._levelGenerator = new LevelGenerator_1.LevelGenerator(this.eng, this._tileFactory);\n        // create the initial level\n        this.buildLevel({ seed: 605, width: 60, length: 60, height: 7 });\n    }\n    /**\n     * Build an auto generated level\n     * @param params\n     */\n    buildLevel(params) {\n        this._tiles = this._levelGenerator.Generate(params);\n    }\n    buildBattleScene() {\n        const playerPos = this.eng.scene.player.tileIndex;\n        const startI = playerPos.x - 5;\n        const startJ = playerPos.y - 5;\n        const k = playerPos.z - 1;\n        const width = 10;\n        const length = 10;\n        const tiles = this._tiles;\n        // create the floor\n        const jStart = startJ < 0 ? 0 : startJ;\n        for (let j = jStart; j < length + jStart; j++) {\n            const iStart = startI < 0 ? 0 : startI;\n            for (let i = iStart; i < width + iStart; i++) {\n                tiles[k][j][i] = this._tileFactory.createStaticTile('open|block.brick', i, j, k);\n            }\n        }\n        // create the border around the ring\n        for (let j = jStart; j < length + jStart; j++) {\n            const i = startI;\n            tiles[k + 1][j][i] = this._tileFactory.createStaticTile('open|block.brick', i, j, k + 1);\n        }\n        for (let j = jStart; j < length + jStart; j++) {\n            const i = startI + width;\n            tiles[k + 1][j][i] = this._tileFactory.createStaticTile('open|block.brick', i, j, k + 1);\n        }\n        for (let i = startI; i <= width + startI; i++) {\n            const j = startJ + length;\n            tiles[k + 1][j][i] = this._tileFactory.createStaticTile('open|block.brick', i, j, k + 1);\n        }\n        for (let i = startI; i <= width + startI; i++) {\n            const j = startJ;\n            tiles[k + 1][j][i] = this._tileFactory.createStaticTile('open|block.brick', i, j, k + 1);\n        }\n        return true;\n    }\n    /**\n     * Register a tile for update\n     * @param tile\n     */\n    registerForUpdate(tile) {\n        this._updateTiles.push(tile);\n    }\n    /**\n     * Returns true if the cell is empty\n     * @param i\n     * @param j\n     * @param k\n     * @returns\n     */\n    isEmpty(i, j, k) {\n        return this.getTile(i, j, k).type == 'empty';\n    }\n    /**\n     *\n     * @param tileComponent\n     * @param moveDirection\n     */\n    raisePlayerAction(tileComponent) {\n        const i = tileComponent.tileIndex.x;\n        const j = tileComponent.tileIndex.y;\n        const k = tileComponent.tileIndex.z;\n        // Check all tiles around this tile component\n        this.getTile(i - 1, j + 1, k).onPlayerAction(tileComponent);\n        this.getTile(i + 0, j + 1, k).onPlayerAction(tileComponent);\n        this.getTile(i + 1, j + 1, k).onPlayerAction(tileComponent);\n        this.getTile(i + 1, j + 0, k).onPlayerAction(tileComponent);\n        this.getTile(i + 1, j - 1, k).onPlayerAction(tileComponent);\n        this.getTile(i + 0, j - 1, k).onPlayerAction(tileComponent);\n        this.getTile(i - 1, j - 1, k).onPlayerAction(tileComponent);\n        this.getTile(i - 1, j + 0, k).onPlayerAction(tileComponent);\n    }\n    /**\n     * Gets the cells height by searching up and down until a tile is found\n     * @param i\n     * @param j\n     * @param k\n     * @returns\n     */\n    getCellHeight(i, j, k) {\n        let height = k;\n        try {\n            // if it is empty search down to zero\n            if (this.isEmpty(i, j, k) && k > 0) {\n                while (this.isEmpty(i, j, --k) && k > 0) {\n                    height = k;\n                }\n            }\n            else {\n                // else search up\n                while (!this.isEmpty(i, j, ++k)) {\n                    height = k;\n                }\n            }\n        }\n        catch (e) {\n            //NOP\n        }\n        return height;\n    }\n    /**\n     * Get the tile at this location. If there is none just return empty\n     * @param i\n     * @param j\n     * @param k\n     * @returns\n     */\n    getTile(i, j, k) {\n        let tile = this._tileFactory.empty;\n        if (this._tiles[k] != undefined && this._tiles[k][j] != undefined) {\n            tile = this._tiles[k][j][i] ?? this._tileFactory.empty;\n        }\n        return tile;\n    }\n    /**\n     * Get the cell type. x y and z are int cells values\n     * @param i\n     * @param j\n     * @param k\n     */\n    getCellTypeAndSprite(i, j, k) {\n        let type = 'empty';\n        try {\n            // subtract 10 because all the cell indices are offset by 10\n            const typeIndex = this._levelData.cells[k][j][i] - 10 ?? 0;\n            type = this._levelData.typesAndSprites[typeIndex] ?? 'empty';\n            // this is used as a separator between groups of 10 tile types.\n            // it's there to make the json easier to read. It also means empty.\n            if (type == '---') {\n                type = 'empty';\n            }\n        }\n        catch (e) {\n            //NOP we will just return empty\n        }\n        return type;\n    }\n    /**\n     * Can the player access this tile\n     * @param x screen space\n     * @param y screen space\n     * @param z screen space\n     * @returns true if the player can access this cell\n     */\n    canAccessTile(tileComponent, i, j, k) {\n        let tile = this.getTile(i, j, k);\n        return tile.canAccessTile(tileComponent);\n    }\n    /**\n     * When a tile access another tile\n     * @param tileComponent\n     * @param i\n     * @param j\n     * @param k\n     * @returns\n     */\n    onEnter(tileComponent, i, j, k) {\n        let tile = this.getTile(i, j, k);\n        return tile.onEnter(tileComponent);\n    }\n    /**\n     * Fired when a tile exits a cell\n     * @param x\n     * @param y\n     * @param z\n     */\n    onExit(tileComponent, i, j, k) {\n        let tile = this.getTile(i, j, k);\n        return tile.onExit(tileComponent);\n    }\n    /**\n     * Update the sprite controller and actions\n     * @param dt\n     */\n    update(dt) {\n        this._spriteController.update(dt);\n        for (const tile of this._updateTiles) {\n            tile.update(dt);\n        }\n    }\n}\nexports.GroundManager = GroundManager;\n\n\n//# sourceURL=webpack://earthquest/./src/systems/GroundManager.ts?");

/***/ }),

/***/ "./src/systems/SoundManager.ts":
/*!*************************************!*\
  !*** ./src/systems/SoundManager.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SoundManager = void 0;\nconst song18_mp3_1 = __importDefault(__webpack_require__(/*! ../assets/music/song18.mp3 */ \"./src/assets/music/song18.mp3\"));\n/**\n * Manages background sounds and sounds effects\n */\nclass SoundManager {\n    constructor() {\n        this.audio = new Audio(song18_mp3_1.default);\n    }\n    playMusic(music) {\n        this.audio = new Audio(song18_mp3_1.default);\n        this.audio.loop = true;\n        this.audio.play();\n    }\n    UserReady() {\n        if (!this.userInteraction) {\n            this.audio.play();\n            this.audio.loop = true;\n            this.userInteraction = true;\n        }\n    }\n}\nexports.SoundManager = SoundManager;\n\n\n//# sourceURL=webpack://earthquest/./src/systems/SoundManager.ts?");

/***/ }),

/***/ "./src/systems/TextManager.ts":
/*!************************************!*\
  !*** ./src/systems/TextManager.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TextManager = void 0;\nconst TextController_1 = __webpack_require__(/*! ../graphics/TextController */ \"./src/graphics/TextController.ts\");\nconst ShaderController_1 = __webpack_require__(/*! ../graphics/ShaderController */ \"./src/graphics/ShaderController.ts\");\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\n/**\n * Vertex shader for Font\n */\nconst FontVS = `\n    attribute vec3 aPos;\n    attribute vec2 aTex;\n\n    varying mediump vec2 vTex;\n                                                \n    void main() {\n        vTex = aTex;\n        gl_Position = vec4(aPos.xyz, 1.0);\n    }                          \n`;\n/**\n * Fragment shader for Font\n */\nconst FontFS = ` \n      varying mediump vec2 vTex;\n\n      uniform sampler2D uFont;\n      uniform mediump vec4 uColor;\n                            \n      void main() {\n        mediump vec4 color = texture2D(uFont, vTex) * uColor;\n        if(color.w > 0.2) { \n          gl_FragColor = texture2D(uFont, vTex) * uColor;\n        } else {\n          discard;\n        }\n      }\n`;\n/**\n * Font manager keeps track of all FontController objects\n */\nclass TextManager extends Component_1.Component {\n    constructor(eng) {\n        super(eng);\n        this.texts = new Map();\n        this.shader = new ShaderController_1.ShaderController(this.gl, 'fontShader');\n        /** Shader info for this shader */\n        this.shaderInfo = {\n            attr: { aPos: 0, aTex: 0 },\n            uniform: { uFont: 0, uColor: 0 },\n        };\n    }\n    /**\n     * Initialize the font manage. Only one font can be used per manager\n     * The font data is a json structure.\n     * @param {} fontImage\n     * @param {FontData} fontData\n     */\n    async initialize() {\n        this.fontData = this.eng.assetManager.font.data;\n        this.fontTexture = this.eng.assetManager.font.texture;\n        this.shader.initShaderProgram(FontVS, FontFS);\n        this.shaderInfo.attr.aPos = this.shader.getAttribute('aPos');\n        this.shaderInfo.attr.aTex = this.shader.getAttribute('aTex');\n        this.shaderInfo.uniform.uFont = this.shader.getUniform('uFont');\n        this.shaderInfo.uniform.uColor = this.shader.getUniform('uColor');\n        // find the tallest character. This will be used when calculating new lines\n        this.maxHeightOfCharacters = 0;\n        this.fontData.forEach((value) => {\n            if (value.sizeY > this.maxHeightOfCharacters) {\n                this.maxHeightOfCharacters = value.sizeY;\n            }\n        });\n        // reset the text controllers\n        this.texts.clear();\n    }\n    /**\n     * Updates all the TextureController\n     * @param {number} dt Delta time in ms\n     */\n    update(dt) {\n        // enable the shader\n        this.shader.enable();\n        // Bind the texture to texture unit 0\n        this.fontTexture.enable(this.shaderInfo.uniform.uFont);\n        this.texts.forEach((text) => {\n            this.shader.setVec4(this.shaderInfo.uniform.uColor, text.color);\n            this.shaderInfo.uniform.uColor;\n            text.update(dt);\n        });\n    }\n    /**\n     * Hide a text\n     * @param id\n     */\n    hideText(id) {\n        this.texts.delete(id);\n    }\n    setTextBlock(textModel) {\n        let controller = this.texts.get(textModel.id);\n        // create one if needed\n        if (!controller) {\n            controller = new TextController_1.TextController(this.eng, this.fontData);\n            this.texts.set(textModel.id, controller);\n        }\n        controller.initialize(textModel, this.maxHeightOfCharacters);\n    }\n    /**\n     * clean up everything\n     */\n    dispose() { }\n}\nexports.TextManager = TextManager;\n\n\n//# sourceURL=webpack://earthquest/./src/systems/TextManager.ts?");

/***/ }),

/***/ "./src/systems/TileFactory.ts":
/*!************************************!*\
  !*** ./src/systems/TileFactory.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TileFactory = void 0;\nconst GoldComponent_1 = __webpack_require__(/*! ../components/GoldComponent */ \"./src/components/GoldComponent.ts\");\nconst CollideTileComponent_1 = __webpack_require__(/*! ../components/CollideTileComponent */ \"./src/components/CollideTileComponent.ts\");\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\nconst EmptyTile_1 = __webpack_require__(/*! ../components/EmptyTile */ \"./src/components/EmptyTile.ts\");\nconst NpcComponent_1 = __webpack_require__(/*! ../components/NpcComponent */ \"./src/components/NpcComponent.ts\");\nconst OpenTileComponent_1 = __webpack_require__(/*! ../components/OpenTileComponent */ \"./src/components/OpenTileComponent.ts\");\nconst SlopTileComponent_1 = __webpack_require__(/*! ../components/SlopTileComponent */ \"./src/components/SlopTileComponent.ts\");\nconst PortalTileComponent_1 = __webpack_require__(/*! ../components/PortalTileComponent */ \"./src/components/PortalTileComponent.ts\");\nclass TileFactory extends Component_1.Component {\n    constructor(eng, spriteBatch) {\n        super(eng);\n        this.spriteBatch = spriteBatch;\n        /**\n         * The id for empty\n         */\n        this.emptyId = 'empty';\n        this.empty = new EmptyTile_1.EmptyTile(this.eng);\n    }\n    /**\n     * Create an ID for the tile from the initial\n     * @param i\n     * @param j\n     * @param k\n     * @returns\n     */\n    static createStaticID(i, j, k) {\n        return 'tile.' + i + '.' + j + '.' + k;\n    }\n    /**\n     * Create static tiles\n     * @param type\n     * @param i\n     * @param j\n     * @param k\n     * @returns\n     */\n    createStaticTile(type, i, j, k) {\n        if (!type || type == '---' || type == 'empty') {\n            return new EmptyTile_1.EmptyTile(this.eng, i, j, k);\n        }\n        else if (type.includes('slop')) {\n            return new SlopTileComponent_1.SlopTileComponent(this.eng, this.spriteBatch, type, i, j, k);\n        }\n        else if (type.startsWith('open')) {\n            return new OpenTileComponent_1.OpenTileComponent(this.eng, this.spriteBatch, type, i, j, k);\n        }\n        else if (type.startsWith('player')) {\n            // the player is already created. Just set his position\n            const player = this.eng.scene.player;\n            player.setTilePosition(i, j, k);\n            return player;\n        }\n        else if (type.startsWith('npc')) {\n            return new NpcComponent_1.NpcComponent(this.eng, type, i, j, k);\n        }\n        else if (type.startsWith('gold')) {\n            return new GoldComponent_1.GoldComponents(this.eng, this.spriteBatch, type, i, j, k);\n        }\n        else if (type.startsWith('collide')) {\n            return new CollideTileComponent_1.CollideTileComponent(this.eng, this.spriteBatch, type, i, j, k);\n        }\n        else if (type.startsWith('portal')) {\n            return new PortalTileComponent_1.PortalTileComponent(this.eng, this.spriteBatch, type, i, j, k);\n        }\n        else {\n            console.warn(' unknown tile type ' + type + ' @ (' + i + ', ' + j + ', ' + k + ')');\n            return new EmptyTile_1.EmptyTile(this.eng, i, j, k);\n        }\n    }\n    /**Clear all sprites */\n    clearSpriteBatch() {\n        this.spriteBatch.clearAllSprites();\n    }\n}\nexports.TileFactory = TileFactory;\n\n\n//# sourceURL=webpack://earthquest/./src/systems/TileFactory.ts?");

/***/ }),

/***/ "./src/systems/ViewManager.ts":
/*!************************************!*\
  !*** ./src/systems/ViewManager.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ViewManager = void 0;\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\nconst MathConst = __importStar(__webpack_require__(/*! ../math/constants */ \"./src/math/constants.ts\"));\nconst mat4_1 = __importDefault(__webpack_require__(/*! ../math/mat4 */ \"./src/math/mat4.ts\"));\n/**\n * The View manager is used to move the project.\n */\nclass ViewManager extends Component_1.Component {\n    get screenX() {\n        return this._screenX;\n    }\n    get screenY() {\n        return this._screenY;\n    }\n    /**\n     * Scale the width and height of the project\n     */\n    set scale(value) {\n        this._scale = value < this._minScale ? this._minScale : value;\n        this.updateProjection();\n    }\n    get scale() {\n        return this._scale;\n    }\n    get left() {\n        return this._left;\n    }\n    get top() {\n        return this._top;\n    }\n    get bottom() {\n        return this._bottom;\n    }\n    get right() {\n        return this._right;\n    }\n    get projection() {\n        return this._projection;\n    }\n    constructor(eng) {\n        super(eng);\n        this._minScale = 0.01;\n        this._targetX = 0;\n        this._targetY = 0;\n        this._top = 0;\n        this._left = 0;\n        this._right = 0;\n        this._bottom = 0;\n        this._projection = mat4_1.default.orthographic(this._left, this._right, this._bottom, this._top, 1, -1);\n        this._screenX = 0;\n        this._screenY = 0;\n        this._screenW = eng.width;\n        this._screenH = eng.height;\n        this.scale = 1.0;\n    }\n    /**\n     * Calculates a projection\n     * @returns\n     */\n    calculateProjection(offset, scale = 1.0) {\n        const adjustX = offset.x + (this.eng.width - this.eng.width * scale);\n        const adjustY = offset.y + (this.eng.height - this.eng.height * scale);\n        return mat4_1.default.orthographic(adjustX, this.eng.width * scale + offset.x, adjustY, this.eng.height * scale + offset.y, 1, -1);\n    }\n    /**\n     * Set the target for the project\n     * @param x\n     * @param y\n     */\n    setTarget(x, y) {\n        this._targetX = x;\n        this._targetY = y;\n        this.updateProjection();\n    }\n    updateProjection() {\n        this._screenX = Math.floor(this._targetX);\n        if (this.minX && this.maxX) {\n            this._screenX = MathConst.Clamp(this._targetX, this.minX, this.maxX);\n        }\n        this._screenY = Math.floor(this._targetY);\n        if (this.minY && this.maxY) {\n            this._screenY = MathConst.Clamp(this._targetY, this.minY, this.maxY);\n        }\n        this._left = this._screenX + (this.eng.width - this.eng.width * this._scale);\n        this._bottom = this._screenY + (this.eng.height - this.eng.height * this._scale);\n        this._right = this.eng.width * this._scale + this._screenX;\n        this._top = this.eng.height * this._scale + this._screenY;\n        this._projection = mat4_1.default.orthographic(this._left, this._right, this._bottom, this._top, 1, -1);\n    }\n    update(dt) { }\n}\nexports.ViewManager = ViewManager;\n\n\n//# sourceURL=webpack://earthquest/./src/systems/ViewManager.ts?");

/***/ }),

/***/ "./src/utilities/Random.ts":
/*!*********************************!*\
  !*** ./src/utilities/Random.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Random = void 0;\n/**\n * A simple random class that takes a seed value.\n * https://stackoverflow.com/questions/521295/seeding-the-random-number-generator-in-javascript\n */\nclass Random {\n    constructor(seed) {\n        const seedXor = seed ^ 0xdeadbeef; // 32-bit seed with optional XOR value\n        // Pad seed with Phi, Pi and E.\n        // https://en.wikipedia.org/wiki/Nothing-up-my-sleeve_number\n        this.rand = this.sfc32(0x9e3779b9, 0x243f6a88, 0xb7e15162, seed);\n    }\n    sfc32(a, b, c, d) {\n        return () => {\n            a >>>= 0;\n            b >>>= 0;\n            c >>>= 0;\n            d >>>= 0;\n            var t = (a + b) | 0;\n            a = b ^ (b >>> 9);\n            b = (c + (c << 3)) | 0;\n            c = (c << 21) | (c >>> 11);\n            d = (d + 1) | 0;\n            t = (t + d) | 0;\n            c = (c + t) | 0;\n            return (t >>> 0) / 4294967296;\n        };\n    }\n}\nexports.Random = Random;\n\n\n//# sourceURL=webpack://earthquest/./src/utilities/Random.ts?");

/***/ }),

/***/ "./src/utilities/TileHelper.ts":
/*!*************************************!*\
  !*** ./src/utilities/TileHelper.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TileHelper = void 0;\nconst Component_1 = __webpack_require__(/*! ../components/Component */ \"./src/components/Component.ts\");\nconst mat4_1 = __importDefault(__webpack_require__(/*! ../math/mat4 */ \"./src/math/mat4.ts\"));\nconst vec3_1 = __importDefault(__webpack_require__(/*! ../math/vec3 */ \"./src/math/vec3.ts\"));\n/**\n * This class is used to convert tile and screen coordinates\n */\nclass TileHelper extends Component_1.Component {\n    constructor(eng) {\n        super(eng);\n        this.depthScale = 50;\n        this.calculateTransform();\n    }\n    calculateTransform() {\n        const screenWidth = this.eng.width;\n        const screenHeight = this.eng.height;\n        const scale = 2.0;\n        const tileSize = 32;\n        const cellSize = tileSize * scale;\n        const halfCell = cellSize * 0.5;\n        const quarterCell = cellSize * 0.25;\n        const xAxis = new vec3_1.default([halfCell, -halfCell, 0]);\n        const yAxis = new vec3_1.default([-quarterCell, -quarterCell, halfCell]);\n        const zAxis = new vec3_1.default([\n            (-quarterCell / (screenHeight * this.depthScale)) * 2,\n            (-quarterCell / (screenHeight * this.depthScale)) * 2,\n            0,\n        ]);\n        // translation part\n        const halfWidth = screenWidth * 0.5;\n        const heightOffset = screenHeight - quarterCell;\n        const trans = new vec3_1.default([halfWidth, heightOffset, 1]);\n        // create matrix\n        this._toScreen = new mat4_1.default([\n            xAxis.x,\n            yAxis.x,\n            zAxis.x,\n            0,\n            xAxis.y,\n            yAxis.y,\n            zAxis.y,\n            0,\n            xAxis.z,\n            yAxis.z,\n            zAxis.z,\n            0,\n            trans.x,\n            trans.y,\n            trans.z,\n            1.0,\n        ]);\n        this._toTile = this._toScreen.copy();\n        this._toTile.inverse();\n    }\n    /**\n     * Rotates a vector in the xy plane to a ~45 degree isometric plane\n     * @param tileVector\n     * @returns\n     */\n    rotateToTileSpace(tileVector) {\n        let world = new vec3_1.default(tileVector.x, tileVector.y, tileVector.z ?? 0);\n        const right = new vec3_1.default(0.5, -0.5, 0);\n        const up = new vec3_1.default(-0.5, -0.5, 0);\n        const x = vec3_1.default.dot(world, right.normalize());\n        const y = vec3_1.default.dot(world, up.normalize());\n        return new vec3_1.default(x, y, 0);\n    }\n    rotateFromTileSpace(screenVector) {\n        let world = new vec3_1.default(screenVector.x, screenVector.y, screenVector.z ?? 0);\n        const d = 1.0 / (-0.25 - 0.25);\n        const right = new vec3_1.default(d * -0.5, d * 0.5, 0);\n        const up = new vec3_1.default(d * 0.5, d * 0.5, 0);\n        const x = vec3_1.default.dot(world, right.normalize());\n        const y = vec3_1.default.dot(world, up.normalize());\n        return new vec3_1.default(x, y, 0);\n    }\n    /**\n     * Converts a touch point in pixels to a tile location given a tile height index.\n     * @param touchPoint\n     * @param heightIndex 0 is floor level. The higher the index the higher the y pos\n     * @returns\n     */\n    screenTouchToTile(touchPoint, heightIndex) {\n        const scaleHeight = this.eng.height * this.eng.tileHelper.depthScale;\n        const screen = new vec3_1.default();\n        // x and y screen points are offset by the projection offset.\n        screen.x = touchPoint.x;\n        screen.y = touchPoint.y;\n        // this is offset based on the height index of the tile you are hitting\n        const yOffset = screen.y + 8 * heightIndex;\n        // the depth range is from 1 to -1, back to front. Calculate the z depth\n        screen.z = (yOffset / scaleHeight - this.eng.height / scaleHeight) * 2 + 1;\n        const touchTile = this.eng.tileHelper.toTileLoc(new vec3_1.default(screen.x, screen.y, screen.z), this.eng.viewManager.projection);\n        return touchTile;\n    }\n    toTileLoc(screenPixels, proj) {\n        let cell = this._toTile.multiplyVec3(screenPixels);\n        return cell;\n    }\n    toScreenLoc(i, j, k) {\n        const cell = new vec3_1.default([i, j, k]);\n        const screen = this._toScreen.multiplyVec3(cell);\n        return screen;\n    }\n}\nexports.TileHelper = TileHelper;\n\n\n//# sourceURL=webpack://earthquest/./src/utilities/TileHelper.ts?");

/***/ }),

/***/ "./src/utilities/Timer.ts":
/*!********************************!*\
  !*** ./src/utilities/Timer.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Timer = void 0;\n/**\n * Timer class for checking elapsed time.\n */\nclass Timer {\n    /**\n     * Get the elapsed time in ms\n     */\n    get elapsed() {\n        return this.getTime() - this._startTime;\n    }\n    constructor() {\n        if (window.performance.now) {\n            console.log('Using high performance timer');\n            this.getTime = () => {\n                return window.performance.now();\n            };\n        }\n        else {\n            console.log('Using low performance timer');\n            this.getTime = () => {\n                return new Date().getTime();\n            };\n        }\n        this._startTime = this.getTime();\n    }\n    /**\n     * Start the timer\n     */\n    start() {\n        this._startTime = this.getTime();\n    }\n}\nexports.Timer = Timer;\n\n\n//# sourceURL=webpack://earthquest/./src/utilities/Timer.ts?");

/***/ }),

/***/ "./src/assets/music/song18.mp3":
/*!*************************************!*\
  !*** ./src/assets/music/song18.mp3 ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"data:audio/mpeg;base64,\");\n\n//# sourceURL=webpack://earthquest/./src/assets/music/song18.mp3?");

/***/ }),

/***/ "./src/assets/characters.json":
/*!************************************!*\
  !*** ./src/assets/characters.json ***!
  \************************************/
/***/ ((module) => {

eval("module.exports = JSON.parse('[{\"id\":\"error\",\"loc\":[1,0,16,23],\"offset\":[-16,-15]},{\"id\":\"ness.down.step.left\",\"loc\":[1,24,16,24],\"offset\":[-16,-15]},{\"id\":\"ness.down.step.right\",\"loc\":[18,24,16,24],\"offset\":[-16,-15]},{\"id\":\"ness.up.step\",\"loc\":[35,24,16,24],\"offset\":[-16,-15]},{\"id\":\"ness.left.stand\",\"loc\":[52,24,16,24],\"offset\":[-16,-15]},{\"id\":\"ness.left.step\",\"loc\":[69,24,16,24],\"offset\":[-16,-15]},{\"id\":\"ness.climb.1\",\"loc\":[80,24,16,24],\"offset\":[-16,-15]},{\"id\":\"ness.climb.2\",\"loc\":[102,24,16,24],\"offset\":[-16,-15]},{\"id\":\"ness.scared\",\"loc\":[119,24,16,24],\"offset\":[-16,-15]},{\"id\":\"ness.climb.3\",\"loc\":[136,24,16,24],\"offset\":[-16,-15]},{\"id\":\"ness.sit\",\"loc\":[156,24,16,24],\"offset\":[-16,-15]},{\"id\":\"ness.down.left.stand\",\"loc\":[170,24,16,24],\"offset\":[-16,-15]},{\"id\":\"ness.down.left.step\",\"loc\":[187,24,16,24],\"offset\":[-16,-15]},{\"id\":\"ness.up.left.stand\",\"loc\":[204,24,16,24],\"offset\":[-16,-15]},{\"id\":\"ness.up.left.step\",\"loc\":[221,24,16,24],\"offset\":[-16,-15]},{\"id\":\"ness.success\",\"loc\":[238,24,16,24],\"offset\":[-16,-15]},{\"id\":\"poo.down.step\",\"loc\":[1,56,16,24],\"offset\":[-16,-16]},{\"id\":\"poo.up.step\",\"loc\":[19,56,16,24],\"offset\":[-16,-16]},{\"id\":\"poo.left.stand\",\"loc\":[34,56,16,24],\"offset\":[-16,-16]},{\"id\":\"poo.left.step\",\"loc\":[50,56,16,24],\"offset\":[-16,-16]},{\"id\":\"poo.site.1\",\"loc\":[84,56,16,24],\"offset\":[-16,-16]},{\"id\":\"poo.site.2\",\"loc\":[1,56,16,24],\"offset\":[-16,-16]},{\"id\":\"poo.down.left.stand\",\"loc\":[1,56,16,24],\"offset\":[-16,-16]},{\"id\":\"poo.down.left.step\",\"loc\":[1,56,16,24],\"offset\":[-16,-16]},{\"id\":\"poo.up.left.stand\",\"loc\":[1,56,16,24],\"offset\":[-16,-16]},{\"id\":\"poo.down.left.step\",\"loc\":[1,56,16,24],\"offset\":[-16,-16]},{\"id\":\"mario.down.step\",\"loc\":[2,816,16,24],\"offset\":[-16,-16]},{\"id\":\"mario.up.step\",\"loc\":[35,816,16,24],\"offset\":[-16,-16]},{\"id\":\"mario.left.stand\",\"loc\":[53,816,16,24],\"offset\":[-16,-16]},{\"id\":\"mario.left.step\",\"loc\":[70,816,16,24],\"offset\":[-16,-16]},{\"id\":\"mario.down.left.stand\",\"loc\":[2,841,16,24],\"offset\":[-16,-16]},{\"id\":\"mario.down.left.step\",\"loc\":[19,841,16,24],\"offset\":[-16,-16]},{\"id\":\"mario.up.left.stand\",\"loc\":[36,841,16,24],\"offset\":[-16,-16]},{\"id\":\"mario.up.left.step\",\"loc\":[53,841,16,24],\"offset\":[-16,-16]},{\"id\":\"mario.success\",\"loc\":[70,841,16,24],\"offset\":[-16,-16]}]');\n\n//# sourceURL=webpack://earthquest/./src/assets/characters.json?");

/***/ }),

/***/ "./src/assets/font.json":
/*!******************************!*\
  !*** ./src/assets/font.json ***!
  \******************************/
/***/ ((module) => {

eval("module.exports = JSON.parse('[{\"ch\":\" \",\"value\":\"32\",\"sizeX\":0,\"sizeY\":0,\"bearingX\":0,\"bearingY\":0,\"advance\":8,\"u1\":0,\"v1\":0,\"u2\":0,\"v2\":0},{\"ch\":\"!\",\"value\":\"33\",\"sizeX\":5,\"sizeY\":21,\"bearingX\":3,\"bearingY\":21,\"advance\":11,\"u1\":0,\"v1\":0,\"u2\":0.00488281,\"v2\":0.0205078},{\"ch\":\"\\\\\"\",\"value\":\"34\",\"sizeX\":11,\"sizeY\":8,\"bearingX\":1,\"bearingY\":21,\"advance\":13,\"u1\":0.00488281,\"v1\":0,\"u2\":0.015625,\"v2\":0.0078125},{\"ch\":\"#\",\"value\":\"35\",\"sizeX\":16,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":16,\"u1\":0.015625,\"v1\":0,\"u2\":0.03125,\"v2\":0.0205078},{\"ch\":\"$\",\"value\":\"36\",\"sizeX\":15,\"sizeY\":25,\"bearingX\":1,\"bearingY\":23,\"advance\":16,\"u1\":0.03125,\"v1\":0,\"u2\":0.0458984,\"v2\":0.0244141},{\"ch\":\"%\",\"value\":\"37\",\"sizeX\":25,\"sizeY\":21,\"bearingX\":1,\"bearingY\":21,\"advance\":27,\"u1\":0.0458984,\"v1\":0,\"u2\":0.0703125,\"v2\":0.0205078},{\"ch\":\"&\",\"value\":\"38\",\"sizeX\":24,\"sizeY\":21,\"bearingX\":1,\"bearingY\":21,\"advance\":25,\"u1\":0.0703125,\"v1\":0,\"u2\":0.09375,\"v2\":0.0205078},{\"ch\":\"\\'\",\"value\":\"39\",\"sizeX\":4,\"sizeY\":8,\"bearingX\":1,\"bearingY\":21,\"advance\":6,\"u1\":0.09375,\"v1\":0,\"u2\":0.0976562,\"v2\":0.0078125},{\"ch\":\"(\",\"value\":\"40\",\"sizeX\":9,\"sizeY\":29,\"bearingX\":1,\"bearingY\":22,\"advance\":11,\"u1\":0.0976562,\"v1\":0,\"u2\":0.106445,\"v2\":0.0283203},{\"ch\":\")\",\"value\":\"41\",\"sizeX\":9,\"sizeY\":29,\"bearingX\":1,\"bearingY\":22,\"advance\":11,\"u1\":0.106445,\"v1\":0,\"u2\":0.115234,\"v2\":0.0283203},{\"ch\":\"*\",\"value\":\"42\",\"sizeX\":14,\"sizeY\":12,\"bearingX\":1,\"bearingY\":21,\"advance\":16,\"u1\":0.115234,\"v1\":0,\"u2\":0.128906,\"v2\":0.0117188},{\"ch\":\"+\",\"value\":\"43\",\"sizeX\":16,\"sizeY\":16,\"bearingX\":1,\"bearingY\":18,\"advance\":18,\"u1\":0.128906,\"v1\":0,\"u2\":0.144531,\"v2\":0.015625},{\"ch\":\",\",\"value\":\"44\",\"sizeX\":5,\"sizeY\":8,\"bearingX\":1,\"bearingY\":3,\"advance\":8,\"u1\":0.144531,\"v1\":0,\"u2\":0.149414,\"v2\":0.0078125},{\"ch\":\"-\",\"value\":\"45\",\"sizeX\":9,\"sizeY\":3,\"bearingX\":1,\"bearingY\":9,\"advance\":11,\"u1\":0.149414,\"v1\":0,\"u2\":0.158203,\"v2\":0.00292969},{\"ch\":\".\",\"value\":\"46\",\"sizeX\":4,\"sizeY\":4,\"bearingX\":2,\"bearingY\":4,\"advance\":8,\"u1\":0.158203,\"v1\":0,\"u2\":0.162109,\"v2\":0.00390625},{\"ch\":\"/\",\"value\":\"47\",\"sizeX\":9,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":9,\"u1\":0.162109,\"v1\":0,\"u2\":0.170898,\"v2\":0.0205078},{\"ch\":\"0\",\"value\":\"48\",\"sizeX\":14,\"sizeY\":21,\"bearingX\":1,\"bearingY\":21,\"advance\":16,\"u1\":0.170898,\"v1\":0,\"u2\":0.18457,\"v2\":0.0205078},{\"ch\":\"1\",\"value\":\"49\",\"sizeX\":13,\"sizeY\":21,\"bearingX\":2,\"bearingY\":21,\"advance\":16,\"u1\":0.18457,\"v1\":0,\"u2\":0.197266,\"v2\":0.0205078},{\"ch\":\"2\",\"value\":\"50\",\"sizeX\":14,\"sizeY\":21,\"bearingX\":1,\"bearingY\":21,\"advance\":16,\"u1\":0.197266,\"v1\":0,\"u2\":0.210938,\"v2\":0.0205078},{\"ch\":\"3\",\"value\":\"51\",\"sizeX\":14,\"sizeY\":21,\"bearingX\":1,\"bearingY\":21,\"advance\":16,\"u1\":0.210938,\"v1\":0,\"u2\":0.224609,\"v2\":0.0205078},{\"ch\":\"4\",\"value\":\"52\",\"sizeX\":16,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":16,\"u1\":0.224609,\"v1\":0,\"u2\":0.240234,\"v2\":0.0205078},{\"ch\":\"5\",\"value\":\"53\",\"sizeX\":14,\"sizeY\":21,\"bearingX\":1,\"bearingY\":21,\"advance\":16,\"u1\":0.240234,\"v1\":0,\"u2\":0.253906,\"v2\":0.0205078},{\"ch\":\"6\",\"value\":\"54\",\"sizeX\":15,\"sizeY\":21,\"bearingX\":1,\"bearingY\":21,\"advance\":16,\"u1\":0.253906,\"v1\":0,\"u2\":0.268555,\"v2\":0.0205078},{\"ch\":\"7\",\"value\":\"55\",\"sizeX\":14,\"sizeY\":21,\"bearingX\":2,\"bearingY\":21,\"advance\":16,\"u1\":0.268555,\"v1\":0,\"u2\":0.282227,\"v2\":0.0205078},{\"ch\":\"8\",\"value\":\"56\",\"sizeX\":14,\"sizeY\":21,\"bearingX\":1,\"bearingY\":21,\"advance\":16,\"u1\":0.282227,\"v1\":0,\"u2\":0.295898,\"v2\":0.0205078},{\"ch\":\"9\",\"value\":\"57\",\"sizeX\":14,\"sizeY\":21,\"bearingX\":1,\"bearingY\":21,\"advance\":16,\"u1\":0.295898,\"v1\":0,\"u2\":0.30957,\"v2\":0.0205078},{\"ch\":\":\",\"value\":\"58\",\"sizeX\":5,\"sizeY\":15,\"bearingX\":2,\"bearingY\":15,\"advance\":9,\"u1\":0.30957,\"v1\":0,\"u2\":0.314453,\"v2\":0.0146484},{\"ch\":\";\",\"value\":\"59\",\"sizeX\":6,\"sizeY\":20,\"bearingX\":1,\"bearingY\":15,\"advance\":9,\"u1\":0.314453,\"v1\":0,\"u2\":0.320312,\"v2\":0.0195312},{\"ch\":\"<\",\"value\":\"60\",\"sizeX\":16,\"sizeY\":15,\"bearingX\":1,\"bearingY\":18,\"advance\":18,\"u1\":0.320312,\"v1\":0,\"u2\":0.335938,\"v2\":0.0146484},{\"ch\":\"=\",\"value\":\"61\",\"sizeX\":16,\"sizeY\":8,\"bearingX\":1,\"bearingY\":15,\"advance\":18,\"u1\":0.335938,\"v1\":0,\"u2\":0.351562,\"v2\":0.0078125},{\"ch\":\">\",\"value\":\"62\",\"sizeX\":16,\"sizeY\":15,\"bearingX\":1,\"bearingY\":18,\"advance\":18,\"u1\":0.351562,\"v1\":0,\"u2\":0.367188,\"v2\":0.0146484},{\"ch\":\"?\",\"value\":\"63\",\"sizeX\":12,\"sizeY\":21,\"bearingX\":1,\"bearingY\":21,\"advance\":14,\"u1\":0.367188,\"v1\":0,\"u2\":0.378906,\"v2\":0.0205078},{\"ch\":\"@\",\"value\":\"64\",\"sizeX\":27,\"sizeY\":27,\"bearingX\":1,\"bearingY\":21,\"advance\":29,\"u1\":0.378906,\"v1\":0,\"u2\":0.405273,\"v2\":0.0263672},{\"ch\":\"A\",\"value\":\"65\",\"sizeX\":23,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":23,\"u1\":0.405273,\"v1\":0,\"u2\":0.427734,\"v2\":0.0205078},{\"ch\":\"B\",\"value\":\"66\",\"sizeX\":20,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":21,\"u1\":0.427734,\"v1\":0,\"u2\":0.447266,\"v2\":0.0205078},{\"ch\":\"C\",\"value\":\"67\",\"sizeX\":19,\"sizeY\":21,\"bearingX\":1,\"bearingY\":21,\"advance\":21,\"u1\":0.447266,\"v1\":0,\"u2\":0.46582,\"v2\":0.0205078},{\"ch\":\"D\",\"value\":\"68\",\"sizeX\":22,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":23,\"u1\":0.46582,\"v1\":0,\"u2\":0.487305,\"v2\":0.0205078},{\"ch\":\"E\",\"value\":\"69\",\"sizeX\":18,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":20,\"u1\":0.487305,\"v1\":0,\"u2\":0.504883,\"v2\":0.0205078},{\"ch\":\"F\",\"value\":\"70\",\"sizeX\":17,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":18,\"u1\":0.504883,\"v1\":0,\"u2\":0.521484,\"v2\":0.0205078},{\"ch\":\"G\",\"value\":\"71\",\"sizeX\":22,\"sizeY\":21,\"bearingX\":1,\"bearingY\":21,\"advance\":23,\"u1\":0.521484,\"v1\":0,\"u2\":0.542969,\"v2\":0.0205078},{\"ch\":\"H\",\"value\":\"72\",\"sizeX\":23,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":23,\"u1\":0.542969,\"v1\":0,\"u2\":0.56543,\"v2\":0.0205078},{\"ch\":\"I\",\"value\":\"73\",\"sizeX\":9,\"sizeY\":21,\"bearingX\":1,\"bearingY\":21,\"advance\":11,\"u1\":0.56543,\"v1\":0,\"u2\":0.574219,\"v2\":0.0205078},{\"ch\":\"J\",\"value\":\"74\",\"sizeX\":12,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":12,\"u1\":0.574219,\"v1\":0,\"u2\":0.585938,\"v2\":0.0205078},{\"ch\":\"K\",\"value\":\"75\",\"sizeX\":23,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":23,\"u1\":0.585938,\"v1\":0,\"u2\":0.608398,\"v2\":0.0205078},{\"ch\":\"L\",\"value\":\"76\",\"sizeX\":18,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":20,\"u1\":0.608398,\"v1\":0,\"u2\":0.625977,\"v2\":0.0205078},{\"ch\":\"M\",\"value\":\"77\",\"sizeX\":28,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":28,\"u1\":0.625977,\"v1\":0,\"u2\":0.65332,\"v2\":0.0205078},{\"ch\":\"N\",\"value\":\"78\",\"sizeX\":23,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":23,\"u1\":0.65332,\"v1\":0,\"u2\":0.675781,\"v2\":0.0205078},{\"ch\":\"O\",\"value\":\"79\",\"sizeX\":21,\"sizeY\":21,\"bearingX\":1,\"bearingY\":21,\"advance\":23,\"u1\":0.675781,\"v1\":0,\"u2\":0.696289,\"v2\":0.0205078},{\"ch\":\"P\",\"value\":\"80\",\"sizeX\":17,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":18,\"u1\":0.696289,\"v1\":0,\"u2\":0.712891,\"v2\":0.0205078},{\"ch\":\"Q\",\"value\":\"81\",\"sizeX\":22,\"sizeY\":26,\"bearingX\":1,\"bearingY\":21,\"advance\":23,\"u1\":0.712891,\"v1\":0,\"u2\":0.734375,\"v2\":0.0253906},{\"ch\":\"R\",\"value\":\"82\",\"sizeX\":22,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":21,\"u1\":0.734375,\"v1\":0,\"u2\":0.755859,\"v2\":0.0205078},{\"ch\":\"S\",\"value\":\"83\",\"sizeX\":14,\"sizeY\":21,\"bearingX\":2,\"bearingY\":21,\"advance\":18,\"u1\":0.755859,\"v1\":0,\"u2\":0.769531,\"v2\":0.0205078},{\"ch\":\"T\",\"value\":\"84\",\"sizeX\":20,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":20,\"u1\":0.769531,\"v1\":0,\"u2\":0.789062,\"v2\":0.0205078},{\"ch\":\"U\",\"value\":\"85\",\"sizeX\":23,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":23,\"u1\":0.789062,\"v1\":0,\"u2\":0.811523,\"v2\":0.0205078},{\"ch\":\"V\",\"value\":\"86\",\"sizeX\":23,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":23,\"u1\":0.811523,\"v1\":0,\"u2\":0.833984,\"v2\":0.0205078},{\"ch\":\"W\",\"value\":\"87\",\"sizeX\":31,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":30,\"u1\":0.833984,\"v1\":0,\"u2\":0.864258,\"v2\":0.0205078},{\"ch\":\"X\",\"value\":\"88\",\"sizeX\":23,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":23,\"u1\":0.864258,\"v1\":0,\"u2\":0.886719,\"v2\":0.0205078},{\"ch\":\"Y\",\"value\":\"89\",\"sizeX\":23,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":23,\"u1\":0.886719,\"v1\":0,\"u2\":0.90918,\"v2\":0.0205078},{\"ch\":\"Z\",\"value\":\"90\",\"sizeX\":17,\"sizeY\":21,\"bearingX\":1,\"bearingY\":21,\"advance\":20,\"u1\":0.90918,\"v1\":0,\"u2\":0.925781,\"v2\":0.0205078},{\"ch\":\"[\",\"value\":\"91\",\"sizeX\":8,\"sizeY\":26,\"bearingX\":2,\"bearingY\":22,\"advance\":11,\"u1\":0.925781,\"v1\":0,\"u2\":0.933594,\"v2\":0.0253906},{\"ch\":\"\\\\\\\\\",\"value\":\"92\",\"sizeX\":9,\"sizeY\":21,\"bearingX\":0,\"bearingY\":21,\"advance\":9,\"u1\":0.933594,\"v1\":0,\"u2\":0.942383,\"v2\":0.0205078},{\"ch\":\"]\",\"value\":\"93\",\"sizeX\":8,\"sizeY\":26,\"bearingX\":1,\"bearingY\":22,\"advance\":11,\"u1\":0.942383,\"v1\":0,\"u2\":0.950195,\"v2\":0.0253906},{\"ch\":\"^\",\"value\":\"94\",\"sizeX\":15,\"sizeY\":15,\"bearingX\":0,\"bearingY\":21,\"advance\":15,\"u1\":0.950195,\"v1\":0,\"u2\":0.964844,\"v2\":0.0146484},{\"ch\":\"_\",\"value\":\"95\",\"sizeX\":18,\"sizeY\":2,\"bearingX\":-1,\"bearingY\":-3,\"advance\":16,\"u1\":0.964844,\"v1\":0,\"u2\":0.982422,\"v2\":0.00195312},{\"ch\":\"`\",\"value\":\"96\",\"sizeX\":8,\"sizeY\":5,\"bearingX\":1,\"bearingY\":22,\"advance\":11,\"u1\":0.982422,\"v1\":0,\"u2\":0.990234,\"v2\":0.00488281},{\"ch\":\"a\",\"value\":\"97\",\"sizeX\":13,\"sizeY\":15,\"bearingX\":1,\"bearingY\":15,\"advance\":14,\"u1\":0,\"v1\":0.0283203,\"u2\":0.0126953,\"v2\":0.0429688},{\"ch\":\"b\",\"value\":\"98\",\"sizeX\":15,\"sizeY\":22,\"bearingX\":0,\"bearingY\":22,\"advance\":16,\"u1\":0.0126953,\"v1\":0.0283203,\"u2\":0.0273438,\"v2\":0.0498047},{\"ch\":\"c\",\"value\":\"99\",\"sizeX\":13,\"sizeY\":15,\"bearingX\":1,\"bearingY\":15,\"advance\":14,\"u1\":0.0273438,\"v1\":0.0283203,\"u2\":0.0400391,\"v2\":0.0429688},{\"ch\":\"d\",\"value\":\"100\",\"sizeX\":15,\"sizeY\":22,\"bearingX\":1,\"bearingY\":22,\"advance\":16,\"u1\":0.0400391,\"v1\":0.0283203,\"u2\":0.0546875,\"v2\":0.0498047},{\"ch\":\"e\",\"value\":\"101\",\"sizeX\":13,\"sizeY\":15,\"bearingX\":1,\"bearingY\":15,\"advance\":14,\"u1\":0.0546875,\"v1\":0.0283203,\"u2\":0.0673828,\"v2\":0.0429688},{\"ch\":\"f\",\"value\":\"102\",\"sizeX\":11,\"sizeY\":22,\"bearingX\":0,\"bearingY\":22,\"advance\":11,\"u1\":0.0673828,\"v1\":0.0283203,\"u2\":0.078125,\"v2\":0.0498047},{\"ch\":\"g\",\"value\":\"103\",\"sizeX\":15,\"sizeY\":24,\"bearingX\":1,\"bearingY\":17,\"advance\":16,\"u1\":0.078125,\"v1\":0.0283203,\"u2\":0.0927734,\"v2\":0.0517578},{\"ch\":\"h\",\"value\":\"104\",\"sizeX\":16,\"sizeY\":22,\"bearingX\":0,\"bearingY\":22,\"advance\":16,\"u1\":0.0927734,\"v1\":0.0283203,\"u2\":0.108398,\"v2\":0.0498047},{\"ch\":\"i\",\"value\":\"105\",\"sizeX\":9,\"sizeY\":22,\"bearingX\":0,\"bearingY\":22,\"advance\":9,\"u1\":0.108398,\"v1\":0.0283203,\"u2\":0.117188,\"v2\":0.0498047},{\"ch\":\"j\",\"value\":\"106\",\"sizeX\":8,\"sizeY\":29,\"bearingX\":-1,\"bearingY\":22,\"advance\":9,\"u1\":0.117188,\"v1\":0.0283203,\"u2\":0.125,\"v2\":0.0566406},{\"ch\":\"k\",\"value\":\"107\",\"sizeX\":16,\"sizeY\":22,\"bearingX\":0,\"bearingY\":22,\"advance\":16,\"u1\":0.125,\"v1\":0.0283203,\"u2\":0.140625,\"v2\":0.0498047},{\"ch\":\"l\",\"value\":\"108\",\"sizeX\":9,\"sizeY\":22,\"bearingX\":0,\"bearingY\":22,\"advance\":9,\"u1\":0.140625,\"v1\":0.0283203,\"u2\":0.149414,\"v2\":0.0498047},{\"ch\":\"m\",\"value\":\"109\",\"sizeX\":25,\"sizeY\":15,\"bearingX\":0,\"bearingY\":15,\"advance\":25,\"u1\":0.149414,\"v1\":0.0283203,\"u2\":0.173828,\"v2\":0.0429688},{\"ch\":\"n\",\"value\":\"110\",\"sizeX\":16,\"sizeY\":15,\"bearingX\":0,\"bearingY\":15,\"advance\":16,\"u1\":0.173828,\"v1\":0.0283203,\"u2\":0.189453,\"v2\":0.0429688},{\"ch\":\"o\",\"value\":\"111\",\"sizeX\":14,\"sizeY\":15,\"bearingX\":1,\"bearingY\":15,\"advance\":16,\"u1\":0.189453,\"v1\":0.0283203,\"u2\":0.203125,\"v2\":0.0429688},{\"ch\":\"p\",\"value\":\"112\",\"sizeX\":15,\"sizeY\":22,\"bearingX\":0,\"bearingY\":15,\"advance\":16,\"u1\":0.203125,\"v1\":0.0283203,\"u2\":0.217773,\"v2\":0.0498047},{\"ch\":\"q\",\"value\":\"113\",\"sizeX\":15,\"sizeY\":23,\"bearingX\":1,\"bearingY\":16,\"advance\":16,\"u1\":0.217773,\"v1\":0.0283203,\"u2\":0.232422,\"v2\":0.0507812},{\"ch\":\"r\",\"value\":\"114\",\"sizeX\":11,\"sizeY\":15,\"bearingX\":0,\"bearingY\":15,\"advance\":11,\"u1\":0.232422,\"v1\":0.0283203,\"u2\":0.243164,\"v2\":0.0429688},{\"ch\":\"s\",\"value\":\"115\",\"sizeX\":11,\"sizeY\":15,\"bearingX\":1,\"bearingY\":15,\"advance\":12,\"u1\":0.243164,\"v1\":0.0283203,\"u2\":0.253906,\"v2\":0.0429688},{\"ch\":\"t\",\"value\":\"116\",\"sizeX\":9,\"sizeY\":19,\"bearingX\":0,\"bearingY\":19,\"advance\":9,\"u1\":0.253906,\"v1\":0.0283203,\"u2\":0.262695,\"v2\":0.046875},{\"ch\":\"u\",\"value\":\"117\",\"sizeX\":16,\"sizeY\":15,\"bearingX\":0,\"bearingY\":15,\"advance\":16,\"u1\":0.262695,\"v1\":0.0283203,\"u2\":0.27832,\"v2\":0.0429688},{\"ch\":\"v\",\"value\":\"118\",\"sizeX\":16,\"sizeY\":15,\"bearingX\":0,\"bearingY\":15,\"advance\":16,\"u1\":0.27832,\"v1\":0.0283203,\"u2\":0.293945,\"v2\":0.0429688},{\"ch\":\"w\",\"value\":\"119\",\"sizeX\":23,\"sizeY\":15,\"bearingX\":0,\"bearingY\":15,\"advance\":23,\"u1\":0.293945,\"v1\":0.0283203,\"u2\":0.316406,\"v2\":0.0429688},{\"ch\":\"x\",\"value\":\"120\",\"sizeX\":16,\"sizeY\":15,\"bearingX\":0,\"bearingY\":15,\"advance\":16,\"u1\":0.316406,\"v1\":0.0283203,\"u2\":0.332031,\"v2\":0.0429688},{\"ch\":\"y\",\"value\":\"121\",\"sizeX\":16,\"sizeY\":22,\"bearingX\":0,\"bearingY\":15,\"advance\":16,\"u1\":0.332031,\"v1\":0.0283203,\"u2\":0.347656,\"v2\":0.0498047},{\"ch\":\"z\",\"value\":\"122\",\"sizeX\":14,\"sizeY\":15,\"bearingX\":0,\"bearingY\":15,\"advance\":14,\"u1\":0.347656,\"v1\":0.0283203,\"u2\":0.361328,\"v2\":0.0429688},{\"ch\":\"{\",\"value\":\"123\",\"sizeX\":11,\"sizeY\":26,\"bearingX\":2,\"bearingY\":22,\"advance\":15,\"u1\":0.361328,\"v1\":0.0283203,\"u2\":0.37207,\"v2\":0.0537109},{\"ch\":\"|\",\"value\":\"124\",\"sizeX\":2,\"sizeY\":29,\"bearingX\":2,\"bearingY\":22,\"advance\":6,\"u1\":0.37207,\"v1\":0.0283203,\"u2\":0.374023,\"v2\":0.0566406},{\"ch\":\"}\",\"value\":\"125\",\"sizeX\":11,\"sizeY\":26,\"bearingX\":2,\"bearingY\":22,\"advance\":15,\"u1\":0.374023,\"v1\":0.0283203,\"u2\":0.384766,\"v2\":0.0537109},{\"ch\":\"~\",\"value\":\"126\",\"sizeX\":17,\"sizeY\":5,\"bearingX\":0,\"bearingY\":13,\"advance\":17,\"u1\":0.384766,\"v1\":0.0283203,\"u2\":0.401367,\"v2\":0.0332031}]');\n\n//# sourceURL=webpack://earthquest/./src/assets/font.json?");

/***/ }),

/***/ "./src/assets/isometricTile.json":
/*!***************************************!*\
  !*** ./src/assets/isometricTile.json ***!
  \***************************************/
/***/ ((module) => {

eval("module.exports = JSON.parse('[{\"id\":\"block\",\"loc\":[0,0,32,32],\"offset\":[-32,-48]},{\"id\":\"slop.left\",\"loc\":[32,0,32,32],\"offset\":[-32,-48]},{\"id\":\"slop.right\",\"loc\":[64,0,32,32],\"offset\":[-32,-48]},{\"id\":\"block.half\",\"loc\":[96,0,32,32],\"offset\":[-32,-48]},{\"id\":\"block.half.highlight\",\"loc\":[128,0,32,32],\"offset\":[-32,-48]},{\"id\":\"empty\",\"loc\":[64,32,32,32],\"offset\":[-32,-48]},{\"id\":\"tree\",\"loc\":[0,32,64,64],\"offset\":[-64,-48]},{\"id\":\"slop.back.right\",\"loc\":[96,32,32,32],\"offset\":[-32,-48]},{\"id\":\"slop.back.left\",\"loc\":[128,32,32,32],\"offset\":[-32,-48]},{\"id\":\"block.highlight\",\"loc\":[160,0,32,32],\"offset\":[-32,-48]},{\"id\":\"block.brick\",\"loc\":[160,32,32,32],\"offset\":[-32,-48]},{\"id\":\"block.grass\",\"loc\":[64,64,32,32],\"offset\":[-32,-48]},{\"id\":\"block.grass.patch\",\"loc\":[96,64,32,32],\"offset\":[-32,-48]},{\"id\":\"block.grass.dirt\",\"loc\":[128,64,32,32],\"offset\":[-32,-48]},{\"id\":\"block.grass.edge.left\",\"loc\":[32,96,32,32],\"offset\":[-32,-48]},{\"id\":\"block.grass.edge.right\",\"loc\":[64,96,32,32],\"offset\":[-32,-48]},{\"id\":\"block.grass.edge.both\",\"loc\":[160,64,32,32],\"offset\":[-32,-48]},{\"id\":\"coin.0\",\"loc\":[96,96,32,32],\"offset\":[-32,-48]},{\"id\":\"coin.1\",\"loc\":[128,96,32,32],\"offset\":[-32,-48]},{\"id\":\"coin.2\",\"loc\":[160,96,32,32],\"offset\":[-32,-48]},{\"id\":\"coin.collect.1\",\"loc\":[192,96,32,32],\"offset\":[-32,-48]},{\"id\":\"coin.collect.2\",\"loc\":[224,96,32,32],\"offset\":[-32,-48]},{\"id\":\"coin.collect.3\",\"loc\":[256,96,32,32],\"offset\":[-32,-48]}]');\n\n//# sourceURL=webpack://earthquest/./src/assets/isometricTile.json?");

/***/ }),

/***/ "./src/assets/level1.json":
/*!********************************!*\
  !*** ./src/assets/level1.json ***!
  \********************************/
/***/ ((module) => {

eval("module.exports = JSON.parse('{\"typesAndSprites\":[\"---\",\"open|block\",\"slop|slop.left\",\"slop|slop.right\",\"jump|block.half\",\"jump|block.half.highlight\",\"collide|tree\",\"slop|slop.back.right\",\"slop|slop.back.left\",\"open|block.highlight\",\"---\",\"player|\",\"npc:poo\"],\"cellHeightOffset\":-2,\"cells\":[[[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],[11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11],[11,11,11,11,11,11,11,10,10,11,11,11,16,11,11,11,11,11,11,11],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],[11,11,11,11,11,11,16,11,11,11,11,11,11,11,11,16,11,11,11,11],[11,11,11,11,11,11,11,11,11,11,11,11,16,11,11,16,11,11,11,11],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11]],[[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10],[10,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,21,10,10,22,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]],[[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,16,11,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,11,11,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]],[[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]]]}');\n\n//# sourceURL=webpack://earthquest/./src/assets/level1.json?");

/***/ }),

/***/ "./src/assets/menu.json":
/*!******************************!*\
  !*** ./src/assets/menu.json ***!
  \******************************/
/***/ ((module) => {

eval("module.exports = JSON.parse('[{\"id\":\"menu.left.top\",\"loc\":[80,672,64,64],\"offset\":[0,0]},{\"id\":\"menu.left.middle\",\"loc\":[80,721,64,64],\"offset\":[0,0]},{\"id\":\"menu.left.bottom\",\"loc\":[80,784,64,64],\"offset\":[0,0]},{\"id\":\"menu.center.top\",\"loc\":[141,672,64,64],\"offset\":[0,0]},{\"id\":\"menu.center.middle\",\"loc\":[141,718,64,64],\"offset\":[0,0]},{\"id\":\"menu.center.bottom\",\"loc\":[141,784,64,64],\"offset\":[0,0]},{\"id\":\"menu.right.top\",\"loc\":[208,672,64,64],\"offset\":[0,0]},{\"id\":\"menu.right.middle\",\"loc\":[208,720,64,64],\"offset\":[0,0]},{\"id\":\"menu.right.bottom\",\"loc\":[208,784,64,64],\"offset\":[0,0]},{\"id\":\"cursor\",\"loc\":[97,609,64,47],\"offset\":[-4,0]},{\"id\":\"gameMenu\",\"loc\":[0,0,800,600],\"offset\":[0,0]}]');\n\n//# sourceURL=webpack://earthquest/./src/assets/menu.json?");

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ var __webpack_exports__ = (__webpack_exec__("./src/index.ts"));
/******/ }
]);